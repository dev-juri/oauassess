var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.799,1,2.334]],["body/guards/AccessTokenGuard.html",[1,3.132,2,2.739,3,0.247,4,0.223,5,0.176,6,5.186,7,3.078,8,0.247,9,1.455,10,1.749,11,5.186,12,2.433,13,4.929,14,1.891,15,3.078,16,5.748,17,4.819,18,5.186,19,0.772,20,3.593,21,1.661,22,0.02,23,1.094,24,0.424,25,1.352,26,4.222,27,4.614,28,3.593,29,2.486,30,1.382,31,2.238,32,4.929,33,3.857,34,3.593,35,0.676,36,3.132,37,0.737,38,3.311,39,1.124,40,3.892,41,0.737,42,2.486,43,3.757,44,3.078,45,2.284,46,2.284,47,2.739,48,3.078,49,0.247,50,0.009,51,2.739,52,1.532,53,3.078,54,1.455,55,3.593,56,3.078,57,5.613,58,3.593,59,3.593,60,2.112,61,1.613,62,2.115,63,3.757,64,1.307,65,3.593,66,3.593,67,3.078,68,1.971,69,1.733,70,0.958,71,1.379,72,3.593,73,3.593,74,0.013,75,0.013]],["title/interfaces/ActiveAdminData.html",[76,1.488,77,2.54]],["body/interfaces/ActiveAdminData.html",[3,0.355,4,0.32,5,0.254,8,0.355,22,0.019,23,1.351,24,0.505,35,1.018,49,0.355,74,0.017,75,0.017,76,2.096,77,4.313,78,3.045,79,4.431,80,2.494,81,4.431,82,1.498,83,4.089,84,5.951]],["title/classes/Admin.html",[50,0.01,80,1.771]],["body/classes/Admin.html",[3,0.264,4,0.238,5,0.188,8,0.264,10,1.194,19,0.799,22,0.02,23,1.132,24,0.47,35,0.917,37,0.73,41,0.788,49,0.399,50,0.013,54,1.24,60,1.647,61,1.258,62,2.262,64,1.875,68,2.107,69,1.853,70,1.003,71,2.697,74,0.014,75,0.014,80,2.487,82,1.24,83,3.427,85,1.258,86,2.658,87,3.955,88,1.906,89,4.028,90,3.036,91,3.842,92,3.842,93,3.842,94,3.842,95,3.663,96,2.342,97,2.262,98,1.078,99,2.829,100,3.291,101,1.325,102,3.932,103,2.658,104,5.157,105,2.658,106,2.658,107,2.262,108,2.262,109,2.262,110,2.107,111,2.262,112,3.036,113,2.262,114,3.036,115,1.745,116,2.989,117,2.658,118,3.291,119,3.842,120,2.658,121,3.842,122,5.157,123,3.842,124,3.842,125,3.842,126,3.842,127,3.842]],["title/controllers/AdminController.html",[128,1.574,129,2.54]],["body/controllers/AdminController.html",[3,0.278,4,0.251,5,0.199,8,0.278,9,1.578,10,1.858,19,0.556,21,1.196,22,0.02,23,0.788,24,0.306,25,0.974,30,1.137,33,3.146,37,0.715,41,0.832,49,0.278,50,0.011,52,1.26,57,3.472,61,1.749,70,0.788,74,0.014,75,0.014,80,3.186,88,1.326,115,1.84,128,1.737,129,3.697,130,1.84,131,3.472,132,2.803,133,2.294,134,4.578,135,3.472,136,4.312,137,4.052,138,3.396,139,4.052,140,5.978,141,3.146,142,4.052,143,4.578,144,4.578,145,2.743,146,4.578,147,4.052,148,4.578,149,1.609,150,5.343,151,3.396,152,3.396,153,4.052,154,1.954,155,2.803,156,2.08,157,3.472,158,3.697,159,3.279,160,3.472,161,2.575,162,3.472,163,3.089,164,4.578,165,4.073,166,4.073,167,4.578,168,5.343,169,1.954,170,3.089,171,4.052,172,2.803,173,3.089,174,2.385,175,3.089,176,4.052,177,4.052]],["title/modules/AdminModule.html",[178,1.771,179,2.334]],["body/modules/AdminModule.html",[1,3.361,3,0.274,4,0.247,5,0.196,22,0.02,23,0.776,37,0.825,41,0.819,42,2.759,43,3.041,45,2.535,49,0.274,50,0.01,74,0.014,75,0.014,80,1.923,96,1.811,98,1.119,117,3.658,129,4.104,130,2.401,159,3.705,160,3.417,178,2.86,179,4.447,180,2.188,181,2.188,182,2.535,183,2.535,184,2.188,185,3.492,186,2.535,187,3.417,188,3.417,189,3.976,190,3.361,191,2.535,192,2.188,193,3.989,194,4.104,195,3.989,196,3.989,197,3.989,198,2.759,199,3.417,200,3.361,201,3.989,202,3.417,203,3.989,204,3.989,205,3.417,206,3.989,207,3.417,208,5.288,209,3.041,210,3.658,211,3.989,212,2.348,213,3.041,214,3.989,215,3.989,216,3.989,217,3.417,218,3.989]],["title/injectables/AdminService.html",[39,0.838,159,2.014]],["body/injectables/AdminService.html",[3,0.279,4,0.252,5,0.199,8,0.279,9,1.58,10,2.11,12,1.558,14,2.053,19,0.821,21,1.767,22,0.02,23,1.164,24,0.452,25,1.438,30,1.501,31,2.889,35,0.821,37,0.743,39,1.221,41,0.834,49,0.279,50,0.011,52,1.262,54,0.976,61,1.329,64,1.946,70,1.164,74,0.014,75,0.014,80,1.958,83,3.15,98,1.139,101,1.401,106,2.81,133,2.605,134,4.585,135,4.585,136,4.202,159,2.935,161,2.581,162,3.479,199,3.479,219,1.741,220,3.479,221,5.351,222,4.061,223,3.266,224,4.061,225,5.351,226,4.061,227,5.351,228,4.061,229,2.085,230,4.061,231,3.804,232,4.061,233,2.81,234,4.061,235,4.061,236,4.061]],["title/controllers/AppController.html",[128,1.574,237,2.54]],["body/controllers/AppController.html",[3,0.372,4,0.336,5,0.266,22,0.02,37,0.721,41,1.113,49,0.372,50,0.014,52,1.686,74,0.017,75,0.017,128,2.749,130,2.464,172,3.753,237,4.437,238,4.648,239,4.02,240,4.648]],["title/modules/AppModule.html",[178,1.771,241,2.54]],["body/modules/AppModule.html",[3,0.262,4,0.236,5,0.187,22,0.02,37,0.81,38,2.247,41,0.783,45,2.426,49,0.262,50,0.01,54,0.917,71,1.97,74,0.014,75,0.014,98,1.071,130,2.332,178,2.798,179,4.239,180,2.094,181,2.094,182,2.426,183,2.426,184,2.094,185,3.416,186,2.426,190,3.263,191,2.426,192,2.094,198,2.641,205,4.399,212,3.416,237,4.015,239,3.927,240,3.27,241,4.987,242,3.27,243,3.27,244,3.27,245,3.927,246,3.927,247,2.91,248,3.817,249,3.817,250,6.206,251,3.817,252,3.817,253,5.135,254,3.817,255,5.135,256,3.817,257,5.135,258,3.817,259,3.817,260,2.91,261,2.91,262,4.424,263,3.27,264,3.817,265,3.817,266,5.135,267,3.817,268,3.817,269,3.817,270,3.817,271,3.27,272,3.817,273,3.817,274,3.817,275,3.817]],["title/injectables/AppService.html",[39,0.838,239,2.162]],["body/injectables/AppService.html",[3,0.363,4,0.328,5,0.26,8,0.363,9,1.867,19,0.727,22,0.02,30,1.485,35,0.867,37,0.595,39,1.442,41,1.087,49,0.363,50,0.014,70,1.03,74,0.017,75,0.017,219,2.27,239,3.722,276,4.537,277,7.001,278,5.296,279,5.296,280,5.296]],["title/controllers/AuthController.html",[128,1.574,194,2.54]],["body/controllers/AuthController.html",[3,0.288,4,0.26,5,0.206,8,0.288,9,1.614,10,1.89,19,0.576,21,1.239,22,0.02,23,0.816,24,0.317,25,1.008,30,1.177,37,0.77,41,0.861,49,0.288,50,0.011,52,1.304,64,1.526,70,0.816,74,0.015,75,0.015,80,2.636,88,1.373,128,1.798,130,1.905,132,2.903,133,2.333,145,2.807,149,1.384,151,3.474,152,3.474,154,2.023,155,2.903,158,3.782,163,3.198,165,4.167,166,4.167,167,3.594,169,2.023,170,3.198,172,2.903,173,3.198,189,3.58,194,3.782,281,3.594,282,3.782,283,4.622,284,3.594,285,4.354,286,4.196,287,4.196,288,4.196,289,4.683,290,4.196,291,4.196,292,3.594,293,5.467,294,4.196,295,3.594,296,4.196,297,2.666,298,3.594,299,2.023,300,4.196,301,3.594,302,4.196,303,2.301,304,3.594,305,4.196]],["title/injectables/AuthService.html",[39,0.838,189,2.162]],["body/injectables/AuthService.html",[3,0.272,4,0.245,5,0.194,8,0.272,9,1.554,10,1.838,12,2.02,14,2.02,19,0.722,21,1.554,22,0.02,23,1.15,24,0.397,25,1.265,30,1.111,31,2.391,37,0.758,39,1.201,40,2.741,41,0.813,49,0.272,50,0.01,52,1.636,54,0.952,60,2.256,61,1.723,64,2.15,70,0.77,74,0.014,75,0.014,83,2.332,102,4.013,133,2.268,159,3.698,189,3.099,200,4.372,202,3.394,219,1.698,231,3.346,283,4.09,284,4.51,285,4.168,289,3.394,295,3.394,303,2.173,306,3.394,307,3.962,308,3.962,309,3.962,310,2.332,311,2.539,312,1.91,313,2.332,314,3.962,315,3.02,316,3.962,317,3.962,318,2.173,319,5.264,320,3.962,321,3.962,322,3.962,323,3.962,324,5.264,325,3.962,326,3.962,327,3.962,328,1.52,329,1.44]],["title/guards/AuthenticationGuard.html",[0,2.799,210,2.54]],["body/guards/AuthenticationGuard.html",[1,4.266,2,4.839,3,0.247,4,0.223,5,0.177,8,0.247,9,1.457,10,1.75,11,5.856,12,2.515,14,1.893,19,0.677,21,1.457,22,0.02,23,0.96,24,0.372,25,1.186,26,4.228,27,4.618,29,2.491,30,1.01,31,2.241,37,0.737,39,1.126,40,3.414,41,0.739,48,3.085,49,0.247,50,0.009,51,2.745,52,2.038,54,1.525,60,1.543,61,1.179,64,1.309,69,2.715,70,0.7,71,1.893,74,0.013,75,0.013,82,0.865,138,2.288,207,3.085,209,2.745,210,3.414,297,2.288,298,3.085,299,1.736,330,3.085,331,4.935,332,4.935,333,4.935,334,3.601,335,6.713,336,3.601,337,3.601,338,3.601,339,3.085,340,3.601,341,2.745,342,4.935,343,3.085,344,3.601,345,3.601,346,4.228,347,3.601,348,3.601,349,3.601,350,3.601,351,1.635,352,3.601,353,3.601,354,2.491,355,3.085,356,2.745,357,3.601,358,3.601,359,3.601,360,3.601,361,3.601,362,3.601]],["title/classes/CreateAdminDto.html",[50,0.01,136,2.334]],["body/classes/CreateAdminDto.html",[3,0.256,4,0.231,5,0.183,8,0.256,19,0.787,22,0.02,23,1.249,24,0.433,35,0.909,37,0.568,49,0.256,50,0.013,74,0.013,75,0.013,80,2.964,82,1.215,83,3.782,85,1.221,87,4.083,88,1.877,136,3.212,149,1.451,169,1.798,328,1.939,363,5.266,364,3.195,365,3.644,366,4.33,367,3.194,368,3.729,369,3.729,370,3.497,371,5.055,372,5.055,373,4.898,374,3.729,375,3.729,376,4.686,377,5.266,378,4.686,379,5.475,380,5.266,381,3.156,382,5.266,383,5.266,384,5.055,385,3.195,386,5.266,387,5.055,388,5.055,389,3.729,390,3.907,391,4.33,392,3.619,393,3.619,394,3.195,395,2.045,396,3.729,397,3.729,398,3.729,399,3.195,400,3.195,401,3.195]],["title/classes/CreateExamAssignmentDto.html",[50,0.01,402,2.54]],["body/classes/CreateExamAssignmentDto.html",[3,0.161,4,0.145,5,0.115,8,0.161,19,0.806,22,0.02,24,0.524,25,1.527,35,0.832,37,0.556,49,0.161,50,0.011,74,0.01,75,0.01,82,0.867,85,0.767,88,1.747,90,2.909,105,1.621,116,2.537,149,1.427,169,1.13,299,1.13,329,1.312,365,3.392,367,3.385,390,3.583,392,2.59,393,2.59,395,1.285,402,2.496,403,4.297,404,2.075,405,2.007,406,3.091,407,1.546,408,3.091,409,2.291,410,2.75,411,3.608,412,3.608,413,2.75,414,2.75,415,4.829,416,5.637,417,3.608,418,3.769,419,2.259,420,3.769,421,5.944,422,5.944,423,6.063,424,6.063,425,4.538,426,4.829,427,5.637,428,4.4,429,3.419,430,3.608,431,2.343,432,4.942,433,3.608,434,3.608,435,2.909,436,4.942,437,2.343,438,2.343,439,3.768,440,3.015,441,1.896,442,2.383,443,2.537,444,2.909,445,2.007,446,2.343,447,3.091,448,3.608,449,3.091,450,4.4,451,2.343,452,3.608,453,3.091,454,4.942,455,2.343,456,2.343,457,4.4,458,2.007,459,4.4,460,1.379,461,3.608,462,3.608,463,2.496,464,2.007]],["title/classes/CreateExamDto.html",[50,0.01,465,2.162]],["body/classes/CreateExamDto.html",[3,0.173,4,0.156,5,0.124,8,0.173,19,0.756,22,0.02,23,1.128,24,0.496,35,0.704,37,0.517,49,0.173,50,0.01,61,1.248,74,0.01,75,0.01,82,0.916,85,0.825,88,1.804,90,3.021,116,1.958,149,1.468,151,2.423,169,1.215,174,3.021,299,1.215,328,1.463,329,1.386,365,3.503,367,3.42,373,3.507,376,5.083,378,3.912,381,3.185,390,3.686,392,3.414,393,2.708,395,1.382,403,4.421,404,1.989,406,3.267,407,1.634,440,3.324,441,1.463,442,2.797,443,2.978,444,2.245,445,2.158,458,2.158,460,1.483,463,1.743,464,2.158,465,2.245,466,2.158,467,2.907,468,2.907,469,3.267,470,3.813,471,2.907,472,2.907,473,2.092,474,3.267,475,3.813,476,6.668,477,4.969,478,4.394,479,1.545,480,3.267,481,2.907,482,3.267,483,3.183,484,3.183,485,3.183,486,5.512,487,4.601,488,2.519,489,2.519,490,5.131,491,4.601,492,4.601,493,2.519,494,2.519,495,5.131,496,4.723,497,3.942,498,2.519,499,2.519,500,2.905,501,5.131,502,2.658,503,2.519,504,2.519,505,2.474,506,5.512,507,3.942,508,2.519,509,2.519,510,3.813,511,4.601,512,2.519,513,3.813,514,2.519,515,2.519,516,2.519]],["title/injectables/CreateExamProvider.html",[39,0.838,517,2.162]],["body/injectables/CreateExamProvider.html",[3,0.179,4,0.161,5,0.274,8,0.179,9,1.156,10,1.46,12,2.003,14,1.501,19,0.537,21,1.156,22,0.02,23,0.761,24,0.295,25,0.941,30,1.098,31,1.777,37,0.721,38,1.535,39,0.893,41,0.535,49,0.179,50,0.007,52,1.623,54,1.255,60,1.678,61,1.709,62,1.535,64,2.216,68,1.43,69,1.257,70,0.507,71,1,74,0.01,75,0.01,98,0.731,101,0.899,133,1.802,141,1.535,149,0.991,156,2.009,161,2.487,174,2.766,219,1.118,223,3.129,229,1.339,311,1.887,312,1.257,313,1.535,318,1.43,328,1,329,2.035,343,3.353,402,2.708,404,1.979,408,3.353,409,2.287,413,2.984,419,1.339,465,3.588,467,3.582,473,2.147,517,2.304,518,4.025,519,1.804,520,2.708,521,2.708,522,4.646,523,3.582,524,2.608,525,3.735,526,3.439,527,4.698,528,4.025,529,2.608,530,1.988,531,3.319,532,2.577,533,2.608,534,4.473,535,4.473,536,2.708,537,3.319,538,3.582,539,2.681,540,2.708,541,2.984,542,3.914,543,3.914,544,3.353,545,3.914,546,3.353,547,2.487,548,3.914,549,2.147,550,1.887,551,2.708,552,1.804,553,1.988,554,1.339,555,1.535,556,2.608,557,2.708,558,2.608,559,1.535,560,1.657,561,1.988,562,1.988,563,1.43,564,2.234,565,1.804,566,2.234,567,1.804,568,1.988,569,2.608,570,1.988,571,2.608,572,3.25,573,1.804,574,1.804,575,2.608,576,2.608,577,1.657,578,2.608,579,2.608,580,1.988,581,1.535,582,2.608,583,1.988,584,1.804,585,2.608,586,1.43,587,1.988,588,2.234,589,1.804,590,1.988,591,2.608,592,1.804,593,2.608,594,1.804,595,2.608,596,1.804,597,1.804]],["title/classes/Exam.html",[50,0.01,404,1.03]],["body/classes/Exam.html",[3,0.257,4,0.232,5,0.184,8,0.257,19,0.91,22,0.02,24,0.528,25,1.218,35,0.845,36,2.38,37,0.646,49,0.394,50,0.01,54,0.9,70,0.728,71,2.712,74,0.013,75,0.013,82,1.218,85,1.226,88,2.171,89,4.26,95,3.993,96,2.302,97,2.204,98,1.05,99,2.781,101,1.748,107,2.204,108,2.204,109,2.204,110,2.054,111,2.204,112,2.984,113,2.204,114,2.984,115,1.701,116,3.162,299,1.806,381,3.162,404,1.422,419,1.923,440,3.59,444,2.204,460,2.204,478,3.976,483,3.976,484,3.976,485,3.976,505,2.771,554,1.923,598,2.591,599,3.745,600,3.745,601,3.745,602,3.745,603,3.745,604,3.745,605,5.069,606,2.855,607,3.745,608,3.208,609,3.745,610,3.208]],["title/classes/ExamAssignment.html",[50,0.01,559,2.162]],["body/classes/ExamAssignment.html",[3,0.268,4,0.242,5,0.192,8,0.448,19,0.86,22,0.02,24,0.517,25,1.506,36,3.316,37,0.704,49,0.403,50,0.01,54,0.94,70,0.76,71,2.505,74,0.014,75,0.014,82,1.254,85,1.28,88,2.051,95,4.037,96,2.37,97,2.301,98,1.097,99,2.862,101,1.8,107,2.301,108,2.301,109,2.301,110,2.144,111,2.301,112,3.072,113,2.301,114,3.072,115,1.775,404,1.954,409,2.403,418,5.032,420,5.032,421,5.369,429,2.705,559,3.072,560,2.485,606,3.978,608,4.47,611,4.517,612,2.705,613,3.91,614,6.267,615,3.91,616,3.91,617,3.91,618,3.91,619,3.91,620,2.705,621,3.349]],["title/controllers/ExamController.html",[128,1.574,622,2.54]],["body/controllers/ExamController.html",[3,0.093,4,0.084,5,0.304,8,0.093,9,0.683,10,1.848,19,0.55,21,1.376,22,0.02,23,0.996,24,0.497,25,1.275,30,1.488,35,0.868,37,0.491,41,0.278,46,0.862,49,0.093,50,0.004,52,0.422,61,1.789,70,0.779,74,0.006,75,0.006,82,0.727,88,1.312,96,1.982,115,2.326,116,1.552,128,1.296,130,0.616,132,0.938,133,2.281,138,2.27,141,2.359,143,1.981,145,2.24,148,3.738,149,1.778,154,1.933,155,1.6,156,2.806,157,1.162,158,1.6,161,0.862,163,1.034,164,1.981,165,3.327,166,4.275,169,0.654,170,1.034,172,0.938,173,3.056,174,2.103,175,4.167,292,1.162,303,1.268,318,1.959,328,0.887,329,1.587,351,1.373,367,1.933,404,2.04,407,1.718,413,2.723,425,2.773,435,3.603,440,1.187,441,2.491,442,2.104,443,2.24,444,0.798,449,1.981,465,2.743,467,1.763,468,3.056,469,1.981,473,1.268,478,1.6,479,1.447,483,1.6,484,1.6,485,1.6,497,1.162,500,1.115,502,0.654,505,2.367,507,1.162,523,2.304,530,1.034,531,2.773,532,2.809,538,3.904,539,1.187,547,2.773,549,1.959,550,1.722,553,1.034,581,1.361,586,2.91,622,1.6,623,1.162,624,1.981,625,1.981,626,1.6,627,1.981,628,3.001,629,1.981,630,1.981,631,2.304,632,2.304,633,1.356,634,1.356,635,1.356,636,3.023,637,2.312,638,4.008,639,1.356,640,2.312,641,1.356,642,3.572,643,3.742,644,3.06,645,1.162,646,4.364,647,1.162,648,1.356,649,2.312,650,3.441,651,2.312,652,4.908,653,3.06,654,3.572,655,1.356,656,2.723,657,3.06,658,1.162,659,1.356,660,1.356,661,2.312,662,1.356,663,3.781,664,3.056,665,1.356,666,1.981,667,3.218,668,1.356,669,2.312,670,2.312,671,3.742,672,1.356,673,1.981,674,1.356,675,4.545,676,1.356,677,3.572,678,3.572,679,4.044,680,1.356,681,3.327,682,2.59,683,1.356,684,3.327,685,1.981,686,1.981,687,2.312,688,2.312,689,2.59,690,1.6,691,3.023,692,2.312,693,1.162,694,1.356,695,1.356,696,1.356,697,1.658,698,1.162,699,1.356,700,1.356,701,1.162,702,3.572,703,1.356,704,4.008,705,1.356,706,1.356,707,1.356,708,3.023,709,1.356,710,1.356,711,1.356,712,2.312,713,3.023,714,1.356,715,1.356,716,3.572,717,1.356,718,1.162,719,1.356,720,1.356,721,1.356,722,1.356,723,1.356,724,1.356,725,1.162,726,1.356,727,1.356,728,1.356,729,1.356]],["title/modules/ExamModule.html",[178,1.771,245,2.162]],["body/modules/ExamModule.html",[3,0.245,4,0.221,5,0.175,22,0.02,23,1.174,37,0.807,41,0.733,49,0.245,50,0.009,74,0.013,75,0.013,96,2.742,98,1.002,130,2.229,178,2.704,180,1.959,181,1.959,182,2.27,183,2.27,184,1.959,185,3.301,186,3.564,190,3.119,191,2.27,192,1.959,198,2.471,212,2.103,213,2.723,245,4.276,246,2.889,404,1.377,419,2.52,441,1.37,500,1.722,502,1.722,517,3.849,552,3.396,555,2.103,559,2.103,561,2.723,562,2.723,620,3.396,622,3.879,628,1.834,697,3.587,698,3.06,730,3.06,731,3.06,732,3.06,733,4.198,734,3.849,735,3.849,736,3.572,737,3.572,738,3.572,739,3.572,740,4.804,741,4.908,742,3.396,743,2.723,744,3.396,745,3.396,746,2.723,747,3.572,748,3.06,749,3.572,750,3.572,751,3.572,752,3.572]],["title/injectables/ExamService.html",[39,0.838,697,2.014]],["body/injectables/ExamService.html",[3,0.114,4,0.103,5,0.251,8,0.114,9,0.808,10,1.952,12,1.856,14,1.05,19,0.664,21,1.428,22,0.02,23,0.94,24,0.404,25,1.162,30,1.602,35,0.821,37,0.658,39,0.625,41,0.34,49,0.114,50,0.004,52,1.503,54,0.84,60,2.193,61,1.995,64,1.759,70,0.874,74,0.007,75,0.007,98,0.465,101,0.572,115,1.843,116,0.852,133,2.41,138,1.054,144,1.421,145,0.852,149,1.224,154,2.166,156,2.746,161,1.054,174,1.612,185,1.612,217,2.996,219,0.711,223,2.933,229,0.852,303,2.226,310,2.058,311,1.686,312,0.8,313,0.976,318,2.226,328,1.05,329,0.996,351,1.243,404,1.982,407,1.174,409,0.944,425,2.808,435,3.149,441,1.963,442,1.957,443,2.084,465,3.012,473,1.502,479,1.11,482,2.346,500,0.8,502,0.8,505,2.939,517,2.847,521,1.894,522,2.087,523,2.666,530,1.264,531,3.074,532,3.213,534,2.346,535,2.346,537,1.74,539,2.084,546,3.477,547,2.58,550,2.755,551,3.54,553,1.264,554,0.852,555,0.976,565,1.147,567,3.108,581,1.612,586,3.213,625,3.477,628,2.306,629,2.346,630,2.346,631,2.087,632,2.087,643,4.465,647,2.346,650,3.149,653,2.346,656,3.094,657,3.477,658,2.346,664,3.687,666,2.346,667,2.058,673,2.346,675,4.751,679,3.425,681,3.425,684,3.425,685,1.421,686,1.421,697,1.502,734,3.012,735,3.012,740,2.996,743,1.264,744,1.894,746,1.264,753,1.421,754,2.738,755,2.738,756,2.738,757,3.346,758,2.346,759,1.659,760,3.497,761,2.996,762,2.996,763,1.659,764,1.659,765,1.659,766,4.059,767,4.059,768,1.659,769,2.346,770,1.659,771,2.346,772,1.659,773,2.346,774,2.738,775,1.421,776,1.421,777,1.74,778,1.659,779,4.059,780,3.497,781,2.738,782,2.738,783,1.659,784,1.659,785,1.659,786,2.738,787,2.087,788,2.346,789,1.659,790,2.087,791,2.346,792,2.738,793,4.059,794,3.477,795,1.421,796,3.497,797,1.659,798,1.659,799,2.346,800,1.659,801,1.659]],["title/injectables/FetchExamAssignmentsProvider.html",[39,0.838,733,2.162]],["body/injectables/FetchExamAssignmentsProvider.html",[3,0.143,4,0.129,5,0.102,8,0.143,9,0.974,10,1.671,12,2.304,14,1.266,19,0.694,21,1.587,22,0.02,23,0.983,24,0.464,25,1.216,30,1.303,31,1.499,35,0.737,37,0.675,38,1.23,39,0.753,41,0.429,49,0.143,50,0.011,52,1.444,54,1.622,60,1.991,61,1.656,64,2.184,70,1.196,74,0.011,75,0.009,98,0.586,100,1.79,101,1.41,103,1.446,149,0.529,154,1.591,219,0.896,223,3.323,229,1.073,233,1.446,260,1.593,261,2.515,271,1.79,299,1.008,310,1.23,315,3.541,318,1.146,351,2.11,354,1.446,370,1.446,381,2.597,404,1.955,409,2.012,440,2.76,444,1.23,453,3.503,460,1.23,463,1.446,478,2.283,479,2.281,480,4.333,483,2.283,484,2.283,485,1.446,505,2.592,520,2.283,528,2.827,539,1.694,541,3.117,554,2.597,555,1.23,559,1.23,560,1.328,561,1.593,562,1.593,566,1.79,577,1.328,588,2.827,589,1.446,650,2.977,725,2.827,733,1.942,758,1.79,788,1.79,790,1.593,791,1.79,802,3.719,803,1.593,804,2.827,805,2.827,806,4.089,807,3.3,808,3.3,809,3.3,810,3.3,811,2.089,812,4.089,813,4.089,814,4.089,815,4.688,816,2.089,817,3.3,818,2.089,819,3.3,820,3.98,821,3.3,822,3.117,823,3.3,824,2.089,825,4.645,826,3.3,827,3.3,828,3.3,829,2.089,830,2.089,831,3.3,832,4.098,833,2.089,834,3.3,835,2.089,836,1.79,837,3.117,838,1.79,839,2.089,840,2.089,841,2.089,842,2.089,843,1.79,844,2.089,845,2.089,846,1.79,847,2.089,848,2.089,849,2.089,850,2.089,851,2.089,852,3.3,853,2.089,854,2.089,855,2.089,856,2.089,857,2.089,858,2.089,859,2.089,860,2.089,861,2.089,862,2.089,863,2.089,864,4.645,865,2.089,866,2.089,867,2.089,868,4.089,869,3.3,870,2.089,871,2.089,872,4.089,873,2.089,874,4.089,875,2.089,876,2.089,877,2.089,878,1.79,879,2.089,880,2.089,881,2.089,882,2.089,883,2.089,884,2.089,885,2.089,886,2.089,887,2.089,888,2.089,889,3.3,890,2.089,891,2.089,892,1.79,893,2.089,894,3.3,895,2.089,896,1.79,897,2.089,898,2.089]],["title/classes/GenerateTokenProvider.html",[50,0.01,200,2.334]],["body/classes/GenerateTokenProvider.html",[3,0.293,4,0.265,5,0.21,8,0.293,9,1.634,10,1.908,12,2.123,14,2.123,15,3.664,16,5.899,17,5.257,18,5.56,19,0.759,21,1.812,22,0.02,23,1.076,24,0.463,25,1.33,30,1.199,35,0.842,37,0.73,38,2.517,41,0.878,42,2.959,43,3.26,44,3.664,45,2.718,49,0.293,50,0.011,52,1.72,53,3.664,63,4.947,64,1.555,70,0.832,74,0.015,75,0.015,84,3.664,85,1.4,133,2.354,154,2.062,200,3.518,645,3.664,832,4.947,899,5.257,900,3.664,901,5.535,902,4.276,903,5.535,904,4.276,905,5.535,906,4.276,907,4.276,908,4.276,909,4.276,910,4.276]],["title/classes/GlobalHttpExceptionFilter.html",[50,0.01,911,2.799]],["body/classes/GlobalHttpExceptionFilter.html",[3,0.215,4,0.194,5,0.154,8,0.215,9,1.323,19,0.43,21,0.926,22,0.02,23,0.61,24,0.237,25,0.754,29,3.1,30,0.88,33,2.638,35,0.43,37,0.504,41,0.644,46,1.993,49,0.215,50,0.008,51,3.416,54,1.45,68,3.128,69,2.75,70,0.61,74,0.012,75,0.012,85,1.027,145,2.301,149,1.134,154,2.161,156,2.301,175,4.599,328,2.534,354,3.1,367,2.521,407,1.921,429,3.617,477,3.839,481,3.416,549,2.868,550,3.025,584,3.946,624,3.839,693,2.687,911,3.416,912,3.839,913,5.375,914,2.687,915,4.481,916,6.604,917,4.481,918,4.481,919,6.604,920,4.481,921,5.703,922,4.481,923,4.481,924,3.416,925,5.228,926,2.848,927,4.481,928,3.839,929,6.033,930,3.839,931,4.481,932,4.481,933,3.839,934,4.481,935,4.481,936,5.228,937,4.481,938,5.703,939,5.703,940,3.137,941,4.481,942,4.481,943,4.481,944,4.481,945,4.481,946,4.481,947,4.481,948,2.687,949,3.137,950,3.137,951,4.481,952,3.137,953,3.137,954,5.228,955,3.137,956,3.137,957,3.137,958,2.687,959,3.137,960,3.137,961,3.137,962,3.137,963,2.687,964,3.137]],["title/interfaces/IMcqQuestion.html",[76,1.488,965,2.54]],["body/interfaces/IMcqQuestion.html",[3,0.259,4,0.233,5,0.185,8,0.259,22,0.02,24,0.501,35,1.015,49,0.349,54,0.906,74,0.014,75,0.014,76,2.063,78,2.218,82,1.224,149,0.954,151,2.395,329,1.37,351,1.711,356,2.873,379,3.881,407,1.615,441,2.212,447,3.229,471,2.873,472,2.873,479,2.868,541,2.873,682,3.229,777,2.395,926,2.395,965,3.988,966,2.607,967,2.607,968,2.607,969,3.229,970,3.769,971,3.769,972,6.063,973,5.919,974,4.391,975,5.998,976,5.337,977,6.909,978,5.091,979,4.361,980,2.395,981,2.395,982,2.607,983,3.229,984,3.229,985,2.873,986,2.607,987,2.607]],["title/interfaces/IOeQuestion.html",[76,1.488,988,2.54]],["body/interfaces/IOeQuestion.html",[3,0.322,4,0.291,5,0.23,8,0.322,22,0.02,24,0.443,35,0.879,49,0.403,54,1.128,74,0.016,75,0.016,76,2.38,78,2.763,82,1.412,149,1.188,329,1.707,351,2.132,407,2.012,409,1.619,410,3.579,442,3.239,443,3.448,479,2.995,550,2.264,628,2.41,777,2.983,926,2.983,967,3.248,968,3.248,979,5.491,980,2.983,981,2.983,985,3.579,987,3.248,988,4.434,989,3.248,990,4.694,991,4.694,992,3.579,993,3.579,994,4.022,995,4.022,996,3.248]],["title/interfaces/IResponse.html",[76,1.488,563,2.014]],["body/interfaces/IResponse.html",[3,0.238,4,0.215,5,0.17,8,0.238,22,0.02,24,0.417,25,1.157,29,3.331,33,2.834,35,0.819,36,3.06,49,0.33,63,3.671,69,2.322,70,1.218,71,2.12,74,0.013,75,0.013,76,2.239,78,2.045,82,1.157,120,2.403,141,3.512,145,2.472,149,0.879,174,3.512,231,3.06,233,3.331,303,3.273,311,1.675,312,1.675,328,2.64,329,2.502,351,2.187,367,2.322,404,1.819,407,2.064,425,3.331,429,3.331,435,2.834,473,2.641,549,3.437,550,2.877,563,3.031,570,4.549,690,4.128,924,3.671,926,3.792,928,4.125,930,4.125,933,4.125,963,4.125,982,3.331,997,2.648,998,4.125,999,4.125,1000,4.815,1001,4.815,1002,4.815,1003,4.815,1004,4.815,1005,4.815,1006,4.815,1007,4.815,1008,4.815,1009,4.815,1010,4.815,1011,5.526,1012,4.815,1013,4.125,1014,4.815]],["title/interfaces/IStudent.html",[76,1.488,1015,2.54]],["body/interfaces/IStudent.html",[3,0.307,4,0.277,5,0.279,8,0.307,22,0.02,23,1.218,24,0.43,35,0.956,49,0.391,54,1.074,74,0.015,75,0.015,76,2.308,78,2.631,82,1.369,149,1.131,212,2.631,329,1.625,370,4.335,381,3.217,404,1.254,407,1.916,409,2.403,414,3.408,539,2.295,777,2.841,968,3.092,969,3.829,980,2.841,981,2.841,987,3.092,992,3.408,993,3.408,1015,4.335,1016,3.408,1017,4.47,1018,4.47,1019,4.47,1020,6.267,1021,4.714,1022,5.195,1023,5.694,1024,5.694,1025,3.829,1026,3.829,1027,3.408,1028,3.092]],["title/injectables/InsertStudentProvider.html",[39,0.838,1029,2.162]],["body/injectables/InsertStudentProvider.html",[3,0.226,4,0.204,5,0.162,8,0.226,9,1.37,10,1.669,12,1.78,14,1.264,19,0.636,21,1.37,22,0.02,23,0.902,24,0.35,25,1.115,30,0.924,31,2.107,35,0.452,37,0.717,39,1.058,41,0.676,49,0.226,50,0.009,52,1.442,54,1.532,56,2.822,60,1.412,61,1.078,62,1.939,64,2.382,68,1.807,69,1.588,70,0.902,71,1.264,74,0.012,75,0.012,98,0.924,101,1.136,103,3.209,133,2.06,152,2.093,219,1.412,223,2.993,229,1.691,329,1.198,409,1.852,522,4.094,525,4.163,531,3.413,532,2.946,538,2.511,539,1.691,557,3.209,572,3.715,573,2.279,574,2.279,581,1.939,583,2.511,584,2.279,586,1.807,587,2.511,590,2.511,592,2.279,594,2.279,596,2.279,597,2.279,667,1.939,790,2.511,805,2.822,820,2.822,843,2.822,1015,2.279,1021,2.279,1028,3.209,1029,2.731,1030,4.601,1031,2.822,1032,4.601,1033,2.822,1034,3.294,1035,3.974,1036,2.822,1037,3.294,1038,2.093,1039,2.511,1040,2.948,1041,2.093,1042,2.511,1043,3.294,1044,3.294,1045,5.37,1046,3.294,1047,4.639,1048,3.294,1049,4.639,1050,3.715,1051,3.294,1052,3.294,1053,4.639,1054,3.294,1055,4.639,1056,3.294,1057,3.294,1058,3.294,1059,3.294,1060,3.294,1061,3.294,1062,3.294,1063,2.511,1064,2.822]],["title/classes/LoginDto.html",[50,0.01,285,2.334]],["body/classes/LoginDto.html",[3,0.278,4,0.251,5,0.199,8,0.278,19,0.733,22,0.02,24,0.403,35,0.872,37,0.601,49,0.278,50,0.014,74,0.014,75,0.014,82,1.284,83,3.889,85,1.326,87,4.199,88,1.749,149,1.352,169,1.954,231,3.396,285,3.396,328,2.05,365,3.396,366,4.578,367,3.065,373,4.558,376,4.845,377,5.445,378,4.845,379,5.546,380,5.445,381,3.263,382,5.445,383,5.445,385,3.472,386,5.445,390,3.799,391,4.578,392,3.519,393,3.519,394,3.472,395,2.223,399,3.472,400,3.472,401,3.472,1065,3.472,1066,4.052,1067,4.052,1068,5.343,1069,5.343,1070,5.343,1071,4.052,1072,4.052]],["title/classes/LoginStudentDto.html",[50,0.01,1073,2.334]],["body/classes/LoginStudentDto.html",[3,0.334,4,0.301,5,0.238,8,0.334,19,0.823,22,0.02,24,0.453,35,0.933,37,0.675,49,0.334,50,0.017,74,0.016,75,0.016,82,1.443,85,1.591,87,4.138,88,1.965,105,3.363,110,3.292,392,3.833,393,3.833,395,2.667,1050,4.505,1073,3.814,1074,5.578,1075,4.165,1076,4.861,1077,4.861,1078,4.861,1079,4.861,1080,3.706,1081,4.861]],["title/classes/Mcq.html",[50,0.01,441,1.409]],["body/classes/Mcq.html",[3,0.357,4,0.322,5,0.255,8,0.357,19,0.92,22,0.019,24,0.506,35,0.992,49,0.357,50,0.014,74,0.017,75,0.017,82,1.503,85,1.703,441,2.4,479,2.718,974,4.263,1082,4.457,1083,5.114,1084,5.203,1085,5.203,1086,5.203]],["title/classes/McqQuestion.html",[50,0.01,500,1.771]],["body/classes/McqQuestion.html",[3,0.289,4,0.261,5,0.207,8,0.289,19,0.836,22,0.02,24,0.505,35,0.958,36,2.679,37,0.616,49,0.418,50,0.011,54,1.013,70,0.82,71,2.77,74,0.015,75,0.015,82,1.318,85,1.38,88,1.995,89,3.794,90,3.228,95,3.799,96,2.49,97,2.482,98,1.182,99,3.008,101,1.454,107,2.482,108,2.482,109,2.482,110,2.312,111,2.482,112,3.228,113,2.482,114,3.228,115,1.914,116,3.314,479,2.47,500,2.644,606,3.214,742,2.916,974,3.873,1083,4.646,1087,4.465,1088,2.679,1089,4.216,1090,4.216,1091,3.611,1092,2.916,1093,3.611]],["title/classes/OeQuestion.html",[50,0.01,502,1.771]],["body/classes/OeQuestion.html",[3,0.326,4,0.295,5,0.233,8,0.326,19,0.653,22,0.02,24,0.447,35,0.812,37,0.666,49,0.442,50,0.012,54,1.143,70,0.925,71,2.272,74,0.016,75,0.016,82,1.423,85,1.557,88,1.557,95,3.796,96,2.689,97,2.8,98,1.334,99,3.248,101,1.641,107,2.8,108,2.8,109,2.8,110,2.609,111,2.8,112,3.486,113,2.8,114,3.486,115,2.16,479,2.613,502,2.856,745,3.291,1088,3.023,1091,4.075,1094,4.097,1095,3.291,1096,4.075]],["title/classes/Student.html",[50,0.01,409,1.266]],["body/classes/Student.html",[3,0.304,4,0.275,5,0.218,8,0.428,19,0.777,22,0.02,24,0.471,35,0.903,37,0.637,49,0.428,50,0.012,54,1.066,70,0.863,71,2.794,74,0.015,75,0.015,82,1.362,85,1.452,88,1.855,89,3.921,90,3.336,95,3.676,96,2.574,97,2.612,98,1.244,99,3.109,101,1.53,107,2.612,108,2.612,109,2.612,110,2.434,111,2.612,112,3.336,113,2.612,114,3.336,115,2.015,116,2.91,409,1.955,1021,4.32,1038,2.82,1050,4.32,1097,3.069,1098,4.437,1099,4.437,1100,3.069,1101,3.801]],["title/controllers/StudentController.html",[128,1.574,1102,2.54]],["body/controllers/StudentController.html",[3,0.289,4,0.261,5,0.207,8,0.289,9,1.619,10,2.132,12,1.617,14,1.617,19,0.752,21,1.619,22,0.02,23,1.066,24,0.414,25,1.318,30,1.538,35,0.836,37,0.752,41,0.865,49,0.289,50,0.011,52,1.31,70,1.066,74,0.015,75,0.015,88,1.795,128,1.807,130,1.914,132,2.916,133,2.631,154,2.644,155,2.916,156,2.164,158,2.916,282,2.916,283,3.794,297,2.679,299,2.033,301,3.611,304,3.611,409,1.454,526,3.343,822,4.18,1073,4.359,1102,3.794,1103,3.611,1104,5.484,1105,4.216,1106,5.484,1107,4.216,1108,4.216,1109,5.484,1110,4.216,1111,3.611,1112,3.611,1113,3.611,1114,4.216,1115,3.611,1116,4.216,1117,4.216,1118,4.216,1119,4.216]],["title/modules/StudentModule.html",[178,1.771,246,2.162]],["body/modules/StudentModule.html",[3,0.295,4,0.266,5,0.211,22,0.02,23,0.836,37,0.789,41,0.882,49,0.295,50,0.011,74,0.015,75,0.015,96,1.951,98,1.205,130,2.521,178,2.966,180,2.357,181,2.357,182,2.731,183,2.731,184,2.357,185,3.621,186,3.909,190,3.529,191,2.731,192,2.357,198,2.973,212,2.53,213,3.276,245,3.268,246,4.229,409,1.482,526,4.025,552,3.841,1029,4.059,1039,3.276,1100,3.841,1102,4.255,1113,3.681,1120,3.681,1121,3.681,1122,3.681,1123,4.297,1124,4.297,1125,4.297,1126,3.681,1127,4.297,1128,4.297]],["title/injectables/StudentService.html",[39,0.838,526,2.014]],["body/injectables/StudentService.html",[3,0.23,4,0.208,5,0.165,8,0.23,9,1.388,10,2.123,12,2.081,14,1.803,19,0.806,21,1.735,22,0.02,23,1.143,24,0.444,25,1.413,30,1.522,31,2.135,35,0.744,37,0.768,38,1.976,39,1.072,40,2.322,41,0.689,49,0.23,50,0.009,52,1.686,60,2.015,61,1.539,64,1.22,70,1.055,74,0.012,75,0.012,87,2.133,98,0.941,101,1.157,133,2.62,154,2.267,219,1.438,223,3.018,229,1.723,283,2.322,303,1.841,310,1.976,311,2.267,312,1.618,313,1.976,328,1.287,329,1.22,381,1.723,404,0.941,409,2.027,526,2.578,531,2.987,532,2.976,552,2.322,564,2.875,697,1.841,733,3.643,748,2.875,802,2.322,822,2.558,1022,2.558,1029,3.876,1032,4.648,1033,2.875,1035,4.027,1036,2.875,1038,2.133,1039,2.558,1050,2.322,1064,2.875,1073,3.933,1111,2.875,1112,2.875,1126,2.875,1129,2.875,1130,4.7,1131,4.7,1132,5.425,1133,3.356,1134,4.7,1135,3.356,1136,3.356,1137,4.7,1138,3.356,1139,3.356,1140,3.356,1141,3.356,1142,3.356,1143,3.356,1144,3.356,1145,3.356,1146,3.356,1147,3.356,1148,3.356,1149,3.356,1150,3.356]],["title/classes/UpdateExamParamDto.html",[50,0.01,663,2.54]],["body/classes/UpdateExamParamDto.html",[3,0.301,4,0.271,5,0.215,8,0.301,19,0.601,22,0.02,24,0.331,35,0.771,37,0.632,49,0.301,50,0.015,74,0.015,75,0.015,82,1.351,85,1.434,88,1.434,90,3.855,115,2.974,149,1.423,169,2.113,365,2.785,367,3.158,390,3.573,392,3.31,393,3.31,395,2.404,404,2.002,439,4.993,441,2.157,468,4.286,586,3.593,626,3.89,627,4.817,628,2.887,650,3.987,663,3.89,846,4.817,1151,4.817,1152,3.754,1153,5.622,1154,5.622,1155,4.382,1156,4.382,1157,6.208]],["title/injectables/UpdateMcqExamProvider.html",[39,0.838,734,2.162]],["body/injectables/UpdateMcqExamProvider.html",[3,0.153,4,0.138,5,0.283,8,0.153,9,1.027,10,1.327,12,2.121,14,1.334,19,0.586,21,1.261,22,0.02,23,0.83,24,0.417,25,1.026,30,1.351,31,1.579,35,0.586,37,0.689,39,0.793,41,0.458,49,0.153,50,0.006,52,1.327,54,1.435,60,2.065,61,1.81,62,1.315,64,2.099,68,1.225,69,1.077,70,0.676,71,0.857,74,0.009,75,0.009,98,0.627,101,0.77,103,1.545,133,1.638,141,1.315,145,1.147,149,1.081,152,1.42,156,2.192,219,0.957,223,2.964,229,1.147,299,1.077,310,2.047,311,1.677,312,1.077,313,1.315,318,1.907,328,0.857,351,1.579,404,1.884,419,2.192,435,2.047,440,1.147,441,2.673,460,1.315,463,1.545,473,1.907,479,1.409,500,1.077,505,3.24,519,1.545,520,2.406,521,2.406,525,3.668,532,2.342,536,3.333,537,2.21,539,2.474,540,2.406,547,2.21,549,1.907,550,1.677,551,2.954,554,1.147,555,1.315,557,2.406,563,1.225,565,1.545,567,2.406,568,1.703,570,4.215,572,2.954,573,1.545,574,1.545,577,1.42,580,1.703,581,3.073,583,1.703,584,1.545,586,2.342,587,1.703,589,1.545,590,1.703,592,1.545,594,1.545,596,1.545,597,1.545,626,2.406,631,3.255,650,2.513,664,3.98,667,3.514,671,3.255,690,1.545,718,3.658,734,2.047,743,1.703,744,1.545,757,2.406,761,2.979,769,1.914,775,1.914,787,1.703,965,3.333,966,1.545,974,2.21,986,2.406,1040,2.21,1041,1.42,1042,1.703,1063,1.703,1083,1.703,1092,1.545,1158,3.673,1159,3.477,1160,3.477,1161,3.477,1162,2.234,1163,2.234,1164,3.477,1165,2.234,1166,3.477,1167,4.818,1168,4.818,1169,3.477,1170,2.234,1171,2.979,1172,2.979,1173,3.477,1174,3.477,1175,3.477,1176,2.979,1177,2.979,1178,3.477,1179,2.979,1180,1.914,1181,1.914,1182,1.914,1183,1.703,1184,2.234,1185,2.234,1186,2.234,1187,2.234,1188,1.914,1189,2.234,1190,1.914,1191,1.914,1192,2.234,1193,2.234,1194,2.234,1195,2.234,1196,2.234,1197,2.234,1198,2.234,1199,2.234,1200,2.234,1201,2.234,1202,2.234]],["title/injectables/UpdateOeExamProvider.html",[39,0.838,735,2.162]],["body/injectables/UpdateOeExamProvider.html",[3,0.174,4,0.157,5,0.271,8,0.174,9,1.129,10,1.434,12,1.77,14,1.468,19,0.525,21,1.129,22,0.02,23,0.744,24,0.417,25,0.919,30,1.073,31,1.737,35,0.633,37,0.715,39,0.873,41,0.519,49,0.174,50,0.007,52,1.434,54,1.396,60,2.204,61,1.683,62,1.489,64,2.193,68,1.388,69,1.22,70,0.492,74,0.01,75,0.01,98,0.71,101,0.872,133,1.77,138,1.608,141,1.489,145,1.299,149,0.968,152,1.608,156,2.368,219,1.084,223,3.097,229,1.299,299,1.22,310,2.252,311,1.845,312,1.22,313,1.489,318,2.098,328,0.97,404,1.944,419,2.368,435,2.252,440,1.299,442,2.48,443,2.64,460,1.489,473,2.098,479,1.025,502,1.22,505,3.125,519,1.75,520,2.646,521,2.646,525,3.834,532,3.186,536,2.646,537,2.431,540,2.646,547,3.268,549,2.098,550,1.845,551,3.191,554,1.299,555,1.489,557,2.646,563,1.388,565,1.75,567,2.646,568,1.928,572,3.191,573,1.75,574,1.75,577,1.608,580,1.928,581,1.489,586,3.029,589,1.75,592,1.75,594,1.75,596,1.75,597,1.75,626,2.646,628,3.381,632,3.517,650,2.716,667,3.251,671,1.928,679,2.916,684,2.916,690,1.75,735,2.252,744,1.75,746,1.928,757,2.646,762,3.277,771,2.167,776,2.167,787,1.928,794,4.406,896,2.167,988,1.75,989,1.75,996,2.646,1040,1.608,1041,1.608,1042,1.928,1063,1.928,1095,1.75,1158,3.517,1171,3.277,1172,3.277,1176,3.277,1179,3.277,1180,2.167,1181,2.167,1182,2.167,1183,1.928,1188,2.167,1190,2.167,1191,2.167,1203,2.53,1204,2.53,1205,5.142,1206,2.53,1207,3.825,1208,3.825,1209,3.825,1210,2.53,1211,2.53,1212,2.53,1213,2.53,1214,2.53,1215,2.53,1216,2.53,1217,2.53,1218,2.53,1219,2.53,1220,2.53,1221,2.53,1222,2.53,1223,2.53]],["title/coverage.html",[1224,3.813]],["body/coverage.html",[0,2.858,1,1.565,5,0.121,6,2.11,7,2.11,22,0.02,24,0.451,39,1.468,47,1.878,50,0.018,61,0.806,74,0.01,75,0.01,76,2.212,77,1.704,79,2.11,80,1.808,81,2.11,86,3.14,106,1.704,117,1.704,120,3.14,128,2.34,129,1.704,131,2.11,136,1.565,159,1.351,184,1.351,189,1.45,194,1.704,200,1.565,210,1.704,220,2.11,237,1.704,238,2.11,239,1.45,247,1.878,262,1.878,276,2.11,281,2.11,282,1.704,285,1.565,306,2.11,311,1.188,312,1.808,330,2.11,341,1.878,363,2.11,364,2.11,402,1.704,403,2.858,404,1.531,405,2.11,409,0.849,419,1.265,439,1.878,441,1.438,465,1.45,466,2.11,500,1.188,502,1.188,517,1.45,518,2.11,519,3.14,526,1.351,554,1.265,559,1.45,560,1.565,563,1.351,577,4.732,598,3.14,611,3.14,612,3.14,620,1.704,622,1.704,623,2.11,628,1.265,663,1.704,697,1.351,733,1.45,734,1.45,735,1.45,742,1.704,745,1.704,753,2.11,802,2.593,803,2.858,837,1.878,899,2.11,900,2.11,911,1.878,912,2.11,913,2.11,914,2.11,965,1.704,966,2.593,967,3.509,986,1.704,988,1.704,989,2.593,996,1.704,997,2.858,1015,1.704,1016,2.858,1028,1.704,1029,1.45,1030,2.11,1031,2.11,1038,1.565,1040,1.565,1041,1.565,1065,2.11,1073,1.565,1074,2.11,1075,2.11,1082,2.11,1087,3.14,1088,3.654,1092,1.704,1094,3.14,1095,1.704,1097,3.14,1100,1.704,1102,1.704,1103,2.11,1129,2.11,1151,2.11,1152,2.11,1158,2.858,1224,1.878,1225,1.878,1226,2.463,1227,5.073,1228,3.212,1229,6.846,1230,7.034,1231,2.11,1232,2.11,1233,2.11,1234,2.11,1235,5.977,1236,5.977,1237,4.538,1238,5.75,1239,6.846,1240,4.538,1241,4.538,1242,3.749,1243,3.749,1244,2.463,1245,2.463,1246,2.463,1247,2.463,1248,5.75,1249,2.463,1250,2.463,1251,2.463,1252,2.11,1253,2.463,1254,2.463,1255,2.463,1256,2.11,1257,2.463,1258,2.463]],["title/dependencies.html",[181,2.421,1259,2.631]],["body/dependencies.html",[22,0.02,41,0.995,42,3.354,45,3.081,46,3.808,50,0.016,74,0.016,75,0.016,98,1.36,101,1.672,102,3.696,105,3.354,169,2.338,181,2.659,209,3.696,260,3.696,261,4.568,339,4.153,395,2.659,643,3.696,644,4.153,701,4.153,815,3.696,1260,4.848,1261,6.504,1262,4.848,1263,4.848,1264,4.848,1265,4.848,1266,4.848,1267,4.848,1268,4.848,1269,4.848,1270,4.848,1271,4.848,1272,4.848,1273,4.848,1274,4.848,1275,4.848,1276,4.848,1277,4.848,1278,4.848,1279,4.848,1280,4.848,1281,4.848]],["title/miscellaneous/enumerations.html",[1282,1.577,1283,3.781]],["body/miscellaneous/enumerations.html",[8,0.361,22,0.019,24,0.397,74,0.017,75,0.017,146,4.51,297,4.004,404,1.477,440,3.234,441,2.417,442,2.539,443,2.703,444,3.099,471,4.013,472,4.013,500,2.539,502,2.539,505,3.038,628,3.234,968,3.642,1080,4.803,1115,4.51,1282,2.703,1283,4.51,1284,5.264,1285,6.987,1286,4.013,1287,5.264,1288,5.264]],["title/miscellaneous/functions.html",[1282,1.577,1289,3.781]],["body/miscellaneous/functions.html",[5,0.332,8,0.299,19,0.598,21,1.655,22,0.019,23,1.09,24,0.329,25,1.347,30,1.572,33,2.567,35,0.769,74,0.015,75,0.015,76,1.767,120,3.877,149,1.104,184,3.397,233,3.017,303,2.392,311,2.703,312,2.103,315,3.324,328,2.15,329,2.252,351,2.813,356,3.324,407,1.869,410,3.324,474,3.736,536,3.017,537,3.936,540,3.017,544,3.736,549,3.074,550,2.703,563,3.074,667,2.567,832,3.324,878,4.802,924,3.324,926,2.771,980,2.771,981,2.771,982,3.017,997,4.273,998,3.736,999,3.736,1027,4.273,1040,3.562,1041,2.771,1252,3.736,1256,4.802,1282,2.239,1289,3.736,1290,4.36,1291,4.36,1292,4.36,1293,4.36,1294,5.605,1295,4.36,1296,4.36,1297,5.605,1298,4.36,1299,4.36,1300,4.36,1301,4.36,1302,4.36,1303,4.36,1304,4.36,1305,4.36,1306,5.605,1307,3.736,1308,3.736]],["title/index.html",[8,0.211,1309,2.631,1310,2.631]],["body/index.html",[4,0.235,22,0.019,74,0.014,75,0.014,149,0.962,192,3.398,355,3.256,367,2.792,370,2.63,415,3.256,422,4.961,442,1.833,505,1.833,757,2.63,795,3.256,799,4.387,958,3.256,1177,3.256,1183,3.903,1224,2.897,1225,2.897,1307,4.387,1308,3.256,1311,3.801,1312,3.801,1313,5.79,1314,3.801,1315,3.801,1316,3.801,1317,3.801,1318,3.801,1319,5.79,1320,3.801,1321,3.801,1322,3.801,1323,6.196,1324,3.801,1325,6.808,1326,3.801,1327,6.808,1328,3.801,1329,3.801,1330,3.801,1331,3.801,1332,3.801,1333,5.79,1334,3.801,1335,5.12,1336,3.801,1337,3.801,1338,3.801,1339,6.196,1340,3.801,1341,3.801,1342,3.801,1343,3.801,1344,3.801,1345,6.196,1346,5.12,1347,3.801,1348,5.79,1349,5.308,1350,3.801,1351,3.801,1352,3.801,1353,3.801,1354,3.801,1355,3.801,1356,5.79,1357,3.801,1358,3.801,1359,3.801,1360,3.801,1361,3.801,1362,3.801,1363,3.801,1364,3.801,1365,3.801,1366,3.801,1367,5.12,1368,3.801,1369,3.801,1370,3.801,1371,5.12,1372,3.801,1373,3.801,1374,3.801,1375,4.387,1376,5.12,1377,3.801,1378,3.801,1379,3.801,1380,3.801,1381,3.801,1382,3.801,1383,3.801,1384,3.801,1385,3.801,1386,3.801,1387,3.256,1388,3.801,1389,3.801,1390,3.801,1391,3.801,1392,3.801,1393,3.801,1394,2.63]],["title/license.html",[1309,2.631,1310,2.631,1394,2.125]],["body/license.html",[22,0.015,46,2.87,74,0.015,75,0.015,192,2.477,426,3.868,481,3.442,525,2.87,656,3.442,681,3.442,773,4.91,804,3.868,892,4.91,976,3.442,1013,3.868,1225,3.442,1375,3.868,1394,3.124,1395,6.296,1396,4.515,1397,4.515,1398,5.731,1399,4.515,1400,4.515,1401,4.515,1402,4.515,1403,4.515,1404,4.515,1405,7.249,1406,4.515,1407,6.296,1408,4.515,1409,4.515,1410,4.515,1411,5.731,1412,4.515,1413,4.515,1414,4.515,1415,4.515,1416,4.515,1417,4.515,1418,5.731,1419,4.515,1420,4.515,1421,4.515,1422,4.515,1423,4.515,1424,4.515,1425,4.515,1426,5.731,1427,5.731,1428,4.515,1429,4.515,1430,4.515,1431,4.515,1432,4.515,1433,4.515,1434,4.515,1435,4.515,1436,4.515,1437,4.515,1438,4.515,1439,4.515,1440,4.515,1441,4.515,1442,4.515,1443,4.515,1444,4.515,1445,4.515,1446,4.515,1447,4.515,1448,4.515,1449,4.515,1450,4.515,1451,4.515,1452,4.515,1453,4.515]],["title/modules.html",[180,2.744]],["body/modules.html",[22,0.017,74,0.017,75,0.017,179,3.512,180,3.031,241,3.823,245,3.253,246,3.253,1349,6.082,1454,7.099,1455,7.099,1456,7.099]],["title/overview.html",[1457,4.285]],["body/overview.html",[2,3.168,22,0.02,74,0.014,75,0.014,78,2.447,85,1.361,130,1.888,159,3.32,178,2.004,179,4.424,180,2.28,181,2.28,182,2.642,183,2.642,184,2.28,185,2.447,186,2.642,187,3.561,188,3.561,189,3.563,190,3.453,191,2.642,192,2.28,219,1.782,239,3.563,241,4.984,242,3.561,243,3.561,244,3.561,245,4.342,246,4.156,496,3.561,517,3.563,526,3.818,689,3.561,697,3.32,730,3.561,731,3.561,732,3.561,733,4.098,734,3.563,735,3.563,1029,3.563,1120,3.561,1121,3.561,1122,3.561,1457,3.561,1458,4.156,1459,5.433,1460,4.156]],["title/properties.html",[82,1.061,1259,2.631]],["body/properties.html",[22,0.02,74,0.018,75,0.018,82,1.371,149,1.444,1387,4.886,1394,3.946,1461,5.704,1462,5.704,1463,5.704]],["title/miscellaneous/typealiases.html",[1282,1.577,1464,4.414]],["body/miscellaneous/typealiases.html",[8,0.358,22,0.017,24,0.394,74,0.017,75,0.017,86,3.61,99,3.969,106,4.335,554,3.217,560,3.983,598,3.61,611,3.61,612,4.335,1038,3.983,1087,3.61,1088,4.427,1092,4.335,1094,3.61,1095,4.335,1097,3.61,1282,2.679,1286,3.978,1465,5.218,1466,4.47,1467,4.47,1468,4.47,1469,4.47,1470,4.47]],["title/miscellaneous/variables.html",[1282,1.577,1471,3.781]],["body/miscellaneous/variables.html",[5,0.162,8,0.226,22,0.02,24,0.481,27,2.516,33,1.942,35,0.637,47,3.541,54,1.116,67,2.827,70,0.642,74,0.012,75,0.012,77,3.214,86,2.283,117,3.214,118,2.827,151,2.097,212,1.942,231,3.416,247,2.516,262,3.541,263,2.827,282,3.214,297,2.952,329,1.955,341,3.541,346,3.98,351,2.11,354,4.97,381,1.694,404,1.303,407,2.304,409,1.138,414,2.516,419,2.385,441,1.266,442,1.591,443,1.694,479,2.364,539,1.694,598,2.283,610,2.827,611,2.283,612,3.214,620,3.214,621,2.827,742,3.214,745,3.214,777,3.416,802,2.283,803,3.541,815,2.516,836,2.827,837,3.541,838,2.827,948,2.827,966,2.283,967,4.036,972,2.827,973,2.827,974,2.097,975,2.827,976,2.516,980,3.416,981,3.416,982,2.283,983,2.827,984,2.827,985,3.541,986,3.214,987,2.283,989,2.283,992,3.541,993,3.541,994,2.827,995,2.827,996,3.214,1016,2.516,1021,2.283,1022,2.516,1025,2.827,1026,2.827,1027,2.516,1028,3.214,1080,5.476,1087,2.283,1088,3.708,1093,2.827,1094,2.283,1096,2.827,1097,2.283,1100,3.214,1101,2.827,1228,2.827,1231,2.827,1232,3.98,1233,3.98,1234,2.827,1282,1.694,1286,2.516,1466,2.827,1467,2.827,1468,3.98,1469,3.98,1470,2.827,1471,2.827,1472,3.3,1473,3.3,1474,4.645,1475,3.3,1476,3.3,1477,3.3,1478,3.3,1479,4.645,1480,3.3,1481,3.3,1482,3.3]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":577,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1462,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["0.18.5",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1236,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1237,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1251,"title":{},"body":{"coverage.html":{}}}],["04t09:00:00z",{"_index":450,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["04t10:00:00z",{"_index":428,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["06",{"_index":427,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["0].tolowercase",{"_index":1146,"title":{},"body":{"injectables/StudentService.html":{}}}],["1",{"_index":506,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["1/1",{"_index":1248,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":496,"title":{},"body":{"classes/CreateExamDto.html":{},"overview.html":{}}}],["10.0.0",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["101",{"_index":513,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["101'})@isstring()@isnotempty",{"_index":493,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["10})@isint()@isnotempty()@min(10",{"_index":498,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["11.0.0",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":1460,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["1hour",{"_index":836,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/variables.html":{}}}],["1})@isint()@isnotempty()@min(1",{"_index":508,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["2",{"_index":689,"title":{},"body":{"controllers/ExamController.html":{},"overview.html":{}}}],["2/2",{"_index":1241,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1243,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":507,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{}}}],["200",{"_index":652,"title":{},"body":{"controllers/ExamController.html":{}}}],["201",{"_index":637,"title":{},"body":{"controllers/ExamController.html":{}}}],["2025",{"_index":426,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"license.html":{}}}],["3",{"_index":396,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["3.0.1",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1254,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1250,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":838,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/variables.html":{}}}],["3})@isstring()@isnotempty()@minlength(3",{"_index":374,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["4",{"_index":1458,"title":{},"body":{"overview.html":{}}}],["4.0.2",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1255,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":148,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{}}}],["401",{"_index":640,"title":{},"body":{"controllers/ExamController.html":{}}}],["404",{"_index":654,"title":{},"body":{"controllers/ExamController.html":{}}}],["5",{"_index":1459,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1247,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":931,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["6",{"_index":486,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["6.4.3",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1240,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1245,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":497,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{}}}],["66",{"_index":1242,"title":{},"body":{"coverage.html":{}}}],["6})@isstring()@isnotempty()@minlength(6",{"_index":488,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["7.3.0",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1253,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":399,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["8.1.0",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["8.13.2",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1246,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1244,"title":{},"body":{"coverage.html":{}}}],["8601",{"_index":424,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["8})@isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":385,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["_",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["_id",{"_index":790,"title":{},"body":{"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["above",{"_index":1425,"title":{},"body":{"license.html":{}}}],["accepts",{"_index":642,"title":{},"body":{"controllers/ExamController.html":{}}}],["access",{"_index":340,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["accessible",{"_index":434,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["accesstoken",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AdminModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["account",{"_index":140,"title":{},"body":{"controllers/AdminController.html":{}}}],["account'})@apicreatedresponse({description",{"_index":139,"title":{},"body":{"controllers/AdminController.html":{}}}],["action",{"_index":1448,"title":{},"body":{"license.html":{}}}],["actions",{"_index":1010,"title":{},"body":{"interfaces/IResponse.html":{}}}],["activeadmin",{"_index":1233,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeadmindata",{"_index":77,"title":{"interfaces/ActiveAdminData.html":{}},"body":{"interfaces/ActiveAdminData.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["actual",{"_index":1001,"title":{},"body":{"interfaces/IResponse.html":{}}}],["additional",{"_index":1009,"title":{},"body":{"interfaces/IResponse.html":{}}}],["address",{"_index":366,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["admin",{"_index":80,"title":{"classes/Admin.html":{}},"body":{"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["admin.controller",{"_index":195,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.decorator.ts",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.dto",{"_index":162,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["admin.dto.ts",{"_index":364,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["admin.dto.ts:19",{"_index":375,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:28",{"_index":369,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:43",{"_index":389,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.name",{"_index":214,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin/admin.module",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["admin@example.com",{"_index":398,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin@example.com'})@isemail()@isnotempty()@isstring",{"_index":368,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admincontroller",{"_index":129,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["admindocument",{"_index":106,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["adminid",{"_index":905,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["adminmodel",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminmodule",{"_index":179,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminschema",{"_index":117,"title":{},"body":{"classes/Admin.html":{},"modules/AdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminschema.pre('save",{"_index":119,"title":{},"body":{"classes/Admin.html":{}}}],["adminservice",{"_index":159,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["affected",{"_index":1054,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["affectedmatricnos",{"_index":1055,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["affectedstudents",{"_index":1058,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["affectedstudents.map((s",{"_index":1061,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["alias",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1465,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":782,"title":{},"body":{"injectables/ExamService.html":{}}}],["amazing",{"_index":1380,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":804,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"license.html":{}}}],["answer",{"_index":974,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"miscellaneous/variables.html":{}}}],["answers",{"_index":682,"title":{},"body":{"controllers/ExamController.html":{},"interfaces/IMcqQuestion.html":{}}}],["answers)'})@apiconsumes('multipart/form",{"_index":680,"title":{},"body":{"controllers/ExamController.html":{}}}],["api",{"_index":998,"title":{},"body":{"interfaces/IResponse.html":{},"miscellaneous/functions.html":{}}}],["apibadrequestresponse",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibearerauth",{"_index":164,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{}}}],["apibody",{"_index":702,"title":{},"body":{"controllers/ExamController.html":{}}}],["apiconsumes",{"_index":703,"title":{},"body":{"controllers/ExamController.html":{}}}],["apiconsumes('multipart/form",{"_index":708,"title":{},"body":{"controllers/ExamController.html":{}}}],["apicreatedresponse",{"_index":167,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{}}}],["apioperation",{"_index":165,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["apiparam",{"_index":704,"title":{},"body":{"controllers/ExamController.html":{}}}],["apiproperty",{"_index":390,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["apiproperty({description",{"_index":365,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["apiresponse",{"_index":166,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["apitags",{"_index":163,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["apitags('admin",{"_index":170,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["apiunauthorizedresponse",{"_index":168,"title":{},"body":{"controllers/AdminController.html":{}}}],["app.controller",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":240,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":208,"title":{},"body":{"modules/AdminModule.html":{}}}],["appconfig",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":237,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1307,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["application/pdf",{"_index":798,"title":{},"body":{"injectables/ExamService.html":{}}}],["application/vnd.openxmlformats",{"_index":779,"title":{},"body":{"injectables/ExamService.html":{}}}],["applications",{"_index":1318,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":241,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":482,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/ExamService.html":{}}}],["appservice",{"_index":239,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":939,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["arising",{"_index":1452,"title":{},"body":{"license.html":{}}}],["array",{"_index":351,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(exceptionresponse?.message",{"_index":960,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["assigment.schema",{"_index":562,"title":{},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["assigment.schema.ts",{"_index":612,"title":{},"body":{"classes/ExamAssignment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["assigment.schema.ts:22",{"_index":615,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["assigment.schema.ts:25",{"_index":617,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["assigment.schema.ts:28",{"_index":616,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["assigment.schema.ts:31",{"_index":613,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["assign",{"_index":436,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assigned",{"_index":1017,"title":{},"body":{"interfaces/IStudent.html":{}}}],["assigning",{"_index":408,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{}}}],["assignment",{"_index":806,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignment.dto",{"_index":558,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["assignment.dto.ts",{"_index":405,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"coverage.html":{}}}],["assignment.dto.ts:24",{"_index":438,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.dto.ts:37",{"_index":456,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.dto.ts:53",{"_index":446,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.dto.ts:72",{"_index":451,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.dto.ts:91",{"_index":431,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.exam",{"_index":854,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments",{"_index":825,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.length",{"_index":850,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.map(async",{"_index":853,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider",{"_index":748,"title":{},"body":{"modules/ExamModule.html":{},"injectables/StudentService.html":{}}}],["assignments.provider.ts",{"_index":803,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["assignments.provider.ts:127",{"_index":833,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:139",{"_index":830,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:26",{"_index":816,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:44",{"_index":824,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:83",{"_index":818,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assigns",{"_index":535,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{}}}],["assistant",{"_index":1222,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["assistantid",{"_index":1223,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["associated",{"_index":656,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"license.html":{}}}],["async",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["atomicity",{"_index":545,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["auth",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StudentController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StudentController.html":{}}}],["auth/auth.controller",{"_index":196,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/config/jwt.config",{"_index":204,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/guards/access",{"_index":206,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/guards/authentication.guard",{"_index":211,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/providers/auth.service",{"_index":197,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/providers/generate",{"_index":201,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth_type_key",{"_index":341,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":194,"title":{"controllers/AuthController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":210,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AdminModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":350,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["author",{"_index":1387,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":1442,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":189,"title":{"injectables/AuthService.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/StudentController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":342,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":345,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguidemap",{"_index":331,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":346,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":352,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["available",{"_index":453,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["await",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["b",{"_index":975,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":1381,"title":{},"body":{"index.html":{}}}],["bad",{"_index":150,"title":{},"body":{"controllers/AdminController.html":{}}}],["badrequestexception",{"_index":551,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["badrequestexception('error",{"_index":595,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["badrequestexception('exam",{"_index":1182,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["badrequestexception('no",{"_index":578,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["badrequestexception('only",{"_index":781,"title":{},"body":{"injectables/ExamService.html":{}}}],["badrequestexception('question",{"_index":1213,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["badrequestexception('questions",{"_index":1185,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["based",{"_index":758,"title":{},"body":{"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["bcrypt",{"_index":102,"title":{},"body":{"classes/Admin.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":123,"title":{},"body":{"classes/Admin.html":{}}}],["bcrypt.hash(this.password",{"_index":125,"title":{},"body":{"classes/Admin.html":{}}}],["bearer",{"_index":146,"title":{},"body":{"controllers/AdminController.html":{},"miscellaneous/enumerations.html":{}}}],["becomes",{"_index":452,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["being",{"_index":490,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["binary",{"_index":713,"title":{},"body":{"controllers/ExamController.html":{}}}],["board",{"_index":1374,"title":{},"body":{"index.html":{}}}],["body",{"_index":155,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["boolean",{"_index":1011,"title":{},"body":{"interfaces/IResponse.html":{}}}],["bootstrap",{"_index":184,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":470,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["browse",{"_index":1456,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1454,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1314,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":1167,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["c",{"_index":976,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["cache",{"_index":815,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cache_manager",{"_index":835,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cache_ttl",{"_index":837,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cached",{"_index":864,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cached/randomized",{"_index":828,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cachekey",{"_index":862,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cachemanager",{"_index":814,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cachemodule",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["case",{"_index":894,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["catch",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/CreateExamProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["catch((err",{"_index":361,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["catch(exception",{"_index":937,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["catches",{"_index":920,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["caught",{"_index":943,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["channel",{"_index":1351,"title":{},"body":{"index.html":{}}}],["character",{"_index":383,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["characters",{"_index":378,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{}}}],["charge",{"_index":1402,"title":{},"body":{"license.html":{}}}],["check",{"_index":1339,"title":{},"body":{"index.html":{}}}],["checking",{"_index":983,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["choice",{"_index":472,"title":{},"body":{"classes/CreateExamDto.html":{},"interfaces/IMcqQuestion.html":{},"miscellaneous/enumerations.html":{}}}],["claim",{"_index":1445,"title":{},"body":{"license.html":{}}}],["class",{"_index":50,"title":{"classes/Admin.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/UpdateExamParamDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":85,"title":{},"body":{"classes/Admin.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/UpdateExamParamDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["cluster_adminmodule",{"_index":187,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":188,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_exammodule",{"_index":730,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_exports",{"_index":731,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_providers",{"_index":732,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_studentmodule",{"_index":1120,"title":{},"body":{"modules/StudentModule.html":{},"overview.html":{}}}],["cluster_studentmodule_exports",{"_index":1121,"title":{},"body":{"modules/StudentModule.html":{},"overview.html":{}}}],["cluster_studentmodule_providers",{"_index":1122,"title":{},"body":{"modules/StudentModule.html":{},"overview.html":{}}}],["code",{"_index":477,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["collapsemcqlist",{"_index":1192,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["collapsemcqlist.map((item",{"_index":1200,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["column",{"_index":1301,"title":{},"body":{"miscellaneous/functions.html":{}}}],["columns",{"_index":1298,"title":{},"body":{"miscellaneous/functions.html":{}}}],["combo",{"_index":821,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["come",{"_index":1342,"title":{},"body":{"index.html":{}}}],["completes",{"_index":1179,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["computer",{"_index":491,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["computing",{"_index":710,"title":{},"body":{"controllers/ExamController.html":{}}}],["conditions",{"_index":1424,"title":{},"body":{"license.html":{}}}],["config/app.config",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["configmodule",{"_index":205,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":215,"title":{},"body":{"modules/AdminModule.html":{}}}],["configmodule.forroot",{"_index":267,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.uri",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["confirmation",{"_index":661,"title":{},"body":{"controllers/ExamController.html":{}}}],["confirming",{"_index":767,"title":{},"body":{"injectables/ExamService.html":{}}}],["connection",{"_index":525,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"license.html":{}}}],["consistency",{"_index":995,"title":{},"body":{"interfaces/IOeQuestion.html":{},"miscellaneous/variables.html":{}}}],["consistent",{"_index":924,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"miscellaneous/functions.html":{}}}],["console.error(error",{"_index":593,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["console.log(env",{"_index":264,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(insertedquestionids",{"_index":1220,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["const",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/variables.html":{}}}],["constants/auth.constants",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["constructor(@injectmodel(student.name",{"_index":1044,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["constructor(adminmodel",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{}}}],["constructor(adminservice",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(connection",{"_index":524,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["constructor(createexamprovider",{"_index":759,"title":{},"body":{"injectables/ExamService.html":{}}}],["constructor(examassignmentmodel",{"_index":811,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["constructor(jwtservice",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["constructor(mcqquestionmodel",{"_index":1162,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["constructor(oequestionmodel",{"_index":1203,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["constructor(private",{"_index":172,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["constructor(reflector",{"_index":334,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(studentmodel",{"_index":1033,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["containing",{"_index":547,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["contains",{"_index":410,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"interfaces/IOeQuestion.html":{},"miscellaneous/functions.html":{}}}],["context",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["context.getclass",{"_index":349,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":348,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["contract",{"_index":1449,"title":{},"body":{"license.html":{}}}],["controller",{"_index":128,"title":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":171,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('auth",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exam",{"_index":705,"title":{},"body":{"controllers/ExamController.html":{}}}],["controller('student",{"_index":1116,"title":{},"body":{"controllers/StudentController.html":{}}}],["controllers",{"_index":130,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["copies",{"_index":1418,"title":{},"body":{"license.html":{}}}],["copy",{"_index":892,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"license.html":{}}}],["copyright",{"_index":1395,"title":{},"body":{"license.html":{}}}],["correct",{"_index":973,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":480,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["course",{"_index":476,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["coursecode",{"_index":483,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["coursename",{"_index":484,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["courses",{"_index":1358,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1224,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":138,"title":{},"body":{"controllers/AdminController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["createadmin",{"_index":134,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["createadmin(@body",{"_index":176,"title":{},"body":{"controllers/AdminController.html":{}}}],["createadmin(createadmindto",{"_index":135,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["createadmindto",{"_index":136,"title":{"classes/CreateAdminDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["created",{"_index":174,"title":{},"body":{"controllers/AdminController.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{}}}],["created'})@apiunauthorizedresponse({description",{"_index":142,"title":{},"body":{"controllers/AdminController.html":{}}}],["createexam",{"_index":523,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["createexam(createexamdto",{"_index":530,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["createexamassignmentdto",{"_index":402,"title":{"classes/CreateExamAssignmentDto.html":{}},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"coverage.html":{}}}],["createexamdto",{"_index":465,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["createexamprovider",{"_index":517,"title":{"injectables/CreateExamProvider.html":{}},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":534,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{}}}],["creating",{"_index":467,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{}}}],["creation",{"_index":546,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{}}}],["credentials",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["cs101a",{"_index":487,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["csc101",{"_index":711,"title":{},"body":{"controllers/ExamController.html":{}}}],["csv",{"_index":1026,"title":{},"body":{"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":948,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getresponse",{"_index":950,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":946,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["d",{"_index":972,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["damages",{"_index":1446,"title":{},"body":{"license.html":{}}}],["data",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":635,"title":{},"body":{"controllers/ExamController.html":{}}}],["data')@apiparam({name",{"_index":669,"title":{},"body":{"controllers/ExamController.html":{}}}],["data'})@apiresponse({status",{"_index":639,"title":{},"body":{"controllers/ExamController.html":{}}}],["data.interface.ts",{"_index":81,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"coverage.html":{}}}],["database",{"_index":1175,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["databaseconfig",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":421,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/ExamAssignment.html":{}}}],["db",{"_index":569,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["deal",{"_index":1406,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1453,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":183,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["decorators",{"_index":88,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"classes/UpdateExamParamDto.html":{}}}],["decorators/auth.decorator",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["deeper",{"_index":1353,"title":{},"body":{"index.html":{}}}],["default",{"_index":354,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":333,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defined",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["defines",{"_index":432,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["delegates",{"_index":756,"title":{},"body":{"injectables/ExamService.html":{}}}],["delete",{"_index":115,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/UpdateExamParamDto.html":{}}}],["delete('mcq/:examid",{"_index":720,"title":{},"body":{"controllers/ExamController.html":{}}}],["delete('mcq/:examid')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":648,"title":{},"body":{"controllers/ExamController.html":{}}}],["delete('oe/:examid",{"_index":727,"title":{},"body":{"controllers/ExamController.html":{}}}],["delete('oe/:examid')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":659,"title":{},"body":{"controllers/ExamController.html":{}}}],["deleted",{"_index":653,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deletemcqexam",{"_index":629,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deletemcqexam(@param('examid",{"_index":721,"title":{},"body":{"controllers/ExamController.html":{}}}],["deletemcqexam(examid",{"_index":647,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deleteoeexam",{"_index":630,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deleteoeexam(@param('examid",{"_index":728,"title":{},"body":{"controllers/ExamController.html":{}}}],["deleteoeexam(examid",{"_index":658,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deletes",{"_index":766,"title":{},"body":{"injectables/ExamService.html":{}}}],["deleting",{"_index":627,"title":{},"body":{"controllers/ExamController.html":{},"classes/UpdateExamParamDto.html":{}}}],["deletion",{"_index":657,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["dependencies",{"_index":181,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depends",{"_index":1003,"title":{},"body":{"interfaces/IResponse.html":{}}}],["description",{"_index":149,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["descriptive",{"_index":1008,"title":{},"body":{"interfaces/IResponse.html":{}}}],["details",{"_index":413,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{}}}],["development",{"_index":1328,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1363,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1350,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1415,"title":{},"body":{"license.html":{}}}],["dive",{"_index":1352,"title":{},"body":{"index.html":{}}}],["doc",{"_index":111,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["document",{"_index":1216,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["documentation",{"_index":1225,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["docx",{"_index":685,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["docx/pdf",{"_index":774,"title":{},"body":{"injectables/ExamService.html":{}}}],["doe",{"_index":372,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["dto",{"_index":468,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"classes/UpdateExamParamDto.html":{}}}],["dtos/create",{"_index":161,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["dtos/login",{"_index":1111,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["dtos/login.dto",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/update",{"_index":695,"title":{},"body":{"controllers/ExamController.html":{}}}],["duration",{"_index":478,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["during",{"_index":922,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["e.g",{"_index":449,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"controllers/ExamController.html":{}}}],["e2e",{"_index":1336,"title":{},"body":{"index.html":{}}}],["each",{"_index":541,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IMcqQuestion.html":{}}}],["efficient",{"_index":1315,"title":{},"body":{"index.html":{}}}],["eight",{"_index":377,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["email",{"_index":83,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["empty",{"_index":568,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["end",{"_index":416,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["ended",{"_index":443,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["endpoint",{"_index":1005,"title":{},"body":{"interfaces/IResponse.html":{}}}],["endpoints",{"_index":1000,"title":{},"body":{"interfaces/IResponse.html":{}}}],["endtime",{"_index":418,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/ExamAssignment.html":{}}}],["ensure",{"_index":544,"title":{},"body":{"injectables/CreateExamProvider.html":{},"miscellaneous/functions.html":{}}}],["ensures",{"_index":474,"title":{},"body":{"classes/CreateExamDto.html":{},"miscellaneous/functions.html":{}}}],["ensuring",{"_index":994,"title":{},"body":{"interfaces/IOeQuestion.html":{},"miscellaneous/variables.html":{}}}],["enterprise",{"_index":1366,"title":{},"body":{"index.html":{}}}],["enum",{"_index":444,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1283,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{}}}],["enums/exam",{"_index":460,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["env",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":362,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["error",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["error(`exam",{"_index":870,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["error(`no",{"_index":867,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["error.message",{"_index":1063,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["errors",{"_index":933,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["event",{"_index":1441,"title":{},"body":{"license.html":{}}}],["exam",{"_index":404,"title":{"classes/Exam.html":{}},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["exam'})@apibody({description",{"_index":670,"title":{},"body":{"controllers/ExamController.html":{}}}],["exam'})@apiresponse({status",{"_index":651,"title":{},"body":{"controllers/ExamController.html":{}}}],["exam._id",{"_index":585,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["exam._id.tostring",{"_index":588,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.controller",{"_index":737,"title":{},"body":{"modules/ExamModule.html":{}}}],["exam.coursecode",{"_index":857,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.coursename",{"_index":856,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.dto",{"_index":553,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["exam.dto.ts",{"_index":466,"title":{},"body":{"classes/CreateExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:31",{"_index":494,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:46",{"_index":489,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:61",{"_index":499,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:76",{"_index":509,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:92",{"_index":504,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.duration",{"_index":858,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.examtype",{"_index":589,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exam.name",{"_index":749,"title":{},"body":{"modules/ExamModule.html":{}}}],["exam.provider",{"_index":740,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["exam.provider.ts",{"_index":519,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["exam.provider.ts:109",{"_index":1165,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["exam.provider.ts:18",{"_index":529,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["exam.provider.ts:25",{"_index":1204,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["exam.provider.ts:26",{"_index":1163,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["exam.provider.ts:47",{"_index":533,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["exam.provider.ts:52",{"_index":1206,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["exam.provider.ts:53",{"_index":1170,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["exam.questioncount",{"_index":868,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.questions",{"_index":791,"title":{},"body":{"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.questions.push(...insertedquestionids",{"_index":1190,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exam.questions?.length",{"_index":788,"title":{},"body":{"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.save",{"_index":580,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exam.schema",{"_index":619,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["exam/exam.module",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["exam_123abc",{"_index":1157,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["exam_123abc'})@isstring()@isnotempty",{"_index":1155,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["exam_abc123",{"_index":461,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["exam_abc123'})@isstring()@isnotempty",{"_index":437,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["examassignment",{"_index":559,"title":{"classes/ExamAssignment.html":{}},"body":{"injectables/CreateExamProvider.html":{},"classes/ExamAssignment.html":{},"modules/ExamModule.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{}}}],["examassignment.name",{"_index":750,"title":{},"body":{"modules/ExamModule.html":{}}}],["examassignmentdocument",{"_index":560,"title":{},"body":{"injectables/CreateExamProvider.html":{},"classes/ExamAssignment.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["examassignmentmodel",{"_index":528,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["examassignmentschema",{"_index":620,"title":{},"body":{"classes/ExamAssignment.html":{},"modules/ExamModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examcontroller",{"_index":622,"title":{"controllers/ExamController.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examdocument",{"_index":554,"title":{},"body":{"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["examid",{"_index":650,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exammodel",{"_index":760,"title":{},"body":{"injectables/ExamService.html":{}}}],["exammodule",{"_index":245,"title":{"modules/ExamModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"modules.html":{},"overview.html":{}}}],["example",{"_index":367,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{},"index.html":{}}}],["examples",{"_index":1006,"title":{},"body":{"interfaces/IResponse.html":{}}}],["exams",{"_index":473,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["examschema",{"_index":419,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"modules/ExamModule.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examservice",{"_index":697,"title":{"injectables/ExamService.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["examtype",{"_index":440,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{}}}],["examtype.mcq",{"_index":463,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["examtype.oe",{"_index":896,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["excel",{"_index":1027,"title":{},"body":{"interfaces/IStudent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception",{"_index":916,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":914,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:35",{"_index":940,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":955,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":952,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exception.message",{"_index":956,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":936,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptionresponse",{"_index":954,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptionresponse.message[0",{"_index":961,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptionresponse?.message",{"_index":962,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptions",{"_index":919,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exclude",{"_index":104,"title":{},"body":{"classes/Admin.html":{}}}],["exec",{"_index":849,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["execution",{"_index":947,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["executioncontext",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1144,"title":{},"body":{"injectables/StudentService.html":{}}}],["existence",{"_index":1172,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["existing",{"_index":673,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["exists",{"_index":889,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["expected",{"_index":980,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["expectedkeys",{"_index":1294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expects",{"_index":990,"title":{},"body":{"interfaces/IOeQuestion.html":{}}}],["experience",{"_index":1355,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":909,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["export",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exports",{"_index":186,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["express",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":532,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["extract",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/InsertStudentProvider.html":{}}}],["extracting",{"_index":1153,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["extractrequestfromheader",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracts",{"_index":927,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["failed",{"_index":152,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["fails",{"_index":571,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["false",{"_index":429,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/ExamAssignment.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["fetch",{"_index":805,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["fetchexamassignmentsprovider",{"_index":733,"title":{"injectables/FetchExamAssignmentsProvider.html":{}},"body":{"modules/ExamModule.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["fetchexamassignmentsproviders",{"_index":1132,"title":{},"body":{"injectables/StudentService.html":{}}}],["fetchexams",{"_index":1104,"title":{},"body":{"controllers/StudentController.html":{}}}],["fetchexams(@param('studentid",{"_index":1118,"title":{},"body":{"controllers/StudentController.html":{}}}],["fetchexams(studentid",{"_index":1105,"title":{},"body":{"controllers/StudentController.html":{}}}],["fetchstudentassignments",{"_index":1130,"title":{},"body":{"injectables/StudentService.html":{}}}],["fetchstudentassignments(studentid",{"_index":1134,"title":{},"body":{"injectables/StudentService.html":{}}}],["few",{"_index":1340,"title":{},"body":{"index.html":{}}}],["field",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":475,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file'})@apiconsumes('multipart/form",{"_index":668,"title":{},"body":{"controllers/ExamController.html":{}}}],["fileinterceptor",{"_index":699,"title":{},"body":{"controllers/ExamController.html":{}}}],["files",{"_index":681,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"license.html":{}}}],["filesinterceptor",{"_index":700,"title":{},"body":{"controllers/ExamController.html":{}}}],["filter",{"_index":584,"title":{},"body":{"injectables/CreateExamProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["filter((student",{"_index":1046,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["finally",{"_index":596,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["find",{"_index":843,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["finduserbyemail",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{}}}],["finduserbyemail(email",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{}}}],["fire",{"_index":357,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["fitness",{"_index":1437,"title":{},"body":{"license.html":{}}}],["follow",{"_index":1308,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["following",{"_index":1423,"title":{},"body":{"license.html":{}}}],["format",{"_index":425,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{}}}],["formats",{"_index":923,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["formatted",{"_index":945,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["forwardref",{"_index":552,"title":{},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{}}}],["found",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["four",{"_index":970,"title":{},"body":{"interfaces/IMcqQuestion.html":{}}}],["framework",{"_index":1313,"title":{},"body":{"index.html":{}}}],["free",{"_index":1401,"title":{},"body":{"license.html":{}}}],["full",{"_index":370,"title":{},"body":{"classes/CreateAdminDto.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IStudent.html":{},"index.html":{}}}],["fullname",{"_index":1021,"title":{},"body":{"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/Student.html":{},"miscellaneous/variables.html":{}}}],["fullquestions",{"_index":881,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["fullquestions.map(async",{"_index":884,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["function",{"_index":120,"title":{},"body":{"classes/Admin.html":{},"interfaces/IResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1289,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1421,"title":{},"body":{"license.html":{}}}],["generate",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/functions.html":{}}}],["generateandcachequestions",{"_index":807,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["generateandcachequestions(studentid",{"_index":817,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["generatetokenprovider",{"_index":200,"title":{"classes/GenerateTokenProvider.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AuthService.html":{},"classes/GenerateTokenProvider.html":{},"coverage.html":{}}}],["get('assignments/:studentid",{"_index":1106,"title":{},"body":{"controllers/StudentController.html":{}}}],["getassignmentsforstudent",{"_index":808,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getassignmentsforstudent(studentid",{"_index":823,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["gethello",{"_index":277,"title":{},"body":{"injectables/AppService.html":{}}}],["getquestionmodel",{"_index":809,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getquestionmodel(type",{"_index":829,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getting",{"_index":1309,"title":{"index.html":{},"license.html":{}},"body":{}}],["given",{"_index":826,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["global",{"_index":915,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["globalhttpexceptionfilter",{"_index":911,"title":{"classes/GlobalHttpExceptionFilter.html":{}},"body":{"classes/GlobalHttpExceptionFilter.html":{},"coverage.html":{}}}],["granted",{"_index":1400,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1360,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1377,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["guide",{"_index":679,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["handle",{"_index":917,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["handled",{"_index":1014,"title":{},"body":{"interfaces/IResponse.html":{}}}],["handles",{"_index":942,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["handling",{"_index":624,"title":{},"body":{"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["hands",{"_index":1354,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1343,"title":{},"body":{"index.html":{}}}],["hashing",{"_index":127,"title":{},"body":{"classes/Admin.html":{}}}],["header",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":1302,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hello",{"_index":279,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":1364,"title":{},"body":{"index.html":{}}}],["here",{"_index":1385,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1399,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1443,"title":{},"body":{"license.html":{}}}],["host",{"_index":938,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":949,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["http",{"_index":913,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"coverage.html":{}}}],["httpcode",{"_index":694,"title":{},"body":{"controllers/ExamController.html":{}}}],["httpcode(httpstatus.created",{"_index":706,"title":{},"body":{"controllers/ExamController.html":{}}}],["httpcode(httpstatus.ok",{"_index":716,"title":{},"body":{"controllers/ExamController.html":{}}}],["httpexception",{"_index":929,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["https://nestjs.com",{"_index":1391,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":693,"title":{},"body":{"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":953,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["hydrateddocument",{"_index":99,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":435,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["id'})@apiparam({name",{"_index":649,"title":{},"body":{"controllers/ExamController.html":{}}}],["identifier",{"_index":439,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/UpdateExamParamDto.html":{},"coverage.html":{}}}],["identifiers",{"_index":411,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["identifying",{"_index":1024,"title":{},"body":{"interfaces/IStudent.html":{}}}],["ids",{"_index":820,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["imcqquestion",{"_index":965,"title":{"interfaces/IMcqQuestion.html":{}},"body":{"interfaces/IMcqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{}}}],["imcqquestionexpectedkeys",{"_index":986,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["implied",{"_index":1433,"title":{},"body":{"license.html":{}}}],["import",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["imported",{"_index":985,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"miscellaneous/variables.html":{}}}],["imports",{"_index":212,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"interfaces/IStudent.html":{},"modules/StudentModule.html":{},"miscellaneous/variables.html":{}}}],["include",{"_index":827,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["included",{"_index":1428,"title":{},"body":{"license.html":{}}}],["includes",{"_index":969,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IStudent.html":{}}}],["including",{"_index":773,"title":{},"body":{"injectables/ExamService.html":{},"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1012,"title":{},"body":{"interfaces/IResponse.html":{}}}],["individually",{"_index":879,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["information",{"_index":548,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["inject",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/StudentService.html":{}}}],["inject(cache_manager",{"_index":841,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["inject(forwardref",{"_index":564,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/StudentService.html":{}}}],["inject(jwtconfig.key",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["injectables",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"overview.html":{}}}],["injectconnection",{"_index":557,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["injectmodel",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["injectmodel('mcqquestion",{"_index":839,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["injectmodel('oequestion",{"_index":840,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["injectmodel(admin.name",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{}}}],["injectmodel(exam.name",{"_index":565,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["injectmodel(examassignment.name",{"_index":566,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["injectmodel(mcqquestion.name",{"_index":775,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["injectmodel(oequestion.name",{"_index":776,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["injectmodel(student.name",{"_index":1140,"title":{},"body":{"injectables/StudentService.html":{}}}],["input",{"_index":935,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["insert",{"_index":1064,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["insertedquestionids",{"_index":1188,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["insertedstudentids",{"_index":1045,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["inserting",{"_index":1207,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["insertone",{"_index":1215,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["inserts",{"_index":1208,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["insertstudentprovider",{"_index":1029,"title":{"injectables/InsertStudentProvider.html":{}},"body":{"injectables/InsertStudentProvider.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["insertstudents",{"_index":1032,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["insertstudents(tutoriallist",{"_index":1036,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["installcompile",{"_index":1326,"title":{},"body":{"index.html":{}}}],["instance",{"_index":358,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instance.canactivate(context",{"_index":360,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instanceof",{"_index":951,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["integer",{"_index":712,"title":{},"body":{"controllers/ExamController.html":{}}}],["interact",{"_index":1361,"title":{},"body":{"index.html":{}}}],["interface",{"_index":76,"title":{"interfaces/ActiveAdminData.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{}},"body":{"interfaces/ActiveAdminData.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interfaces",{"_index":78,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"overview.html":{}}}],["internal",{"_index":957,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["internalservererrorexception",{"_index":103,"title":{},"body":{"classes/Admin.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["internalservererrorexception('error",{"_index":126,"title":{},"body":{"classes/Admin.html":{}}}],["internalservererrorexception(`unknown",{"_index":898,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["introduction",{"_index":709,"title":{},"body":{"controllers/ExamController.html":{}}}],["invalid",{"_index":145,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["ioeexpectedkeys",{"_index":996,"title":{},"body":{"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ioequestion",{"_index":988,"title":{"interfaces/IOeQuestion.html":{}},"body":{"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["iresponse",{"_index":563,"title":{"interfaces/IResponse.html":{}},"body":{"injectables/CreateExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdate",{"_index":457,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["isemail",{"_index":391,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":458,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{}}}],["isenum(examtype",{"_index":464,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{}}}],["isglobal",{"_index":266,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":511,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isnotempty",{"_index":392,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["iso",{"_index":423,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["isoptional",{"_index":459,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["ispasswordvalid",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":393,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["isstring()@isnotempty",{"_index":1078,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["isstring()@isnotempty()@transform",{"_index":1076,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["istudent",{"_index":1015,"title":{"interfaces/IStudent.html":{}},"body":{"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"coverage.html":{}}}],["istudentexpectedkeys",{"_index":1028,"title":{},"body":{"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1202,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["item.question",{"_index":1201,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["items",{"_index":725,"title":{},"body":{"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["job",{"_index":1371,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1373,"title":{},"body":{"index.html":{}}}],["john",{"_index":371,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["joi",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1383,"title":{},"body":{"index.html":{}}}],["json",{"_index":925,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["jwtconfig",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AdminModule.html":{},"classes/GenerateTokenProvider.html":{}}}],["jwtconfiguration",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["jwtmodule",{"_index":203,"title":{},"body":{"modules/AdminModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":216,"title":{},"body":{"modules/AdminModule.html":{}}}],["jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["kamil",{"_index":1388,"title":{},"body":{"index.html":{}}}],["key",{"_index":887,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["keyof",{"_index":987,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["keys",{"_index":981,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["kind",{"_index":1432,"title":{},"body":{"license.html":{}}}],["labeled",{"_index":971,"title":{},"body":{"interfaces/IMcqQuestion.html":{}}}],["lean",{"_index":848,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["lean().exec",{"_index":883,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["learn",{"_index":1347,"title":{},"body":{"index.html":{}}}],["legend",{"_index":182,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["letter",{"_index":380,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["liability",{"_index":1447,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1444,"title":{},"body":{"license.html":{}}}],["license",{"_index":1394,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1376,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1409,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1434,"title":{},"body":{"license.html":{}}}],["linkedin",{"_index":1369,"title":{},"body":{"index.html":{}}}],["links",{"_index":1176,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["list",{"_index":539,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"miscellaneous/variables.html":{}}}],["load",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["login",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["login'})@apiresponse({description",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StudentController.html":{}}}],["login(logindto",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(loginstudentdto",{"_index":1108,"title":{},"body":{"controllers/StudentController.html":{}}}],["logindto",{"_index":285,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginstudent",{"_index":1131,"title":{},"body":{"injectables/StudentService.html":{}}}],["loginstudent(loginstudentdto",{"_index":1137,"title":{},"body":{"injectables/StudentService.html":{}}}],["loginstudentdto",{"_index":1073,"title":{"classes/LoginStudentDto.html":{}},"body":{"classes/LoginStudentDto.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["loginstudentdto.matricno",{"_index":1142,"title":{},"body":{"injectables/StudentService.html":{}}}],["loginstudentdto.password.tolowercase",{"_index":1147,"title":{},"body":{"injectables/StudentService.html":{}}}],["longer",{"_index":433,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["looking",{"_index":1370,"title":{},"body":{"index.html":{}}}],["loop",{"_index":355,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["manager",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"dependencies.html":{}}}],["managing",{"_index":755,"title":{},"body":{"injectables/ExamService.html":{}}}],["map((student",{"_index":1048,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["mappedstudent",{"_index":1049,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["mappedstudent.matricno",{"_index":1052,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["maps",{"_index":1295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mark",{"_index":678,"title":{},"body":{"controllers/ExamController.html":{}}}],["marking",{"_index":684,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["markingguide",{"_index":1205,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["match",{"_index":978,"title":{},"body":{"interfaces/IMcqQuestion.html":{}}}],["matches",{"_index":394,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["matches(/^(?=.*[a",{"_index":401,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["matching",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matric",{"_index":1022,"title":{},"body":{"interfaces/IStudent.html":{},"injectables/StudentService.html":{},"miscellaneous/variables.html":{}}}],["matricno",{"_index":1050,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"classes/LoginStudentDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{}}}],["matriculation",{"_index":1020,"title":{},"body":{"interfaces/IStudent.html":{}}}],["max",{"_index":688,"title":{},"body":{"controllers/ExamController.html":{}}}],["mcq",{"_index":441,"title":{"classes/Mcq.html":{}},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"interfaces/IMcqQuestion.html":{},"classes/Mcq.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mcq.a",{"_index":1195,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq.b",{"_index":1196,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq.c",{"_index":1197,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq.d",{"_index":1198,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq.question",{"_index":1194,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq['correct",{"_index":1199,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcqexammodel",{"_index":527,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["mcqlist",{"_index":718,"title":{},"body":{"controllers/ExamController.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["mcqlist.length",{"_index":1184,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcqlist.map((mcq",{"_index":1193,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcqmodel",{"_index":812,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["mcqquestion",{"_index":500,"title":{"classes/McqQuestion.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"classes/McqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["mcqquestion.name",{"_index":751,"title":{},"body":{"modules/ExamModule.html":{}}}],["mcqquestiondocument",{"_index":1092,"title":{},"body":{"classes/McqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mcqquestionmodel",{"_index":761,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["mcqquestionschema",{"_index":742,"title":{},"body":{"modules/ExamModule.html":{},"classes/McqQuestion.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mcqs",{"_index":501,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["mcqtemplate",{"_index":664,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["mcqtemplate.mimetype",{"_index":784,"title":{},"body":{"injectables/ExamService.html":{}}}],["merchantability",{"_index":1436,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1413,"title":{},"body":{"license.html":{}}}],["message",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"classes/LoginDto.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":644,"title":{},"body":{"controllers/ExamController.html":{},"dependencies.html":{}}}],["method",{"_index":941,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["mguide",{"_index":793,"title":{},"body":{"injectables/ExamService.html":{}}}],["min",{"_index":512,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["min(1",{"_index":516,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["min(10",{"_index":515,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["minimum",{"_index":376,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{}}}],["minlength",{"_index":373,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{}}}],["minlength(3",{"_index":397,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["minlength(6",{"_index":514,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["minlength(8",{"_index":400,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["minutes",{"_index":495,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["miscellaneous",{"_index":1282,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":144,"title":{},"body":{"controllers/AdminController.html":{},"injectables/ExamService.html":{}}}],["mit",{"_index":1375,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":1183,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"index.html":{}}}],["model",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["model.find",{"_index":882,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["modify",{"_index":1412,"title":{},"body":{"license.html":{}}}],["module",{"_index":178,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["modules",{"_index":180,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":1169,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mongoose",{"_index":101,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":608,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAssignment.html":{}}}],["mongoose.types.objectid",{"_index":605,"title":{},"body":{"classes/Exam.html":{}}}],["mongoosemodule",{"_index":198,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{}}}],["mongoosemodule.forfeature",{"_index":213,"title":{},"body":{"modules/AdminModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":272,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1348,"title":{},"body":{"index.html":{}}}],["multipart/form",{"_index":1300,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multiple",{"_index":471,"title":{},"body":{"classes/CreateExamDto.html":{},"interfaces/IMcqQuestion.html":{},"miscellaneous/enumerations.html":{}}}],["myśliwiec",{"_index":1389,"title":{},"body":{"index.html":{}}}],["name",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":795,"title":{},"body":{"injectables/ExamService.html":{},"index.html":{}}}],["nest",{"_index":1319,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1393,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1345,"title":{},"body":{"index.html":{}}}],["nestjs/cache",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AdminModule.html":{},"modules/AppModule.html":{},"classes/GenerateTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":209,"title":{},"body":{"modules/AdminModule.html":{},"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AdminModule.html":{},"classes/GenerateTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":98,"title":{},"body":{"classes/Admin.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":701,"title":{},"body":{"controllers/ExamController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":169,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{},"dependencies.html":{}}}],["new",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["newadmin",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{}}}],["newadmin.save",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{}}}],["node.js",{"_index":1312,"title":{},"body":{"index.html":{}}}],["none",{"_index":1287,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":1440,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["notfoundexception('exam",{"_index":787,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["notfoundexception('student",{"_index":1143,"title":{},"body":{"injectables/StudentService.html":{}}}],["notfoundexception('user",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`no",{"_index":851,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["notice",{"_index":1426,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1325,"title":{},"body":{"index.html":{}}}],["null",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IResponse.html":{},"miscellaneous/functions.html":{}}}],["nulls",{"_index":861,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["number",{"_index":381,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IStudent.html":{},"classes/LoginDto.html":{},"injectables/StudentService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":407,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.values(result.insertedids",{"_index":1219,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["object.values(result.upsertedids",{"_index":1189,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["objects",{"_index":878,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/functions.html":{}}}],["observable",{"_index":338,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["obtaining",{"_index":1404,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":963,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["oe",{"_index":628,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"interfaces/IOeQuestion.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["oemodel",{"_index":813,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["oeq.question",{"_index":1217,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["oeqlist",{"_index":1210,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["oeqlist.length",{"_index":1212,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["oeqlist.map((oeq",{"_index":1214,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["oequestion",{"_index":502,"title":{"classes/OeQuestion.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"classes/OeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["oequestion'})@isnotempty",{"_index":503,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["oequestion.name",{"_index":752,"title":{},"body":{"modules/ExamModule.html":{}}}],["oequestiondocument",{"_index":1095,"title":{},"body":{"classes/OeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["oequestionmodel",{"_index":762,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["oequestionschema",{"_index":745,"title":{},"body":{"modules/ExamModule.html":{},"classes/OeQuestion.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oetemplate",{"_index":794,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["offer",{"_index":1372,"title":{},"body":{"index.html":{}}}],["officedocument.spreadsheetml.sheet",{"_index":780,"title":{},"body":{"injectables/ExamService.html":{}}}],["officedocument.wordprocessingml.document",{"_index":797,"title":{},"body":{"injectables/ExamService.html":{}}}],["official",{"_index":1356,"title":{},"body":{"index.html":{}}}],["ojuri",{"_index":1397,"title":{},"body":{"license.html":{}}}],["oluwafemi",{"_index":1396,"title":{},"body":{"license.html":{}}}],["one",{"_index":379,"title":{},"body":{"classes/CreateAdminDto.html":{},"interfaces/IMcqQuestion.html":{},"classes/LoginDto.html":{}}}],["open",{"_index":442,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["operation",{"_index":570,"title":{},"body":{"injectables/CreateExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["operations",{"_index":581,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["option",{"_index":977,"title":{},"body":{"interfaces/IMcqQuestion.html":{}}}],["optional",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1083,"title":{},"body":{"classes/Mcq.html":{},"classes/McqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["otherwise",{"_index":1451,"title":{},"body":{"license.html":{}}}],["out",{"_index":192,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":934,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["overview",{"_index":1457,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p@ssw0rd",{"_index":1068,"title":{},"body":{"classes/LoginDto.html":{}}}],["package",{"_index":1259,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":156,"title":{},"body":{"controllers/AdminController.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"controllers/StudentController.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["param.dto",{"_index":696,"title":{},"body":{"controllers/ExamController.html":{}}}],["param.dto.ts",{"_index":1152,"title":{},"body":{"classes/UpdateExamParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:20",{"_index":1156,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["parsed",{"_index":536,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":1042,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["parser.ts",{"_index":1256,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["parses",{"_index":540,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["parsetemplate",{"_index":1040,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsetemplate(oetemplate",{"_index":1211,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["parsetemplate(template",{"_index":1293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsing",{"_index":1159,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["part",{"_index":1365,"title":{},"body":{"index.html":{}}}],["particular",{"_index":1438,"title":{},"body":{"license.html":{}}}],["passw0rd",{"_index":384,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["password",{"_index":87,"title":{},"body":{"classes/Admin.html":{},"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"injectables/StudentService.html":{}}}],["patch",{"_index":157,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{}}}],["patch('mcq/:examid",{"_index":715,"title":{},"body":{"controllers/ExamController.html":{}}}],["patch('mcq/:examid')@httpcode(httpstatus.ok)@useinterceptors(undefined)@apioperation({summary",{"_index":665,"title":{},"body":{"controllers/ExamController.html":{}}}],["patch('oe/:examid",{"_index":723,"title":{},"body":{"controllers/ExamController.html":{}}}],["patch('oe/:examid')@httpcode(httpstatus.ok)@useinterceptors(undefined)@apioperation({summary",{"_index":676,"title":{},"body":{"controllers/ExamController.html":{}}}],["path",{"_index":846,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"classes/UpdateExamParamDto.html":{}}}],["payload",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{},"interfaces/IResponse.html":{}}}],["pdf",{"_index":686,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["permission",{"_index":1398,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1419,"title":{},"body":{"license.html":{}}}],["person",{"_index":1403,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1420,"title":{},"body":{"license.html":{}}}],["please",{"_index":799,"title":{},"body":{"injectables/ExamService.html":{},"index.html":{}}}],["populate",{"_index":845,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["portions",{"_index":1430,"title":{},"body":{"license.html":{}}}],["possible",{"_index":447,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"interfaces/IMcqQuestion.html":{}}}],["post",{"_index":158,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["post('auth",{"_index":1109,"title":{},"body":{"controllers/StudentController.html":{}}}],["post()@apibearerauth()@apioperation({summary",{"_index":137,"title":{},"body":{"controllers/AdminController.html":{}}}],["post()@auth(authtype.none)@useinterceptors(classserializerinterceptor)@apioperation({summary",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@httpcode(httpstatus.created)@useinterceptors(undefined)@apioperation({summary",{"_index":633,"title":{},"body":{"controllers/ExamController.html":{}}}],["prefix",{"_index":132,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["preparelistforbulkwrite",{"_index":1161,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["preparelistforbulkwrite(mcqlist",{"_index":1164,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["prepares",{"_index":1166,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["present",{"_index":1303,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["process.env.node_env",{"_index":263,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["processed",{"_index":1209,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["production",{"_index":1331,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1311,"title":{},"body":{"index.html":{}}}],["project",{"_index":1323,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["promise.all",{"_index":852,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["promise.resolve",{"_index":359,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["prop",{"_index":95,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["prop({enum",{"_index":602,"title":{},"body":{"classes/Exam.html":{}}}],["prop({required",{"_index":89,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/McqQuestion.html":{},"classes/Student.html":{}}}],["prop({type",{"_index":606,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{}}}],["properties",{"_index":82,"title":{"properties.html":{}},"body":{"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/UpdateExamParamDto.html":{},"properties.html":{}}}],["provide",{"_index":217,"title":{},"body":{"modules/AdminModule.html":{},"injectables/ExamService.html":{}}}],["provided",{"_index":481,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/GlobalHttpExceptionFilter.html":{},"license.html":{}}}],["provider",{"_index":520,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["providers",{"_index":185,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["providers/admin.service",{"_index":160,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["providers/auth.service",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["providers/create",{"_index":739,"title":{},"body":{"modules/ExamModule.html":{}}}],["providers/exam.service",{"_index":698,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{}}}],["providers/fetch",{"_index":747,"title":{},"body":{"modules/ExamModule.html":{}}}],["providers/insert",{"_index":1125,"title":{},"body":{"modules/StudentModule.html":{}}}],["providers/student.service",{"_index":1113,"title":{},"body":{"controllers/StudentController.html":{},"modules/StudentModule.html":{}}}],["providers/update",{"_index":741,"title":{},"body":{"modules/ExamModule.html":{}}}],["providing",{"_index":930,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["public",{"_index":133,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GenerateTokenProvider.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["publish",{"_index":1414,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1439,"title":{},"body":{"license.html":{}}}],["q.tostring",{"_index":876,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["qid",{"_index":885,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["question",{"_index":479,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/variables.html":{}}}],["question._id.tostring",{"_index":886,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["question.interface",{"_index":1180,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["question.interface.ts",{"_index":967,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question.schema",{"_index":744,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["question.schema.ts",{"_index":1088,"title":{},"body":{"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["question.schema.ts:19",{"_index":1091,"title":{},"body":{"classes/McqQuestion.html":{},"classes/OeQuestion.html":{}}}],["question.schema.ts:22",{"_index":1090,"title":{},"body":{"classes/McqQuestion.html":{}}}],["question.schema.ts:25",{"_index":1089,"title":{},"body":{"classes/McqQuestion.html":{}}}],["question:${qid",{"_index":888,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["questioncount",{"_index":485,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["questionids",{"_index":874,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["questions",{"_index":505,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["questions.length",{"_index":869,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["questions:${studentid}:${examid",{"_index":863,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["questions?.length",{"_index":866,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["randomized",{"_index":819,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["read",{"_index":1384,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["real",{"_index":1362,"title":{},"body":{"index.html":{}}}],["received",{"_index":1299,"title":{},"body":{"miscellaneous/functions.html":{}}}],["receiving",{"_index":454,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["record",{"_index":343,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{}}}],["ref",{"_index":614,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["reflect",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":335,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refpath",{"_index":609,"title":{},"body":{"classes/Exam.html":{}}}],["related",{"_index":625,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["remove",{"_index":860,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["repository",{"_index":1322,"title":{},"body":{"index.html":{}}}],["representing",{"_index":968,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/enumerations.html":{}}}],["request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":871,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["required",{"_index":116,"title":{},"body":{"classes/Admin.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/McqQuestion.html":{},"classes/Student.html":{}}}],["reset",{"_index":191,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["resources",{"_index":1341,"title":{},"body":{"index.html":{}}}],["response",{"_index":550,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["response.status(status).json",{"_index":964,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["responses",{"_index":999,"title":{},"body":{"interfaces/IResponse.html":{},"miscellaneous/functions.html":{}}}],["responsible",{"_index":521,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["restriction",{"_index":1408,"title":{},"body":{"license.html":{}}}],["result",{"_index":690,"title":{},"body":{"controllers/ExamController.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["results",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.filter(boolean",{"_index":859,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["ret",{"_index":112,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["ret._id",{"_index":114,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["ret.id",{"_index":113,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["return",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["rights",{"_index":1410,"title":{},"body":{"license.html":{}}}],["run",{"_index":1327,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":339,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["s._id.tostring",{"_index":1062,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["s['matric",{"_index":1057,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["salt",{"_index":122,"title":{},"body":{"classes/Admin.html":{}}}],["save",{"_index":1191,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["saves",{"_index":1174,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["scalable",{"_index":1316,"title":{},"body":{"index.html":{}}}],["scheduling",{"_index":412,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["schema",{"_index":96,"title":{},"body":{"classes/Admin.html":{},"modules/AdminModule.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"modules/StudentModule.html":{}}}],["schemafactory",{"_index":97,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["schemafactory.createforclass(admin",{"_index":118,"title":{},"body":{"classes/Admin.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(exam",{"_index":610,"title":{},"body":{"classes/Exam.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(examassignment",{"_index":621,"title":{},"body":{"classes/ExamAssignment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(mcqquestion",{"_index":1093,"title":{},"body":{"classes/McqQuestion.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(oequestion",{"_index":1096,"title":{},"body":{"classes/OeQuestion.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(student",{"_index":1101,"title":{},"body":{"classes/Student.html":{},"miscellaneous/variables.html":{}}}],["schemas/admin.schema",{"_index":199,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{}}}],["schemas/exam",{"_index":561,"title":{},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["schemas/exam.schema",{"_index":555,"title":{},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["schemas/mcq/mcq",{"_index":743,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["schemas/oe/oe",{"_index":746,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["schemas/student.schema",{"_index":1039,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{}}}],["science",{"_index":492,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["secret",{"_index":907,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["select",{"_index":847,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["selected",{"_index":872,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["selected.map((q",{"_index":875,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["sell",{"_index":1417,"title":{},"body":{"license.html":{}}}],["sends",{"_index":944,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["server",{"_index":958,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"index.html":{}}}],["service",{"_index":754,"title":{},"body":{"injectables/ExamService.html":{}}}],["session",{"_index":572,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["session(session",{"_index":1060,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["session.aborttransaction",{"_index":594,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["session.committransaction",{"_index":592,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["session.endsession",{"_index":597,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["session.starttransaction",{"_index":574,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["set",{"_index":587,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["setmetadata(auth_type_key",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1324,"title":{},"body":{"index.html":{}}}],["shall",{"_index":1427,"title":{},"body":{"license.html":{}}}],["shape",{"_index":984,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["shuffle",{"_index":834,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["shuffleandselect",{"_index":810,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["shuffleandselect(array",{"_index":831,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["side",{"_index":1317,"title":{},"body":{"index.html":{}}}],["signtoken",{"_index":901,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["signtoken(adminid",{"_index":903,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["single",{"_index":1007,"title":{},"body":{"interfaces/IResponse.html":{}}}],["software",{"_index":1405,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"index.html":{}}}],["special",{"_index":382,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["specific",{"_index":1004,"title":{},"body":{"interfaces/IResponse.html":{}}}],["sponsors",{"_index":1379,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../admin.schema.ts",{"_index":1466,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1284,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exam",{"_index":1286,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../exam.schema.ts",{"_index":1467,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../fetch",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mcq",{"_index":1468,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../oe",{"_index":1469,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../response",{"_index":1292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../student.interface.ts",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../student.schema.ts",{"_index":1470,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../template",{"_index":1291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/admin/admin.controller.ts",{"_index":131,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:28",{"_index":153,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.module.ts",{"_index":193,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/auth/auth.controller.ts",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/admin/auth/auth.controller.ts:35",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/admin/auth/constants/auth.constants.ts",{"_index":1228,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/admin/auth/decorators/active",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/admin/auth/decorators/auth.decorator",{"_index":1114,"title":{},"body":{"controllers/StudentController.html":{}}}],["src/admin/auth/decorators/auth.decorator.ts",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/admin/auth/dtos/login.dto.ts",{"_index":1065,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/admin/auth/dtos/login.dto.ts:18",{"_index":1067,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/admin/auth/dtos/login.dto.ts:33",{"_index":1071,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/admin/auth/enums/auth",{"_index":1115,"title":{},"body":{"controllers/StudentController.html":{},"miscellaneous/enumerations.html":{}}}],["src/admin/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/admin/auth/guards/authentication.guard.ts",{"_index":330,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/admin/auth/guards/authentication.guard.ts:23",{"_index":336,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/admin/auth/guards/authentication.guard.ts:30",{"_index":337,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/admin/auth/interfaces/active",{"_index":79,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"coverage.html":{}}}],["src/admin/auth/providers/auth.service.ts",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/admin/auth/providers/auth.service.ts:13",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/admin/auth/providers/auth.service.ts:20",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/admin/auth/providers/generate",{"_index":899,"title":{},"body":{"classes/GenerateTokenProvider.html":{},"coverage.html":{}}}],["src/admin/dtos/create",{"_index":363,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["src/admin/providers/admin.service",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/admin/providers/admin.service.ts",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/providers/admin.service.ts:14",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:23",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:8",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/schemas/admin.schema.ts",{"_index":86,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/admin/schemas/admin.schema.ts:22",{"_index":92,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/schemas/admin.schema.ts:25",{"_index":91,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/schemas/admin.schema.ts:29",{"_index":94,"title":{},"body":{"classes/Admin.html":{}}}],["src/app.controller.ts",{"_index":238,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":276,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":278,"title":{},"body":{"injectables/AppService.html":{}}}],["src/exam/dtos/create",{"_index":403,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exam/dtos/mcq.dto.ts",{"_index":1082,"title":{},"body":{"classes/Mcq.html":{},"coverage.html":{}}}],["src/exam/dtos/mcq.dto.ts:2",{"_index":1086,"title":{},"body":{"classes/Mcq.html":{}}}],["src/exam/dtos/mcq.dto.ts:3",{"_index":1085,"title":{},"body":{"classes/Mcq.html":{}}}],["src/exam/dtos/mcq.dto.ts:4",{"_index":1084,"title":{},"body":{"classes/Mcq.html":{}}}],["src/exam/dtos/update",{"_index":1151,"title":{},"body":{"classes/UpdateExamParamDto.html":{},"coverage.html":{}}}],["src/exam/enums/exam",{"_index":1288,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exam/exam.controller.ts",{"_index":623,"title":{},"body":{"controllers/ExamController.html":{},"coverage.html":{}}}],["src/exam/exam.controller.ts:113",{"_index":672,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:132",{"_index":655,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:168",{"_index":683,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:187",{"_index":660,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:78",{"_index":641,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.module",{"_index":1127,"title":{},"body":{"modules/StudentModule.html":{}}}],["src/exam/exam.module.ts",{"_index":736,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/exam/providers/create",{"_index":518,"title":{},"body":{"injectables/CreateExamProvider.html":{},"coverage.html":{}}}],["src/exam/providers/exam.service",{"_index":1139,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/exam/providers/exam.service.ts",{"_index":753,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{}}}],["src/exam/providers/exam.service.ts:116",{"_index":772,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:164",{"_index":768,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:22",{"_index":763,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:47",{"_index":764,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:71",{"_index":770,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:91",{"_index":765,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/fetch",{"_index":802,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exam/providers/update",{"_index":1158,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["src/exam/schemas/exam",{"_index":611,"title":{},"body":{"classes/ExamAssignment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/exam/schemas/exam.schema.ts",{"_index":598,"title":{},"body":{"classes/Exam.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/exam/schemas/exam.schema.ts:20",{"_index":600,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:23",{"_index":599,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:26",{"_index":601,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:29",{"_index":603,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:32",{"_index":604,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:37",{"_index":607,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/mcq/mcq",{"_index":1087,"title":{},"body":{"classes/McqQuestion.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/exam/schemas/oe/oe",{"_index":1094,"title":{},"body":{"classes/OeQuestion.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/filters/global",{"_index":912,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1252,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/student/dtos/login",{"_index":1074,"title":{},"body":{"classes/LoginStudentDto.html":{},"coverage.html":{}}}],["src/student/providers/insert",{"_index":1030,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"coverage.html":{}}}],["src/student/providers/student.service",{"_index":556,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["src/student/providers/student.service.ts",{"_index":1129,"title":{},"body":{"injectables/StudentService.html":{},"coverage.html":{}}}],["src/student/providers/student.service.ts:12",{"_index":1133,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:24",{"_index":1138,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:38",{"_index":1136,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:44",{"_index":1135,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/schemas/student.schema",{"_index":618,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["src/student/schemas/student.schema.ts",{"_index":1097,"title":{},"body":{"classes/Student.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/student/schemas/student.schema.ts:20",{"_index":1098,"title":{},"body":{"classes/Student.html":{}}}],["src/student/schemas/student.schema.ts:23",{"_index":1099,"title":{},"body":{"classes/Student.html":{}}}],["src/student/student.controller.ts",{"_index":1103,"title":{},"body":{"controllers/StudentController.html":{},"coverage.html":{}}}],["src/student/student.controller.ts:15",{"_index":1110,"title":{},"body":{"controllers/StudentController.html":{}}}],["src/student/student.controller.ts:20",{"_index":1107,"title":{},"body":{"controllers/StudentController.html":{}}}],["src/student/student.module",{"_index":738,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/student/student.module.ts",{"_index":1123,"title":{},"body":{"modules/StudentModule.html":{}}}],["src/utils/interfaces/mcq",{"_index":966,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/interfaces/oe",{"_index":989,"title":{},"body":{"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/interfaces/student.interface",{"_index":1043,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["src/utils/interfaces/student.interface.ts",{"_index":1016,"title":{},"body":{"interfaces/IStudent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/response",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/template",{"_index":1041,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":928,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["standardized",{"_index":1306,"title":{},"body":{"miscellaneous/functions.html":{}}}],["start",{"_index":415,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"index.html":{}}}],["start:dev",{"_index":1330,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1332,"title":{},"body":{"index.html":{}}}],["started",{"_index":1310,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1321,"title":{},"body":{"index.html":{}}}],["starttime",{"_index":420,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/ExamAssignment.html":{}}}],["statements",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":332,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":175,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["stay",{"_index":1367,"title":{},"body":{"index.html":{}}}],["storing",{"_index":1160,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["string",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strongly",{"_index":1296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["structure",{"_index":926,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"miscellaneous/functions.html":{}}}],["structured",{"_index":1025,"title":{},"body":{"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":409,"title":{"classes/Student.html":{}},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"classes/ExamAssignment.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["student's",{"_index":1019,"title":{},"body":{"interfaces/IStudent.html":{}}}],["student.controller",{"_index":1124,"title":{},"body":{"modules/StudentModule.html":{}}}],["student.dto",{"_index":1112,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["student.dto.ts",{"_index":1075,"title":{},"body":{"classes/LoginStudentDto.html":{},"coverage.html":{}}}],["student.dto.ts:12",{"_index":1079,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["student.dto.ts:8",{"_index":1077,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["student.fullname.split",{"_index":1145,"title":{},"body":{"injectables/StudentService.html":{}}}],["student.name",{"_index":1128,"title":{},"body":{"modules/StudentModule.html":{}}}],["student.provider",{"_index":1126,"title":{},"body":{"modules/StudentModule.html":{},"injectables/StudentService.html":{}}}],["student.provider.ts",{"_index":1031,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"coverage.html":{}}}],["student.provider.ts:15",{"_index":1037,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["student.provider.ts:9",{"_index":1034,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["student/student.module",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["student['fullname",{"_index":1051,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["student['matric",{"_index":1047,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["student_xyz456",{"_index":462,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["student_xyz456'})@isstring()@isnotempty",{"_index":455,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["studentcontroller",{"_index":1102,"title":{"controllers/StudentController.html":{}},"body":{"controllers/StudentController.html":{},"modules/StudentModule.html":{},"coverage.html":{}}}],["studentdocument",{"_index":1038,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["studentid",{"_index":822,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["studentmodel",{"_index":1035,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["studentmodule",{"_index":246,"title":{"modules/StudentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"modules.html":{},"overview.html":{}}}],["students",{"_index":522,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{}}}],["students.length",{"_index":576,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["students.map((s",{"_index":1056,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["students.map((student",{"_index":582,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["studentschema",{"_index":1100,"title":{},"body":{"classes/Student.html":{},"modules/StudentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["studentservice",{"_index":526,"title":{"injectables/StudentService.html":{}},"body":{"injectables/CreateExamProvider.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["sub",{"_index":84,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"classes/GenerateTokenProvider.html":{}}}],["subject",{"_index":1422,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1416,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1429,"title":{},"body":{"license.html":{}}}],["success",{"_index":549,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["successful",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{},"injectables/StudentService.html":{},"miscellaneous/functions.html":{}}}],["successful'})@apibadrequestresponse({description",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":141,"title":{},"body":{"controllers/AdminController.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["successfully'})@apiresponse({status",{"_index":638,"title":{},"body":{"controllers/ExamController.html":{}}}],["successresponse",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["successresponse(__namedparameters",{"_index":1304,"title":{},"body":{"miscellaneous/functions.html":{}}}],["such",{"_index":414,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["summary",{"_index":173,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["support",{"_index":1349,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supports",{"_index":469,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{}}}],["svg",{"_index":1455,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":893,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["t",{"_index":832,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":1258,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1257,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1018,"title":{},"body":{"interfaces/IStudent.html":{}}}],["template",{"_index":667,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["template.mimetype",{"_index":796,"title":{},"body":{"injectables/ExamService.html":{}}}],["templates",{"_index":675,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["test",{"_index":1335,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1338,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1337,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1333,"title":{},"body":{"index.html":{}}}],["text",{"_index":979,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{}}}],["thanks",{"_index":1378,"title":{},"body":{"index.html":{}}}],["there’s",{"_index":1002,"title":{},"body":{"interfaces/IResponse.html":{}}}],["this.accesstokenguard",{"_index":344,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.adminmodel(createadmindto",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.adminmodel.findone",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.adminservice.createadmin(createadmindto",{"_index":177,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.finduserbyemail(logindto.email",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.login(logindto",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguidemap[type]).flat",{"_index":353,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.cachemanager.get(cachekey",{"_index":865,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.cachemanager.get(key",{"_index":890,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.cachemanager.set(cachekey",{"_index":877,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.cachemanager.set(key",{"_index":891,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.connection.startsession",{"_index":573,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["this.createexamprovider.createexam(createexamdto",{"_index":783,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.examassignmentmodel",{"_index":842,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.examassignmentmodel.bulkwrite(operations",{"_index":591,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["this.exammodel.findbyid(examid",{"_index":786,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.exammodel.findbyidanddelete(examid",{"_index":792,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.examschema.findbyid(examid",{"_index":1181,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["this.examservice.createexam(createexamdto",{"_index":714,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.deletemcqexam(examid",{"_index":722,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.deleteoeexam(examid",{"_index":729,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.updatemcqexam(updateexamparamdto.examid",{"_index":719,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.updateoeexam(updateparamdto.examid",{"_index":726,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.extractrequestfromheader(request",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.fetchexamassignmentsproviders.getassignmentsforstudent(studentid",{"_index":1150,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.generateandcachequestions(studentid",{"_index":855,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.generatetokenprovider.signtoken(user._id.tohexstring",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getquestionmodel(exam.examtype",{"_index":880,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.insertstudentprovider.insertstudents(tutoriallist",{"_index":1149,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.ismodified('password",{"_index":121,"title":{},"body":{"classes/Admin.html":{}}}],["this.jwtconfiguration",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":910,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":908,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":906,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.mcqexammodel.create(createexamdto",{"_index":579,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["this.mcqmodel",{"_index":895,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.mcqquestionmodel.bulkwrite(operations",{"_index":1187,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["this.mcqquestionmodel.deletemany",{"_index":789,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.oemodel",{"_index":897,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.oequestionmodel.bulkwrite(operations",{"_index":1218,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["this.oequestionmodel.deletemany",{"_index":801,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.password",{"_index":124,"title":{},"body":{"classes/Admin.html":{}}}],["this.preparelistforbulkwrite(mcqlist",{"_index":1186,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":347,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.shuffleandselect(questions",{"_index":873,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.studentmodel",{"_index":1059,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["this.studentmodel.bulkwrite(operations",{"_index":1053,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["this.studentmodel.findone",{"_index":1141,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.studentservice.fetchstudentassignments(studentid",{"_index":1119,"title":{},"body":{"controllers/StudentController.html":{}}}],["this.studentservice.insertstudents(tutoriallist",{"_index":575,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["this.studentservice.loginstudent(loginstudentdto",{"_index":1117,"title":{},"body":{"controllers/StudentController.html":{}}}],["this.updatemcqexamprovider.updatemcqexam(examid",{"_index":785,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.updateoeexamprovider.updateoeexam(examid",{"_index":800,"title":{},"body":{"injectables/ExamService.html":{}}}],["through",{"_index":356,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/IMcqQuestion.html":{},"miscellaneous/functions.html":{}}}],["throw",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["thrown",{"_index":921,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["throws",{"_index":567,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["time",{"_index":422,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"index.html":{}}}],["time'})@isoptional()@isdate()@type(undefined",{"_index":430,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["times",{"_index":417,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["timestamps",{"_index":107,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["todo",{"_index":1221,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["tojson",{"_index":108,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["token",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{}}}],["token'})@apiresponse({status",{"_index":147,"title":{},"body":{"controllers/AdminController.html":{}}}],["token.guard",{"_index":207,"title":{},"body":{"modules/AdminModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:15",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:29",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:53",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":202,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AuthService.html":{}}}],["token.provider.ts",{"_index":900,"title":{},"body":{"classes/GenerateTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:14",{"_index":904,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["token.provider.ts:6",{"_index":902,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["tort",{"_index":1450,"title":{},"body":{"license.html":{}}}],["total",{"_index":510,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["touch",{"_index":1386,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":543,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["transactional",{"_index":1178,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["transfer",{"_index":406,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{}}}],["transform",{"_index":110,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/LoginStudentDto.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["transformer",{"_index":105,"title":{},"body":{"classes/Admin.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/LoginStudentDto.html":{},"dependencies.html":{}}}],["true",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"interfaces/IResponse.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["true})@exclude",{"_index":93,"title":{},"body":{"classes/Admin.html":{}}}],["try",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["tutorial",{"_index":538,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/InsertStudentProvider.html":{}}}],["tutoriallist",{"_index":531,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["tutoriallist.mimetype",{"_index":778,"title":{},"body":{"injectables/ExamService.html":{}}}],["twitter",{"_index":1392,"title":{},"body":{"index.html":{}}}],["two",{"_index":677,"title":{},"body":{"controllers/ExamController.html":{}}}],["type",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"controllers/StudentController.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["type.enum.ts",{"_index":1285,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":1464,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":1297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typeof",{"_index":959,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["types",{"_index":100,"title":{},"body":{"classes/Admin.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["types.objectid(studentid",{"_index":844,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["typescript",{"_index":1320,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":143,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{}}}],["unauthorizedexception",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/StudentService.html":{}}}],["unauthorizedexception('incorrect",{"_index":1148,"title":{},"body":{"injectables/StudentService.html":{}}}],["unauthorizedexception('invalid",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["uncaught",{"_index":918,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["undefined",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"interfaces/IResponse.html":{},"classes/McqQuestion.html":{}}}],["undefined})@apiresponse({status",{"_index":636,"title":{},"body":{"controllers/ExamController.html":{}}}],["undefined})@isenum(examtype",{"_index":445,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{}}}],["unhandled",{"_index":932,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["unique",{"_index":90,"title":{},"body":{"classes/Admin.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/McqQuestion.html":{},"classes/Student.html":{},"classes/UpdateExamParamDto.html":{}}}],["uniquely",{"_index":1023,"title":{},"body":{"interfaces/IStudent.html":{}}}],["unit",{"_index":1334,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":154,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["unlicensed",{"_index":1463,"title":{},"body":{"properties.html":{}}}],["update",{"_index":586,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["updated",{"_index":671,"title":{},"body":{"controllers/ExamController.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["updateexamparamdto",{"_index":663,"title":{"classes/UpdateExamParamDto.html":{}},"body":{"controllers/ExamController.html":{},"classes/UpdateExamParamDto.html":{},"coverage.html":{}}}],["updatemcqexam",{"_index":631,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["updatemcqexam(examid",{"_index":769,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["updatemcqexam(updateexamparamdto",{"_index":662,"title":{},"body":{"controllers/ExamController.html":{}}}],["updatemcqexamprovider",{"_index":734,"title":{"injectables/UpdateMcqExamProvider.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updateoeexam",{"_index":632,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["updateoeexam(examid",{"_index":771,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["updateoeexam(updateparamdto",{"_index":674,"title":{},"body":{"controllers/ExamController.html":{}}}],["updateoeexamprovider",{"_index":735,"title":{"injectables/UpdateOeExamProvider.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updateone",{"_index":583,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["updateparamdto",{"_index":687,"title":{},"body":{"controllers/ExamController.html":{}}}],["updates",{"_index":757,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"index.html":{}}}],["updating",{"_index":626,"title":{},"body":{"controllers/ExamController.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["upload",{"_index":646,"title":{},"body":{"controllers/ExamController.html":{}}}],["upload'})@apiconsumes('multipart/form",{"_index":634,"title":{},"body":{"controllers/ExamController.html":{}}}],["uploaded",{"_index":537,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["uploadedfile",{"_index":691,"title":{},"body":{"controllers/ExamController.html":{}}}],["uploadedfiles",{"_index":692,"title":{},"body":{"controllers/ExamController.html":{}}}],["uploading",{"_index":666,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["upsert",{"_index":590,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["uri",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":1154,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["use",{"_index":1411,"title":{},"body":{"license.html":{}}}],["useclass",{"_index":218,"title":{},"body":{"modules/AdminModule.html":{}}}],["used",{"_index":982,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":992,"title":{},"body":{"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["useinterceptors",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(fileinterceptor('mcqlist",{"_index":717,"title":{},"body":{"controllers/ExamController.html":{}}}],["useinterceptors(fileinterceptor('tutoriallist",{"_index":707,"title":{},"body":{"controllers/ExamController.html":{}}}],["useinterceptors(filesinterceptor('templates",{"_index":724,"title":{},"body":{"controllers/ExamController.html":{}}}],["user",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"interfaces/IResponse.html":{},"classes/LoginDto.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.[field",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user@example.com",{"_index":1072,"title":{},"body":{"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty()@isstring",{"_index":1066,"title":{},"body":{"classes/LoginDto.html":{}}}],["uses",{"_index":542,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["using",{"_index":1177,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"index.html":{}}}],["utility",{"_index":1305,"title":{},"body":{"miscellaneous/functions.html":{}}}],["valid",{"_index":777,"title":{},"body":{"injectables/ExamService.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["validates",{"_index":1173,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["validating",{"_index":993,"title":{},"body":{"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["validation",{"_index":151,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["validationschema",{"_index":270,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":395,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/UpdateExamParamDto.html":{},"dependencies.html":{}}}],["value",{"_index":1080,"title":{},"body":{"classes/LoginStudentDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value?.touppercase",{"_index":1081,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["values",{"_index":448,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["variable",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1471,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifies",{"_index":1171,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["version",{"_index":1461,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1357,"title":{},"body":{"index.html":{}}}],["virtuals",{"_index":109,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["visit",{"_index":1346,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1359,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":1435,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1431,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1329,"title":{},"body":{"index.html":{}}}],["website",{"_index":1390,"title":{},"body":{"index.html":{}}}],["whether",{"_index":1013,"title":{},"body":{"interfaces/IResponse.html":{},"license.html":{}}}],["without",{"_index":1407,"title":{},"body":{"license.html":{}}}],["working",{"_index":1344,"title":{},"body":{"index.html":{}}}],["world",{"_index":280,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":1168,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["writer",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["writer.ts",{"_index":997,"title":{},"body":{"interfaces/IResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["written",{"_index":991,"title":{},"body":{"interfaces/IOeQuestion.html":{}}}],["x",{"_index":1368,"title":{},"body":{"index.html":{}}}],["xlsx",{"_index":643,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"dependencies.html":{}}}],["yes",{"_index":645,"title":{},"body":{"controllers/ExamController.html":{},"classes/GenerateTokenProvider.html":{}}}],["you'd",{"_index":1382,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*#?&.]{8",{"_index":1070,"title":{},"body":{"classes/LoginDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":388,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&.])[a",{"_index":1069,"title":{},"body":{"classes/LoginDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":387,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["za",{"_index":386,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["zoom",{"_index":190,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/admin/auth/guards/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/admin/auth/guards/access-token.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/guards/access-token.guard.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/guards/access-token.guard.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    // Extract the token from the header\n    const token = this.extractRequestFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    \n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration,\n      );\n      request[REQUEST_USER_KEY] = payload;\n      \n    } catch (error) {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveAdminData.html":{"url":"interfaces/ActiveAdminData.html","title":"interface - ActiveAdminData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveAdminData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/interfaces/active-admin-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveAdminData {\n    sub: string;\n    name: string;\n    email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/schemas/admin.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/schemas/admin.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/schemas/admin.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/schemas/admin.schema.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport * as bcrypt from 'bcrypt';\nimport { InternalServerErrorException } from '@nestjs/common';\nimport { Exclude } from 'class-transformer';\n\nexport type AdminDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class Admin {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop({ required: true })\n  @Exclude()\n  password: string;\n}\n\nexport const AdminSchema = SchemaFactory.createForClass(Admin);\n\nAdminSchema.pre('save', async function () {\n  if (!this.isModified('password')) {\n    return;\n  }\n\n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n  } catch (error) {\n    throw new InternalServerErrorException('Error hashing password');\n  }\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAdmin(createAdminDto: CreateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@ApiOperation({summary: 'Create a new admin account'})@ApiCreatedResponse({description: 'Admin account successfully created'})@ApiUnauthorizedResponse({description: 'Unauthorized - Missing or invalid Bearer token'})@ApiResponse({status: 400, description: 'Bad Request - Validation failed'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAdminDto\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Param, Patch, Post } from '@nestjs/common';\nimport { AdminService } from './providers/admin.service';\nimport { CreateAdminDto } from './dtos/create-admin.dto';\nimport {\n  ApiTags,\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiCreatedResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\n\n@ApiTags('admin')\n@Controller('admin')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Create a new admin account' })\n  @ApiCreatedResponse({\n    description: 'Admin account successfully created'\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized - Missing or invalid Bearer token',\n  })\n  @ApiResponse({ status: 400, description: 'Bad Request - Validation failed' })\n  public async createAdmin(@Body() createAdminDto: CreateAdminDto) {\n    return this.adminService.createAdmin(createAdminDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nAdminService\n\nAdminService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAdminModule -->\n\nAuthService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminController } from './admin.controller';\nimport { AuthController } from './auth/auth.controller';\nimport { AuthService } from './auth/providers/auth.service';\nimport { AdminService } from './providers/admin.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Admin, AdminSchema } from './schemas/admin.schema';\nimport { GenerateTokenProvider } from './auth/providers/generate-token.provider';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from './auth/config/jwt.config';\nimport { ConfigModule } from '@nestjs/config';\nimport { AccessTokenGuard } from './auth/guards/access-token.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthenticationGuard } from './auth/guards/authentication.guard';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Admin.name,\n        schema: AdminSchema,\n      },\n    ]),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AdminController, AuthController],\n  providers: [\n    AuthService,\n    AdminService,\n    GenerateTokenProvider,\n    AccessTokenGuard,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n  ],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/providers/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAdmin\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(adminModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/admin/providers/admin.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAdmin(createAdminDto: CreateAdminDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAdminDto\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Admin, AdminDocument } from '../schemas/admin.schema';\nimport { Model } from 'mongoose';\nimport { CreateAdminDto } from '../dtos/create-admin.dto';\n\n@Injectable()\nexport class AdminService {\n  constructor(\n    @InjectModel(Admin.name)\n    private readonly adminModel: Model,\n  ) {}\n\n  public async findUserByEmail(email: string): Promise {\n    let user = await this.adminModel.findOne({ email });\n    if (!user) {\n      return null;\n    }\n\n    return user;\n  }\n\n  public async createAdmin(createAdminDto: CreateAdminDto): Promise {\n    const newAdmin = new this.adminModel(createAdminDto);\n    return await newAdmin.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nStudentModule\n\nStudentModule\n\nAppModule -->\n\nStudentModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            ExamModule\n                        \n                        \n                            StudentModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AdminModule } from './admin/admin.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ExamModule } from './exam/exam.module';\nimport { StudentModule } from './student/student.module';\nimport environmentValidation from './config/environment.validation';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport { CacheModule } from '@nestjs/cache-manager';\n\nconst ENV = process.env.NODE_ENV;\nconsole.log(ENV);\n\n@Module({\n  imports: [\n    AdminModule,\n    CacheModule.register({\n      isGlobal: true\n    }),\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      validationSchema: environmentValidation,\n      load: [appConfig, databaseConfig],\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        uri: configService.get('database.uri'),\n      }),\n    }),\n    ExamModule,\n    StudentModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.None)@UseInterceptors(ClassSerializerInterceptor)@ApiOperation({summary: 'Admin login'})@ApiResponse({description: 'Login successful'})@ApiBadRequestResponse({description: 'Invalid credentials or validation failed'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/auth/auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Post,\n  UseInterceptors,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiCreatedResponse,\n  ApiBadRequestResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './providers/auth.service';\nimport { LoginDto } from './dtos/login.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\n\n@ApiTags('admin')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post()\n  @Auth(AuthType.None)\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiOperation({ summary: 'Admin login' })\n  @ApiResponse({\n    description: 'Login successful'\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid credentials or validation failed',\n  })\n  public async login(@Body() loginDto: LoginDto) {\n    return await this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService, generateTokenProvider: GenerateTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/admin/auth/providers/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { successResponse } from 'src/utils/response-writer';\nimport * as bcrypt from 'bcrypt';\nimport { AdminService } from 'src/admin/providers/admin.service';\nimport { GenerateTokenProvider } from './generate-token.provider';\nimport { LoginDto } from '../dtos/login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly adminService: AdminService,\n\n    private readonly generateTokenProvider: GenerateTokenProvider,\n  ) {}\n\n  public async login(loginDto: LoginDto): Promise {\n    let user = await this.adminService.findUserByEmail(loginDto.email);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    let isPasswordValid = await bcrypt.compare(\n      loginDto.password,\n      user.password,\n    );\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const accessToken = await this.generateTokenProvider.signToken(user._id.toHexString(), {\n      email: user.email,\n      name: user.name,\n    });\n\n    return successResponse({\n      message: 'Login successful',\n      data: { accessToken },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/admin/auth/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuideMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/admin/auth/guards/authentication.guard.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/guards/authentication.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { AccessTokenGuard } from './access-token.guard';\nimport { Reflector } from '@nestjs/core';\nimport { AUTH_TYPE_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuideMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get authTypes from reflector\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    // create array of all the guards\n    const guards = authTypes.map((type) => this.authTypeGuideMap[type]).flat();\n\n    // Default error\n    const error = new UnauthorizedException();\n\n    // loop through guards, fire canActivate\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context),\n      ).catch((err) => {\n        err;\n      });\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dtos/create-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the admin', example: 'admin@example.com'})@IsEmail()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dtos/create-admin.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Full name of the admin', example: 'John Doe', minLength: 3})@IsString()@IsNotEmpty()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dtos/create-admin.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password (Minimum eight characters, at least one letter, one number, and one special character)', example: 'Passw0rd!', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dtos/create-admin.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateAdminDto {\n  @ApiProperty({\n    description: 'Full name of the admin',\n    example: 'John Doe',\n    minLength: 3,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  name: string;\n\n  @ApiProperty({\n    description: 'Email address of the admin',\n    example: 'admin@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({\n    description:\n      'Password (Minimum eight characters, at least one letter, one number, and one special character)',\n    example: 'Passw0rd!',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamAssignmentDto.html":{"url":"classes/CreateExamAssignmentDto.html","title":"class - CreateExamAssignmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamAssignmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam-assignment.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for assigning an exam to a student.\nContains identifiers for the exam and student, exam type,\nand optional scheduling details such as start and end times.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                endTime\n                            \n                            \n                                    \n                                    \n                                    \n                                exam\n                            \n                            \n                                    \n                                    \n                                examSchema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                startTime\n                            \n                            \n                                    \n                                    \n                                    \n                                student\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exam end time in ISO 8601 date-time format', example: '2025-06-04T10:00:00Z', required: false, type: String, format: 'date-time'})@IsOptional()@IsDate()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:91\n                        \n                    \n\n            \n                \n                    Optional end time of the exam in ISO 8601 date-time format.\nDefines when the exam will no longer be accessible.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        exam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the exam to assign', example: 'exam_abc123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:24\n                        \n                    \n\n            \n                \n                    Unique identifier of the exam to assign.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        examSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         examType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of the exam (MCQ or Open Ended)', enum: examType, example: undefined})@IsEnum(examType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:53\n                        \n                    \n\n            \n                \n                    The type of the exam.\nPossible values are defined in the examType enum,\ne.g., MCQ or Open Ended.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exam start time in ISO 8601 date-time format', example: '2025-06-04T09:00:00Z', required: false, type: String, format: 'date-time'})@IsOptional()@IsDate()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:72\n                        \n                    \n\n            \n                \n                    Optional start time of the exam in ISO 8601 date-time format.\nDefines when the exam becomes available to the student.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        student\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the student receiving the exam', example: 'student_xyz456'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:37\n                        \n                    \n\n            \n                \n                    Unique identifier of the student receiving the exam.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { examType } from '../enums/exam-type.enum';\nimport { Type } from 'class-transformer';\n\n/**\n * Data Transfer Object for assigning an exam to a student.\n * \n * Contains identifiers for the exam and student, exam type,\n * and optional scheduling details such as start and end times.\n */\nexport class CreateExamAssignmentDto {\n  /**\n   * Unique identifier of the exam to assign.\n   * \n   * @example 'exam_abc123'\n   */\n  @ApiProperty({\n    description: 'ID of the exam to assign',\n    example: 'exam_abc123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  exam: string;\n\n  /**\n   * Unique identifier of the student receiving the exam.\n   * \n   * @example 'student_xyz456'\n   */\n  @ApiProperty({\n    description: 'ID of the student receiving the exam',\n    example: 'student_xyz456',\n  })\n  @IsString()\n  @IsNotEmpty()\n  student: string;\n\n  /**\n   * The type of the exam.\n   * \n   * Possible values are defined in the examType enum,\n   * e.g., MCQ or Open Ended.\n   * \n   * @example examType.MCQ\n   */\n  @ApiProperty({\n    description: 'Type of the exam (MCQ or Open Ended)',\n    enum: examType,\n    example: examType.MCQ,\n  })\n  @IsEnum(examType)\n  examSchema: examType;\n\n  /**\n   * Optional start time of the exam in ISO 8601 date-time format.\n   * \n   * Defines when the exam becomes available to the student.\n   * \n   * @example '2025-06-04T09:00:00Z'\n   */\n  @ApiProperty({\n    description: 'Exam start time in ISO 8601 date-time format',\n    example: '2025-06-04T09:00:00Z',\n    required: false,\n    type: String,\n    format: 'date-time',\n  })\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  startTime?: Date;\n\n  /**\n   * Optional end time of the exam in ISO 8601 date-time format.\n   * \n   * Defines when the exam will no longer be accessible.\n   * \n   * @example '2025-06-04T10:00:00Z'\n   */\n  @ApiProperty({\n    description: 'Exam end time in ISO 8601 date-time format',\n    example: '2025-06-04T10:00:00Z',\n    required: false,\n    type: String,\n    format: 'date-time',\n  })\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  endTime?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new exam.\nThis DTO supports both multiple choice (MCQ) and open-ended exams. It ensures\nthat all required fields like course name, course code, duration, question count,\nand exam type are provided with appropriate validation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                courseCode\n                            \n                            \n                                    \n                                    \n                                    \n                                courseName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                    \n                                    \n                                examType\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                questionCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        courseCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique course code (minimum 6 characters)', example: 'CS101A', minLength: 6})@IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:46\n                        \n                    \n\n            \n                \n                    Unique course code (minimum 6 characters).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        courseName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the course for which the exam is being created', example: 'Computer Science 101'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:31\n                        \n                    \n\n            \n                \n                    Name of the course for which the exam is being created.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exam duration in minutes (minimum 10)', example: 60, minimum: 10})@IsInt()@IsNotEmpty()@Min(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:61\n                        \n                    \n\n            \n                \n                    Duration of the exam in minutes. Must be at least 10.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        examType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         examType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of exam: McqQuestion for MCQs or OeQuestion for Open-Ended', enum: examType, example: undefined})@IsEnum(examType, {message: 'examType must be either McqQuestion or OeQuestion'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:92\n                        \n                    \n\n            \n                \n                    Type of exam: McqQuestion for MCQs or OeQuestion for Open-Ended.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        questionCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of questions in the exam (minimum 1)', example: 20, minimum: 1})@IsInt()@IsNotEmpty()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:76\n                        \n                    \n\n            \n                \n                    Total number of questions in the exam. Must be at least 1.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsString,\n  Min,\n  MinLength,\n} from 'class-validator';\nimport { examType } from '../enums/exam-type.enum';\n\n/**\n * Data Transfer Object for creating a new exam.\n * \n * This DTO supports both multiple choice (MCQ) and open-ended exams. It ensures\n * that all required fields like course name, course code, duration, question count,\n * and exam type are provided with appropriate validation.\n */\nexport class CreateExamDto {\n  /**\n   * Name of the course for which the exam is being created.\n   * \n   * @example 'Computer Science 101'\n   */\n  @ApiProperty({\n    description: 'Name of the course for which the exam is being created',\n    example: 'Computer Science 101',\n  })\n  @IsString()\n  @IsNotEmpty()\n  courseName: string;\n\n  /**\n   * Unique course code (minimum 6 characters).\n   * \n   * @example 'CS101A'\n   */\n  @ApiProperty({\n    description: 'Unique course code (minimum 6 characters)',\n    example: 'CS101A',\n    minLength: 6,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  courseCode: string;\n\n  /**\n   * Duration of the exam in minutes. Must be at least 10.\n   * \n   * @example 60\n   */\n  @ApiProperty({\n    description: 'Exam duration in minutes (minimum 10)',\n    example: 60,\n    minimum: 10,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  @Min(10)\n  duration: number;\n\n  /**\n   * Total number of questions in the exam. Must be at least 1.\n   * \n   * @example 20\n   */\n  @ApiProperty({\n    description: 'Number of questions in the exam (minimum 1)',\n    example: 20,\n    minimum: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  @Min(1)\n  questionCount: number;\n\n  /**\n   * Type of exam: McqQuestion for MCQs or OeQuestion for Open-Ended.\n   * \n   * @example 'McqQuestion'\n   */\n  @ApiProperty({\n    description: 'Type of exam: McqQuestion for MCQs or OeQuestion for Open-Ended',\n    enum: examType,\n    example: examType.MCQ,\n  })\n  @IsEnum(examType, {\n    message: 'examType must be either McqQuestion or OeQuestion',\n  })\n  @IsNotEmpty()\n  examType: examType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateExamProvider.html":{"url":"injectables/CreateExamProvider.html","title":"injectable - CreateExamProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateExamProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/create-exam.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider responsible for creating exams and assigning them to students.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection, studentService: StudentService, mcqExamModel: Model, examAssignmentModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/create-exam.provider.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        studentService\n                                                  \n                                                        \n                                                                        StudentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mcqExamModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examAssignmentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExam(createExamDto: CreateExamDto, tutorialList: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/create-exam.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        Creates a new exam and assigns it to students parsed from the uploaded tutorial list.\n\nParses student data from file\nCreates an exam record\nAssigns exam to each student\nUses a transaction to ensure atomicity\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createExamDto\n                                            \n                                                            CreateExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExam creation data\n\n\n                                            \n                                        \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUploaded file containing student information\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Success response with created exam details\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { StudentService } from 'src/student/providers/student.service';\nimport { Connection, Model } from 'mongoose';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport { CreateExamAssignmentDto } from '../dtos/create-exam-assignment.dto';\nimport {\n  ExamAssignment,\n  ExamAssignmentDocument,\n} from '../schemas/exam-assigment.schema';\nimport { IResponse, successResponse } from 'src/utils/response-writer';\n\n/**\n * Provider responsible for creating exams and assigning them to students.\n */\n@Injectable()\nexport class CreateExamProvider {\n  constructor(\n    @InjectConnection()\n    private readonly connection: Connection,\n\n    @Inject(forwardRef(() => StudentService))\n    private readonly studentService: StudentService,\n\n    @InjectModel(Exam.name)\n    private readonly mcqExamModel: Model,\n\n    @InjectModel(ExamAssignment.name)\n    private readonly examAssignmentModel: Model,\n  ) {}\n\n  /**\n   * Creates a new exam and assigns it to students parsed from the uploaded tutorial list.\n   *\n   * - Parses student data from file\n   * - Creates an exam record\n   * - Assigns exam to each student\n   * - Uses a transaction to ensure atomicity\n   *\n   * @param createExamDto - Exam creation data\n   * @param tutorialList - Uploaded file containing student information\n   * @returns Success response with created exam details\n   *\n   * @throws {BadRequestException} If student list is empty or any DB operation fails\n   */\n  public async createExam(\n    createExamDto: CreateExamDto,\n    tutorialList: Express.Multer.File,\n  ): Promise {\n    const session = await this.connection.startSession();\n    session.startTransaction();\n\n    const students = await this.studentService.insertStudents(tutorialList);\n\n    if (!students || students.length === 0) {\n      throw new BadRequestException('No students found in the tutorial list');\n    }\n\n    try {\n      const exam = await this.mcqExamModel.create(createExamDto);\n      await exam.save({ session });\n\n      const operations = students.map((student) => ({\n        updateOne: {\n          filter: { exam: exam._id, student: student },\n          update: {\n            $set: {\n              exam: exam._id.toString(),\n              student: student,\n              examSchema: exam.examType,\n            } as CreateExamAssignmentDto,\n          },\n          upsert: true,\n        },\n      }));\n\n      await this.examAssignmentModel.bulkWrite(operations, { session });\n      await session.commitTransaction();\n\n      return successResponse({\n        message: 'Exam created successfully',\n        data: { exam },\n      });\n    } catch (error) {\n      console.error(error);\n      await session.abortTransaction();\n      throw new BadRequestException('Error creating exam');\n    } finally {\n      session.endSession();\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam.html":{"url":"classes/Exam.html","title":"class - Exam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/exam.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                courseCode\n                            \n                            \n                                    \n                                courseName\n                            \n                            \n                                    \n                                duration\n                            \n                            \n                                    \n                                examType\n                            \n                            \n                                    \n                                questionCount\n                            \n                            \n                                    \n                                    Optional\n                                questions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        courseCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        courseName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        examType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         examType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({enum: examType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        questionCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { examType } from '../enums/exam-type.enum';\n\nexport type ExamDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class Exam {\n  @Prop({ required: true })\n  courseName: string;\n\n  @Prop({ required: true })\n  courseCode: string;\n\n  @Prop({ required: true })\n  duration: number;\n\n  @Prop({ enum: examType })\n  examType: examType;\n\n  @Prop({ required: true })\n  questionCount: number;\n\n  @Prop({\n    type: [{ type: mongoose.Schema.Types.ObjectId, refPath: 'examType' }],\n  })\n  questions?: mongoose.Types.ObjectId[];\n}\n\nexport const ExamSchema = SchemaFactory.createForClass(Exam);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAssignment.html":{"url":"classes/ExamAssignment.html","title":"class - ExamAssignment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAssignment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/exam-assigment.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                endTime\n                            \n                            \n                                    \n                                exam\n                            \n                            \n                                    \n                                    Optional\n                                startTime\n                            \n                            \n                                    \n                                student\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam-assigment.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        exam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Exam\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Exam', index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam-assigment.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam-assigment.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        student\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Student\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Student', index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam-assigment.schema.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { Student } from 'src/student/schemas/student.schema';\nimport { Exam } from './exam.schema';\n\nexport type ExamAssignmentDocument = HydratedDocument;\n\n@Schema({\n  timestamps: false,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class ExamAssignment {\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Exam', index: true })\n  exam: Exam;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Student', index: true })\n  student: Student;\n\n  @Prop()\n  startTime?: Date;\n\n  @Prop()\n  endTime?: Date;\n}\n\nexport const ExamAssignmentSchema = SchemaFactory.createForClass(ExamAssignment)\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamController.html":{"url":"controllers/ExamController.html","title":"controller - ExamController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/exam.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling exam-related operations.\nSupports creating, updating, and deleting MCQ and open-ended (OE) exams.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createExam\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteMcqExam\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteOeExam\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateMcqExam\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateOeExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExam(createExamDto: CreateExamDto, tutorialList?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(undefined)@ApiOperation({summary: 'Create a new exam with an optional tutorial file upload'})@ApiConsumes('multipart/form-data')@ApiBody({description: 'Exam details and optional tutorial file', schema: undefined})@ApiResponse({status: 201, description: 'Exam created successfully'})@ApiResponse({status: 400, description: 'Invalid exam data'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:78\n                        \n                    \n\n\n            \n                \n                        Create a new exam.\nAccepts a tutorial list in .xlsx format and exam metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createExamDto\n                                            \n                                                            CreateExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing exam metadata\n\n\n                                            \n                                        \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nXLSX file upload with tutorial data\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Success response containing the created exam object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMcqExam(examId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('mcq/:examId')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete an MCQ exam by ID'})@ApiParam({name: 'examId', type: 'string', description: 'ID of the MCQ exam'})@ApiResponse({status: 200, description: 'Exam deleted successfully'})@ApiResponse({status: 404, description: 'Exam not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:132\n                        \n                    \n\n\n            \n                \n                        Delete an MCQ exam and its associated questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the MCQ exam\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Deletion success message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOeExam(examId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('oe/:examId')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete an OE exam by ID'})@ApiParam({name: 'examId', type: 'string', description: 'ID of the OE exam'})@ApiResponse({status: 200, description: 'Exam deleted successfully'})@ApiResponse({status: 404, description: 'Exam not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:187\n                        \n                    \n\n\n            \n                \n                        Delete an OE exam and its associated questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the OE exam\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Deletion confirmation\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMcqExam(updateExamParamDto: UpdateExamParamDto, mcqTemplate: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('mcq/:examId')@HttpCode(HttpStatus.OK)@UseInterceptors(undefined)@ApiOperation({summary: 'Update MCQ exam by uploading a new template file'})@ApiConsumes('multipart/form-data')@ApiParam({name: 'examId', type: 'string', description: 'ID of the MCQ exam'})@ApiBody({description: 'MCQ template file', schema: undefined})@ApiResponse({status: 200, description: 'MCQ exam updated successfully'})@ApiResponse({status: 400, description: 'Invalid file or parameters'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:113\n                        \n                    \n\n\n            \n                \n                        Upload a new MCQ template to update an existing exam.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updateExamParamDto\n                                            \n                                                            UpdateExamParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO with the exam ID\n\n\n                                            \n                                        \n                                        \n                                                mcqTemplate\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nXLSX file with updated MCQ questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Successful response containing the updated exam details\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOeExam(updateParamDto: UpdateExamParamDto, templates: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('oe/:examId')@HttpCode(HttpStatus.OK)@UseInterceptors(undefined)@ApiOperation({summary: 'Update Open-ended exam with two required templates (e.g. mark guide and answers)'})@ApiConsumes('multipart/form-data')@ApiParam({name: 'examId', type: 'string', description: 'ID of the OE exam'})@ApiBody({description: 'Two template files: mark guide and answers', schema: undefined})@ApiResponse({status: 200, description: 'Open-ended exam updated successfully'})@ApiResponse({status: 400, description: 'Invalid template files'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:168\n                        \n                    \n\n\n            \n                \n                        Update an OE exam with new marking guide and question templates.\nAccepts a .docx or .pdf marking guide and a .xlsx question file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updateParamDto\n                                            \n                                                            UpdateExamParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                templates\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of files (max 2): [marking guide, questions]\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Update result\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Patch,\n  Delete,\n  Param,\n  UseInterceptors,\n  UploadedFile,\n  UploadedFiles,\n  Body,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { CreateExamDto } from './dtos/create-exam.dto';\nimport { UpdateExamParamDto } from './dtos/update-exam-param.dto';\nimport { ExamService } from './providers/exam.service';\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiConsumes,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\n\n/**\n * Controller for handling exam-related operations.\n * Supports creating, updating, and deleting MCQ and open-ended (OE) exams.\n */\n@ApiBearerAuth()\n@ApiTags('admin')\n@Controller('exam')\nexport class ExamController {\n  constructor(private readonly examService: ExamService) {}\n\n  /**\n   * Create a new exam.\n   *\n   * Accepts a tutorial list in `.xlsx` format and exam metadata.\n   *\n   * @param createExamDto - DTO containing exam metadata\n   * @param tutorialList - XLSX file upload with tutorial data\n   * @returns Success response containing the created exam object\n   */\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @UseInterceptors(FileInterceptor('tutorialList'))\n  @ApiOperation({ summary: 'Create a new exam with an optional tutorial file upload' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Exam details and optional tutorial file',\n    schema: {\n      type: 'object',\n      properties: {\n        courseName: { type: 'string', example: 'Introduction to Computing' },\n        courseCode: { type: 'string', example: 'CSC101' },\n        duration: { type: 'integer', example: 60 },\n        questionCount: { type: 'integer', example: 20 },\n        examType: {\n          type: 'string',\n          enum: ['McqQuestion', 'OeQuestion'],\n          example: 'McqQuestion',\n        },\n        tutorialList: {\n          type: 'string',\n          format: 'binary',\n          description: 'Optional tutorial file upload',\n        },\n      },\n      required: ['courseName', 'courseCode', 'duration', 'questionCount', 'examType'],\n    },\n  })\n  @ApiResponse({ status: 201, description: 'Exam created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid exam data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  public async createExam(\n    @Body() createExamDto: CreateExamDto,\n    @UploadedFile() tutorialList?: Express.Multer.File,\n  ) {\n    return this.examService.createExam(createExamDto, tutorialList);\n  }\n\n  /**\n   * Upload a new MCQ template to update an existing exam.\n   *\n   * @param updateExamParamDto - DTO with the exam ID\n   * @param mcqTemplate - XLSX file with updated MCQ questions\n   * @returns Successful response containing the updated exam details\n   */\n  @Patch('mcq/:examId')\n  @HttpCode(HttpStatus.OK)\n  @UseInterceptors(FileInterceptor('mcqList'))\n  @ApiOperation({ summary: 'Update MCQ exam by uploading a new template file' })\n  @ApiConsumes('multipart/form-data')\n  @ApiParam({ name: 'examId', type: 'string', description: 'ID of the MCQ exam' })\n  @ApiBody({\n    description: 'MCQ template file',\n    schema: {\n      type: 'object',\n      properties: {\n        mcqList: {\n          type: 'string',\n          format: 'binary',\n          description: 'New MCQ template file',\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 200, description: 'MCQ exam updated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid file or parameters' })\n  public async updateMcqExam(\n    @Param() updateExamParamDto: UpdateExamParamDto,\n    @UploadedFile() mcqTemplate: Express.Multer.File,\n  ) {\n    return this.examService.updateMcqExam(updateExamParamDto.examId, mcqTemplate);\n  }\n\n  /**\n   * Delete an MCQ exam and its associated questions.\n   *\n   * @param examId - ID of the MCQ exam\n   * @returns Deletion success message\n   */\n  @Delete('mcq/:examId')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Delete an MCQ exam by ID' })\n  @ApiParam({ name: 'examId', type: 'string', description: 'ID of the MCQ exam' })\n  @ApiResponse({ status: 200, description: 'Exam deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Exam not found' })\n  public async deleteMcqExam(@Param('examId') examId: string) {\n    return this.examService.deleteMcqExam(examId);\n  }\n\n  /**\n   * Update an OE exam with new marking guide and question templates.\n   *\n   * Accepts a `.docx` or `.pdf` marking guide and a `.xlsx` question file.\n   *\n   * @param updateExamParamDto - DTO with the exam ID\n   * @param templates - Array of files (max 2): [marking guide, questions]\n   * @returns Update result\n   */\n  @Patch('oe/:examId')\n  @HttpCode(HttpStatus.OK)\n  @UseInterceptors(FilesInterceptor('templates', 2))\n  @ApiOperation({ summary: 'Update Open-ended exam with two required templates (e.g. mark guide and answers)' })\n  @ApiConsumes('multipart/form-data')\n  @ApiParam({ name: 'examId', type: 'string', description: 'ID of the OE exam' })\n  @ApiBody({\n    description: 'Two template files: mark guide and answers',\n    schema: {\n      type: 'object',\n      properties: {\n        templates: {\n          type: 'array',\n          items: {\n            type: 'string',\n            format: 'binary',\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 200, description: 'Open-ended exam updated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid template files' })\n  public async updateOeExam(\n    @Param() updateParamDto: UpdateExamParamDto,\n    @UploadedFiles() templates: Express.Multer.File[],\n  ) {\n    return this.examService.updateOeExam(updateParamDto.examId, templates);\n  }\n\n  /**\n   * Delete an OE exam and its associated questions.\n   *\n   * @param examId - ID of the OE exam\n   * @returns Deletion confirmation\n   */\n  @Delete('oe/:examId')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Delete an OE exam by ID' })\n  @ApiParam({ name: 'examId', type: 'string', description: 'ID of the OE exam' })\n  @ApiResponse({ status: 200, description: 'Exam deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Exam not found' })\n  public async deleteOeExam(@Param('examId') examId: string) {\n    return this.examService.deleteOeExam(examId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamModule.html":{"url":"modules/ExamModule.html","title":"module - ExamModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\n\nFetchExamAssignmentsProvider \n\nFetchExamAssignmentsProvider \n\n\n\nExamModule\n\nExamModule\n\nFetchExamAssignmentsProvider  -->\n\nExamModule->FetchExamAssignmentsProvider \n\n\n\n\n\nCreateExamProvider\n\nCreateExamProvider\n\nExamModule -->\n\nCreateExamProvider->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nFetchExamAssignmentsProvider\n\nFetchExamAssignmentsProvider\n\nExamModule -->\n\nFetchExamAssignmentsProvider->ExamModule\n\n\n\n\n\nUpdateMcqExamProvider\n\nUpdateMcqExamProvider\n\nExamModule -->\n\nUpdateMcqExamProvider->ExamModule\n\n\n\n\n\nUpdateOeExamProvider\n\nUpdateOeExamProvider\n\nExamModule -->\n\nUpdateOeExamProvider->ExamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exam/exam.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateExamProvider\n                        \n                        \n                            ExamService\n                        \n                        \n                            FetchExamAssignmentsProvider\n                        \n                        \n                            UpdateMcqExamProvider\n                        \n                        \n                            UpdateOeExamProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FetchExamAssignmentsProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ExamController } from './exam.controller';\nimport { ExamService } from './providers/exam.service';\nimport { StudentModule } from 'src/student/student.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Exam, ExamSchema } from './schemas/exam.schema';\nimport { ExamAssignment, ExamAssignmentSchema } from './schemas/exam-assigment.schema';\nimport { CreateExamProvider } from './providers/create-exam.provider';\nimport { UpdateMcqExamProvider } from './providers/update-mcq-exam.provider';\nimport { McqQuestion, McqQuestionSchema } from './schemas/mcq/mcq-question.schema';\nimport { UpdateOeExamProvider } from './providers/update-oe-exam.provider';\nimport { OeQuestion, OeQuestionSchema } from './schemas/oe/oe-question.schema';\nimport { FetchExamAssignmentsProvider } from './providers/fetch-exam-assignments.provider';\n\n@Module({\n  controllers: [ExamController],\n  providers: [ExamService, CreateExamProvider, UpdateMcqExamProvider, UpdateOeExamProvider, FetchExamAssignmentsProvider],\n  imports: [\n    forwardRef(() => StudentModule),\n\n    MongooseModule.forFeature([\n      {\n        name: Exam.name,\n        schema: ExamSchema,\n      },\n      {\n        name: ExamAssignment.name,\n        schema: ExamAssignmentSchema,\n      },\n      {\n        name: McqQuestion.name,\n        schema: McqQuestionSchema\n      },\n      {\n        name: OeQuestion.name,\n        schema: OeQuestionSchema\n      }\n    ]),\n  ],\n  exports: [FetchExamAssignmentsProvider]\n})\nexport class ExamModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamService.html":{"url":"injectables/ExamService.html","title":"injectable - ExamService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/exam.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing exams and their related operations.\nDelegates creation and updates to appropriate providers based on exam type.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createExam\n                            \n                            \n                                    Public\n                                    Async\n                                deleteMcqExam\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOeExam\n                            \n                            \n                                    Public\n                                    Async\n                                updateMcqExam\n                            \n                            \n                                    Public\n                                    Async\n                                updateOeExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createExamProvider: CreateExamProvider, updateMcqExamProvider: UpdateMcqExamProvider, updateOeExamProvider: UpdateOeExamProvider, examModel: Model, mcqQuestionModel: Model, oeQuestionModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/exam.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createExamProvider\n                                                  \n                                                        \n                                                                        CreateExamProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateMcqExamProvider\n                                                  \n                                                        \n                                                                        UpdateMcqExamProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateOeExamProvider\n                                                  \n                                                        \n                                                                        UpdateOeExamProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mcqQuestionModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oeQuestionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExam(createExamDto: CreateExamDto, tutorialList: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Creates a new exam and assigns it to students from the uploaded list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createExamDto\n                                            \n                                                            CreateExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExam creation data\n\n\n                                            \n                                        \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nXLSX file containing student list\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response object with created exam\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMcqExam(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Deletes an MCQ exam and all its associated questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to delete\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response confirming deletion\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOeExam(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:164\n                        \n                    \n\n\n            \n                \n                        Deletes an open-ended (OE) exam and all its associated questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to delete\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response confirming deletion\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMcqExam(examId: string, mcqTemplate: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Updates an existing MCQ exam by uploading new question templates.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to update\n\n\n                                            \n                                        \n                                        \n                                                mcqTemplate\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nXLSX file containing MCQ questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response on successful update\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOeExam(examId: string, templates: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Updates an open-ended (OE) exam with new questions and marking guide.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to update\n\n\n                                            \n                                        \n                                        \n                                                templates\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of files including XLSX for questions and DOCX/PDF for marking guide\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response on successful update\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { CreateExamProvider } from './create-exam.provider';\nimport { UpdateMcqExamProvider } from './update-mcq-exam.provider';\nimport { Model } from 'mongoose';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { successResponse } from 'src/utils/response-writer';\nimport { McqQuestion } from '../schemas/mcq/mcq-question.schema';\nimport { UpdateOeExamProvider } from './update-oe-exam.provider';\nimport { OeQuestion } from '../schemas/oe/oe-question.schema';\n\n/**\n * Service responsible for managing exams and their related operations.\n * Delegates creation and updates to appropriate providers based on exam type.\n */\n@Injectable()\nexport class ExamService {\n  constructor(\n    private readonly createExamProvider: CreateExamProvider,\n    private readonly updateMcqExamProvider: UpdateMcqExamProvider,\n    private readonly updateOeExamProvider: UpdateOeExamProvider,\n\n    @InjectModel(Exam.name)\n    private readonly examModel: Model,\n\n    @InjectModel(McqQuestion.name)\n    private readonly mcqQuestionModel: Model,\n\n    @InjectModel(OeQuestion.name)\n    private readonly oeQuestionModel: Model,\n  ) {}\n\n  /**\n   * Creates a new exam and assigns it to students from the uploaded list.\n   *\n   * @param createExamDto - Exam creation data\n   * @param tutorialList - XLSX file containing student list\n   * @returns Response object with created exam\n   *\n   * @throws {BadRequestException} If file is not a valid .xlsx format\n   */\n  public async createExam(\n    createExamDto: CreateExamDto,\n    tutorialList: Express.Multer.File,\n  ) {\n    if (\n      !tutorialList ||\n      tutorialList.mimetype !==\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ) {\n      throw new BadRequestException('Only .xlsx files are allowed');\n    }\n\n    return this.createExamProvider.createExam(createExamDto, tutorialList);\n  }\n\n  /**\n   * Updates an existing MCQ exam by uploading new question templates.\n   *\n   * @param examId - ID of the exam to update\n   * @param mcqTemplate - XLSX file containing MCQ questions\n   * @returns Response on successful update\n   *\n   * @throws {BadRequestException} If file is not a valid .xlsx format\n   */\n  public async updateMcqExam(examId: string, mcqTemplate: Express.Multer.File) {\n    if (\n      !mcqTemplate ||\n      mcqTemplate.mimetype !==\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ) {\n      throw new BadRequestException('Only .xlsx files are allowed');\n    }\n\n    return this.updateMcqExamProvider.updateMcqExam(examId, mcqTemplate);\n  }\n\n  /**\n   * Deletes an MCQ exam and all its associated questions.\n   *\n   * @param examId - ID of the exam to delete\n   * @returns Response confirming deletion\n   *\n   * @throws {NotFoundException} If exam is not found\n   */\n  public async deleteMcqExam(examId: string) {\n    const exam = await this.examModel.findById(examId);\n\n    if (!exam) {\n      throw new NotFoundException('Exam not found');\n    }\n\n    if (exam.questions?.length) {\n      await this.mcqQuestionModel.deleteMany({ _id: { $in: exam.questions } });\n    }\n\n    await this.examModel.findByIdAndDelete(examId);\n\n    return successResponse({ message: 'Exam and related questions deleted' });\n  }\n\n  /**\n   * Updates an open-ended (OE) exam with new questions and marking guide.\n   *\n   * @param examId - ID of the exam to update\n   * @param templates - Array of files including XLSX for questions and DOCX/PDF for marking guide\n   * @returns Response on successful update\n   *\n   * @throws {BadRequestException} If required files are missing or invalid\n   */\n  public async updateOeExam(examId: string, templates: Express.Multer.File[]) {\n    let mGuide: Express.Multer.File;\n    let oeTemplate: Express.Multer.File;\n\n    if (!templates) {\n      throw new BadRequestException(\n        'You need to provide the templates to update exam',\n      );\n    }\n\n    for (const template of templates) {\n      if (\n        template.mimetype ===\n          'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||\n        template.mimetype === 'application/pdf'\n      ) {\n        mGuide = template;\n      } else if (\n        template.mimetype ===\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      ) {\n        oeTemplate = template;\n      }\n    }\n\n    if (!mGuide) {\n      throw new BadRequestException(\n        'Please provide the marking guide in .docx or .pdf format',\n      );\n    }\n\n    if (!oeTemplate) {\n      throw new BadRequestException(\n        'Please provide the questions in .xlsx format',\n      );\n    }\n\n    return this.updateOeExamProvider.updateOeExam(examId, mGuide, oeTemplate);\n  }\n\n  /**\n   * Deletes an open-ended (OE) exam and all its associated questions.\n   *\n   * @param examId - ID of the exam to delete\n   * @returns Response confirming deletion\n   *\n   * @throws {NotFoundException} If exam is not found\n   */\n  public async deleteOeExam(examId: string) {\n    const exam = await this.examModel.findById(examId);\n\n    if (!exam) {\n      throw new NotFoundException('Exam not found');\n    }\n\n    if (exam.questions?.length) {\n      await this.oeQuestionModel.deleteMany({ _id: { $in: exam.questions } });\n    }\n\n    await this.examModel.findByIdAndDelete(examId);\n\n    return successResponse({ message: 'Exam and related questions deleted' });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FetchExamAssignmentsProvider.html":{"url":"injectables/FetchExamAssignmentsProvider.html","title":"injectable - FetchExamAssignmentsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FetchExamAssignmentsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/fetch-exam-assignments.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider class to generate and/or fetch assignment for each student\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateAndCacheQuestions\n                            \n                            \n                                    Async\n                                getAssignmentsForStudent\n                            \n                            \n                                    Private\n                                getQuestionModel\n                            \n                            \n                                    Private\n                                shuffleAndSelect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(examAssignmentModel: Model, mcqModel: Model, oeModel: Model, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/fetch-exam-assignments.provider.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        examAssignmentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mcqModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oeModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateAndCacheQuestions\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAndCacheQuestions(studentId: string, exam: ExamDocument)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:83\n                        \n                    \n\n\n            \n                \n                        Generate and cache a list of randomized question IDs for a student-exam combo\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                exam\n                                            \n                                                            ExamDocument\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAssignmentsForStudent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAssignmentsForStudent(studentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:44\n                        \n                    \n\n\n            \n                \n                        Get all exam assignments for a given student and include cached/randomized questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getQuestionModel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQuestionModel(type: examType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:139\n                        \n                    \n\n\n            \n                \n                        Get Mongoose model based on examType enum\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            examType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Model\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shuffleAndSelect\n                        \n                    \n                \n            \n            \n                \n                        \n                    shuffleAndSelect(array: T[], count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:127\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Shuffle an array and return count number of items\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                array\n                                            \n                                                        T[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Inject,\n    Injectable,\n    NotFoundException,\n    InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Cache } from 'cache-manager';\n\nimport { ExamAssignment, ExamAssignmentDocument } from '../schemas/exam-assigment.schema';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { examType } from '../enums/exam-type.enum';\nimport { Types } from 'mongoose';\n\n/**\n * Cache for just 1hour\n */\nconst CACHE_TTL = 3600;\n\n/**\n * Provider class to generate and/or fetch assignment for each student\n */\n@Injectable()\nexport class FetchExamAssignmentsProvider {\n    constructor(\n        @InjectModel(ExamAssignment.name)\n        private readonly examAssignmentModel: Model,\n\n        @InjectModel('McqQuestion')\n        private readonly mcqModel: Model,\n\n        @InjectModel('OeQuestion')\n        private readonly oeModel: Model,\n\n        @Inject(CACHE_MANAGER)\n        private readonly cacheManager: Cache,\n    ) { }\n\n    /**\n     * Get all exam assignments for a given student and include cached/randomized questions.\n     */\n    async getAssignmentsForStudent(studentId: string) {\n        const assignments = await this.examAssignmentModel\n            .find({ student: new Types.ObjectId(studentId) })\n            .populate({\n                path: 'exam',\n                select: 'courseName courseCode duration examType questionCount questions',\n            })\n            .lean()\n            .exec();\n\n        if (!assignments.length) {\n            throw new NotFoundException(`No exam assignments found for student ${studentId}`);\n        }\n\n        const results = await Promise.all(\n            assignments.map(async (assignment) => {\n                const exam = assignment.exam as unknown as ExamDocument;\n\n                if (!exam || !exam.questions?.length) return null;\n\n                const examId = exam._id.toString();\n                await this.generateAndCacheQuestions(studentId, exam);\n\n                return {\n                    examId,\n                    courseName: exam.courseName,\n                    courseCode: exam.courseCode,\n                    duration: exam.duration,\n                    examType: exam.examType\n                };\n            }),\n        );\n\n        return results.filter(Boolean); // Remove nulls\n    }\n\n    /**\n     * Generate and cache a list of randomized question IDs for a student-exam combo\n     */\n    async generateAndCacheQuestions(studentId: string, exam: ExamDocument): Promise {\n        const examId = exam._id.toString();\n        const cacheKey = `exam-questions:${studentId}:${examId}`;\n\n        // Return cached question IDs if available\n        const cached = await this.cacheManager.get(cacheKey);\n        if (cached) return cached;\n\n        const questions = exam.questions;\n        if (!questions?.length) {\n            throw new Error(`No questions available for exam ${examId}`);\n        }\n\n        if (exam.questionCount > questions.length) {\n            throw new Error(`Exam ${examId} requests ${exam.questionCount} questions but only ${questions.length} are available`);\n        }\n\n        const selected = this.shuffleAndSelect(questions, exam.questionCount);\n        const questionIds = selected.map((q) => q.toString());\n\n        // Cache the selected question IDs\n        await this.cacheManager.set(cacheKey, questionIds, CACHE_TTL);\n\n        // Load full question objects and cache each individually\n        const model = this.getQuestionModel(exam.examType);\n        const fullQuestions = await model.find({ _id: { $in: selected } }).lean().exec();\n\n        await Promise.all(\n            fullQuestions.map(async (question) => {\n                const qid = question._id.toString();\n                const key = `question:${qid}`;\n                const exists = await this.cacheManager.get(key);\n                if (!exists) {\n                    await this.cacheManager.set(key, question, CACHE_TTL);\n                }\n            }),\n        );\n\n        return questionIds;\n    }\n\n    /**\n     * Shuffle an array and return `count` number of items\n     */\n    private shuffleAndSelect(array: T[], count: number): T[] {\n        const copy = [...array];\n        for (let i = 0; i  {\n        switch (type) {\n            case examType.MCQ:\n                return this.mcqModel;\n            case examType.OE:\n                return this.oeModel;\n            default:\n                throw new InternalServerErrorException(`Unknown exam type: ${type}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateTokenProvider.html":{"url":"classes/GenerateTokenProvider.html","title":"class - GenerateTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/providers/generate-token.provider.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/admin/auth/providers/generate-token.provider.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(adminId: string, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/providers/generate-token.provider.ts:14\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adminId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { Inject } from '@nestjs/common';\n\nexport class GenerateTokenProvider {\n  constructor(\n    private readonly jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(adminId: string, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: adminId,\n        ...payload,\n      },\n      {\n        secret: this.jwtConfiguration.secret,\n        expiresIn: this.jwtConfiguration.accessTokenTtl,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalHttpExceptionFilter.html":{"url":"classes/GlobalHttpExceptionFilter.html","title":"class - GlobalHttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalHttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/global-http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Global HTTP exception filter to handle all uncaught exceptions.\nThis filter catches all exceptions thrown during request handling and\nformats the response into a consistent JSON structure. It extracts the\nHTTP status code and message from either standard HttpException or\nother unknown exceptions, providing a default 500 status for unhandled errors.\nExample output:\nExample :{\n  \"success\": false,\n  \"message\": \"Invalid input provided\"\n}\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/global-http-exception.filter.ts:35\n                        \n                    \n\n\n            \n                \n                        Method that handles caught exceptions and sends a formatted error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thrown exception object.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Global HTTP exception filter to handle all uncaught exceptions.\n *\n * This filter catches all exceptions thrown during request handling and\n * formats the response into a consistent JSON structure. It extracts the\n * HTTP status code and message from either standard `HttpException` or\n * other unknown exceptions, providing a default 500 status for unhandled errors.\n *\n * Example output:\n * ```json\n * {\n *   \"success\": false,\n *   \"message\": \"Invalid input provided\"\n * }\n * ```\n */\n@Catch()\nexport class GlobalHttpExceptionFilter implements ExceptionFilter {\n\n  /**\n   * Method that handles caught exceptions and sends a formatted error response.\n   *\n   * @param exception - The thrown exception object.\n   * @param host - The current execution context.\n   */\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const exceptionResponse: any =\n      exception instanceof HttpException\n        ? exception.getResponse()\n        : { message: exception.message || 'Internal server error' };\n\n    const message =\n      typeof exceptionResponse === 'string'\n        ? exceptionResponse\n        : Array.isArray(exceptionResponse?.message)\n          ? exceptionResponse.message[0]\n          : exceptionResponse?.message || 'An error occurred';\n\n    return response.status(status).json({ success: false, message: message });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMcqQuestion.html":{"url":"interfaces/IMcqQuestion.html","title":"interface - IMcqQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMcqQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/mcq-question.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the structure of a Multiple Choice Question (MCQ).\nEach MCQ includes a question, four possible answers labeled A through D,\nand the correct answer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            A\n                                        \n                                \n                                \n                                        \n                                            B\n                                        \n                                \n                                \n                                        \n                                            C\n                                        \n                                \n                                \n                                        \n                                            Correct Answer\n                                        \n                                \n                                \n                                        \n                                            D\n                                        \n                                \n                                \n                                        \n                                            Question\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        A\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        A:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Option A.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        B\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        B:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Option B.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        C\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        C:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Option C.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Correct Answer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Correct Answer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer (should match one of A, B, C, or D).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        D\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        D:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Option D.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Question\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Question:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text of the question.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IMcqQuestion {\n  /**\n   * The text of the question.\n   */\n  Question: string;\n\n  /**\n   * Option A.\n   */\n  A: string;\n\n  /**\n   * Option B.\n   */\n  B: string;\n\n  /**\n   * Option C.\n   */\n  C: string;\n\n  /**\n   * Option D.\n   */\n  D: string;\n\n  /**\n   * The correct answer (should match one of A, B, C, or D).\n   */\n  'Correct Answer': string;\n}\n\n/**\n * An array of the expected keys for a valid MCQ question object.\n *\n * This can be used for validation or checking the shape of imported data.\n */\nexport const iMcqQuestionExpectedKeys: (keyof IMcqQuestion)[] = [\n  'Question',\n  'A',\n  'B',\n  'C',\n  'D',\n  'Correct Answer',\n];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IOeQuestion.html":{"url":"interfaces/IOeQuestion.html","title":"interface - IOeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IOeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/oe-question.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the structure of an Open-Ended (OE) question.\nThis type of question contains only the question text and expects a written response from the student.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Question\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Question\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Question:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text of the open-ended question.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IOeQuestion {\n  /**\n   * The text of the open-ended question.\n   */\n  Question: string;\n}\n\n/**\n * An array of the expected keys for a valid open-ended question object.\n *\n * Useful for validating imported data or ensuring consistency.\n */\nexport const iOeExpectedKeys: (keyof IOeQuestion)[] = ['Question'];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IResponse.html":{"url":"interfaces/IResponse.html","title":"interface - IResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response-writer.ts\n        \n\n\n            \n                Description\n            \n            \n                Standard interface for API responses.\nThis structure is used to return a consistent response format across all endpoints.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The actual response payload.\n\nCan be null or undefined if there’s no data to return.\nThe structure depends on the specific endpoint.\n\nExamples:\n\nA created user object.\nAn array of exams.\nA single exam result.\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A descriptive message providing additional context about the result of the operation.\nFor example:\n\n\"Exam created successfully\" for successful actions.\n\"Invalid exam ID\" for errors.\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether the operation was successful.\n\ntrue if the request was handled successfully.\nfalse if an error occurred.\n\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export function successResponse({\n  message,\n  data,\n}: {\n  message: string;\n  data?: any;\n}): IResponse {\n  return {\n    success: true,\n    message,\n    data,\n  };\n}\n\n\n/**\n * Standard interface for API responses.\n * \n * This structure is used to return a consistent response format across all endpoints.\n */\nexport interface IResponse {\n  /**\n   * Indicates whether the operation was successful.\n   * - `true` if the request was handled successfully.\n   * - `false` if an error occurred.\n   */\n  success: boolean;\n\n  /**\n   * A descriptive message providing additional context about the result of the operation.\n   * \n   * For example:\n   * - `\"Exam created successfully\"` for successful actions.\n   * - `\"Invalid exam ID\"` for errors.\n   */\n  message: string;\n\n  /**\n   * The actual response payload.\n   * \n   * - Can be `null` or `undefined` if there’s no data to return.\n   * - The structure depends on the specific endpoint.\n   * \n   * Examples:\n   * - A created user object.\n   * - An array of exams.\n   * - A single exam result.\n   */\n  data?: any;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStudent.html":{"url":"interfaces/IStudent.html","title":"interface - IStudent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStudent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/student.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a student assigned to take an exam.\nThis includes the student's full name and matriculation number.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FullName\n                                        \n                                \n                                \n                                        \n                                            Matric No\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The full name of the student.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Matric No\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Matric No:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The matriculation number uniquely identifying the student.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IStudent {\n  /**\n   * The full name of the student.\n   */\n  'FullName': string;\n\n  /**\n   * The matriculation number uniquely identifying the student.\n   */\n  'Matric No': string;\n}\n\n/**\n * List of expected keys in a valid student object.\n *\n * This is useful for validating structured data such as CSV or Excel file imports.\n */\nexport const iStudentExpectedKeys: (keyof IStudent)[] = [\n  'FullName',\n  'Matric No',\n];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsertStudentProvider.html":{"url":"injectables/InsertStudentProvider.html","title":"injectable - InsertStudentProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsertStudentProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/providers/insert-student.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                insertStudents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(studentModel: Model, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/student/providers/insert-student.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        studentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        insertStudents\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertStudents(tutorialList: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/insert-student.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport { Student, StudentDocument } from '../schemas/student.schema';\nimport { Connection, Model } from 'mongoose';\nimport { parseTemplate } from 'src/utils/template-parser';\nimport { IStudent, iStudentExpectedKeys } from 'src/utils/interfaces/student.interface';\n\n@Injectable()\nexport class InsertStudentProvider {\n    constructor(@InjectModel(Student.name)\n    private readonly studentModel: Model,\n        @InjectConnection()\n        private readonly connection: Connection,) { }\n\n    public async insertStudents(\n        tutorialList: Express.Multer.File,\n    ): Promise {\n        let insertedStudentIds: string[] = [];\n\n        const session = await this.connection.startSession();\n        session.startTransaction();\n\n        try {\n            // Extract student data from the tutorial list template\n            const students = parseTemplate(\n                tutorialList,\n                iStudentExpectedKeys,\n            );\n\n            const operations = students\n                .filter((student) => student['Matric No'])\n                .map((student) => {\n                    const mappedStudent = {\n                        matricNo: student['Matric No'],\n                        fullName: student['FullName'],\n                    };\n\n                    return {\n                        updateOne: {\n                            filter: { matricNo: mappedStudent.matricNo },\n                            update: { $set: mappedStudent },\n                            upsert: true,\n                        },\n                    };\n                });\n\n            await this.studentModel.bulkWrite(operations, { session });\n\n            await this.studentModel.bulkWrite(operations, { session });\n\n            // Fetch all affected student IDs\n            const affectedMatricNos = students.map((s) => s['Matric No']);\n            const affectedStudents = await this.studentModel\n                .find({ matricNo: { $in: affectedMatricNos } }, '_id')\n                .session(session);\n\n            insertedStudentIds = affectedStudents.map((s) => s._id.toString());\n\n            await session.commitTransaction();\n\n            return insertedStudentIds;\n        } catch (error) {\n            await session.abortTransaction();\n            throw new InternalServerErrorException(\n                error.message || 'Failed to insert students',\n            );\n        } finally {\n            await session.endSession();\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the user', example: 'user@example.com'})@IsEmail()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/auth/dtos/login.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password (minimum eight characters, at least one letter, one number, and one special character)', example: 'P@ssw0rd!', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&.])[A-Za-z\\d@$!%*#?&.]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/auth/dtos/login.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email address of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({\n    description:\n      'Password (minimum eight characters, at least one letter, one number, and one special character)',\n    example: 'P@ssw0rd!',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&.])[A-Za-z\\d@$!%*#?&.]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginStudentDto.html":{"url":"classes/LoginStudentDto.html","title":"class - LoginStudentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginStudentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/dtos/login-student.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                matricNo\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        matricNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/login-student.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/login-student.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from \"class-transformer\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class LoginStudentDto {\n    @IsString()\n    @IsNotEmpty()\n    @Transform(({ value }) => value?.toUpperCase())\n    matricNo: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mcq.html":{"url":"classes/Mcq.html","title":"class - Mcq","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mcq\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/mcq.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/mcq.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/mcq.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/mcq.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Mcq {\n  question: string;\n  options: string[];\n  answer: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/McqQuestion.html":{"url":"classes/McqQuestion.html","title":"class - McqQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  McqQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/mcq/mcq-question.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                            \n                                    \n                                options\n                            \n                            \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/mcq/mcq-question.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/mcq/mcq-question.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/mcq/mcq-question.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\nexport type McqQuestionDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class McqQuestion {\n  @Prop({ required: true, unique: true })\n  question: string;\n\n  @Prop({ type: [String], required: true  })\n  options: string[];\n\n  @Prop({ required: true })\n  answer: string;\n}\n\nexport const McqQuestionSchema = SchemaFactory.createForClass(McqQuestion);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OeQuestion.html":{"url":"classes/OeQuestion.html","title":"class - OeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/oe/oe-question.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/oe/oe-question.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\nexport type OeQuestionDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class OeQuestion {\n    @Prop()\n    question: string\n}\n\nexport const OeQuestionSchema = SchemaFactory.createForClass(OeQuestion)\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/schemas/student.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                fullName\n                            \n                            \n                                    \n                                matricNo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/schemas/student.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        matricNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, index: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/schemas/student.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n\nexport type StudentDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class Student {\n  @Prop({ required: true })\n  fullName: string;\n\n  @Prop({ required: true, index: true, unique: true })\n  matricNo: string;\n}\n\nexport const StudentSchema = SchemaFactory.createForClass(Student);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StudentController.html":{"url":"controllers/StudentController.html","title":"controller - StudentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StudentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/student.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                student\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                fetchExams\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        fetchExams\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchExams(studentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('assignments/:studentId')\n                \n            \n\n                    \n                        \n                            Defined in src/student/student.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginStudentDto: LoginStudentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('auth')\n                \n            \n\n                    \n                        \n                            Defined in src/student/student.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginStudentDto\n                                            \n                                                            LoginStudentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { LoginStudentDto } from './dtos/login-student.dto';\nimport { StudentService } from './providers/student.service';\nimport { Auth } from 'src/admin/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/admin/auth/enums/auth-type.enum';\n\n@Auth(AuthType.None)\n@Controller('student')\nexport class StudentController {\n    constructor(\n        private readonly studentService: StudentService\n    ) {}\n\n    @Post('auth')\n    public async login(@Body() loginStudentDto: LoginStudentDto) {\n        return this.studentService.loginStudent(loginStudentDto)\n    }\n\n    @Get('assignments/:studentId')\n    public async fetchExams(@Param('studentId') studentId: string) {\n        return this.studentService.fetchStudentAssignments(studentId)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StudentModule.html":{"url":"modules/StudentModule.html","title":"module - StudentModule","body":"\n                   \n\n\n\n\n    Modules\n    StudentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StudentModule\n\n\n\ncluster_StudentModule_exports\n\n\n\ncluster_StudentModule_providers\n\n\n\n\nStudentService \n\nStudentService \n\n\n\nStudentModule\n\nStudentModule\n\nStudentService  -->\n\nStudentModule->StudentService \n\n\n\n\n\nInsertStudentProvider\n\nInsertStudentProvider\n\nStudentModule -->\n\nInsertStudentProvider->StudentModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nStudentModule -->\n\nStudentService->StudentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/student/student.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsertStudentProvider\n                        \n                        \n                            StudentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StudentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StudentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { StudentController } from './student.controller';\nimport { StudentService } from './providers/student.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Student, StudentSchema } from './schemas/student.schema';\nimport { InsertStudentProvider } from './providers/insert-student.provider';\nimport { ExamModule } from 'src/exam/exam.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Student.name,\n        schema: StudentSchema,\n      },\n    ]),\n\n    forwardRef(() => ExamModule),\n  ],\n  controllers: [StudentController],\n  providers: [StudentService, InsertStudentProvider],\n  exports: [StudentService]\n})\nexport class StudentModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StudentService.html":{"url":"injectables/StudentService.html","title":"injectable - StudentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StudentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/providers/student.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fetchStudentAssignments\n                            \n                            \n                                    Public\n                                    Async\n                                insertStudents\n                            \n                            \n                                    Public\n                                    Async\n                                loginStudent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(studentModel: Model, insertStudentProvider: InsertStudentProvider, fetchExamAssignmentsProviders: FetchExamAssignmentsProvider)\n                    \n                \n                        \n                            \n                                Defined in src/student/providers/student.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        studentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insertStudentProvider\n                                                  \n                                                        \n                                                                        InsertStudentProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fetchExamAssignmentsProviders\n                                                  \n                                                        \n                                                                        FetchExamAssignmentsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fetchStudentAssignments\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchStudentAssignments(studentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        insertStudents\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertStudents(tutorialList: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        loginStudent\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginStudent(loginStudentDto: LoginStudentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginStudentDto\n                                            \n                                                            LoginStudentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Student, StudentDocument } from '../schemas/student.schema';\nimport { Model } from 'mongoose';\nimport { InsertStudentProvider } from './insert-student.provider';\nimport { LoginStudentDto } from '../dtos/login-student.dto';\nimport { successResponse } from 'src/utils/response-writer';\nimport { ExamService } from 'src/exam/providers/exam.service';\nimport { FetchExamAssignmentsProvider } from 'src/exam/providers/fetch-exam-assignments.provider';\n\n@Injectable()\nexport class StudentService {\n  constructor(\n    @InjectModel(Student.name)\n    private readonly studentModel: Model,\n\n    private readonly insertStudentProvider: InsertStudentProvider,\n\n    @Inject(forwardRef(() => FetchExamAssignmentsProvider))\n    private readonly fetchExamAssignmentsProviders: FetchExamAssignmentsProvider,\n\n  ) { }\n\n  public async loginStudent(loginStudentDto: LoginStudentDto) {\n\n    let student = await this.studentModel.findOne({ matricNo: loginStudentDto.matricNo })\n    if (!student) {\n      throw new NotFoundException('Student with matric number does not exist.')\n    }\n\n    if (student.fullName.split(' ')[0].toLowerCase() != loginStudentDto.password.toLowerCase()) {\n      throw new UnauthorizedException('Incorrect password')\n    }\n\n    return successResponse({ message: 'Login Successful', data: student })\n  }\n\n  public async insertStudents(\n    tutorialList: Express.Multer.File,\n  ): Promise {\n    return this.insertStudentProvider.insertStudents(tutorialList)\n  }\n\n  public async fetchStudentAssignments(studentId: string) {\n    return this.fetchExamAssignmentsProviders.getAssignmentsForStudent(studentId)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamParamDto.html":{"url":"classes/UpdateExamParamDto.html","title":"class - UpdateExamParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for extracting the examId from the URL path\nwhen updating or deleting an exam (MCQ or OE).\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                examId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier of the exam to update or delete', example: 'exam_123abc'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/update-exam-param.dto.ts:20\n                        \n                    \n\n            \n                \n                    Unique identifier of the exam to update or delete.\nExample: exam_123abc\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty } from 'class-validator';\n\n/**\n * DTO for extracting the `examId` from the URL path\n * when updating or deleting an exam (MCQ or OE).\n */\nexport class UpdateExamParamDto {\n  /**\n   * Unique identifier of the exam to update or delete.\n   * \n   * Example: `exam_123abc`\n   */\n  @ApiProperty({\n    description: 'Unique identifier of the exam to update or delete',\n    example: 'exam_123abc',\n  })\n  @IsString()\n  @IsNotEmpty()\n  examId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateMcqExamProvider.html":{"url":"injectables/UpdateMcqExamProvider.html","title":"injectable - UpdateMcqExamProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateMcqExamProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/update-mcq-exam.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider responsible for updating MCQ exams by parsing a template file and storing the questions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prepareListForBulkWrite\n                            \n                            \n                                    Public\n                                    Async\n                                updateMcqExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mcqQuestionModel: Model, examSchema: Model, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/update-mcq-exam.provider.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mcqQuestionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examSchema\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prepareListForBulkWrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    prepareListForBulkWrite(mcqList: IMcqQuestion[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/update-mcq-exam.provider.ts:109\n                        \n                    \n\n\n            \n                \n                        Prepares a bulk write operation list from an array of parsed MCQ questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mcqList\n                                            \n                                                            IMcqQuestion[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParsed MCQ questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                List of MongoDB bulk write operations\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMcqExam(examId: string, mcqTemplate: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/update-mcq-exam.provider.ts:53\n                        \n                    \n\n\n            \n                \n                        Updates an MCQ exam with questions from an uploaded template file.\n\nVerifies exam existence and type\nParses and validates the MCQ template\nSaves new or updated MCQ questions to the database\nLinks questions to the exam using a transactional operation\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to update\n\n\n                                            \n                                        \n                                        \n                                                mcqTemplate\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile containing MCQ questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Success response if operation completes\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport {\n  IMcqQuestion,\n  iMcqQuestionExpectedKeys,\n} from 'src/utils/interfaces/mcq-question.interface';\nimport { parseTemplate } from 'src/utils/template-parser';\nimport { Connection, Model } from 'mongoose';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport {\n  McqQuestion,\n  McqQuestionDocument,\n} from '../schemas/mcq/mcq-question.schema';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { IResponse, successResponse } from 'src/utils/response-writer';\nimport { examType } from '../enums/exam-type.enum';\n\n/**\n * Provider responsible for updating MCQ exams by parsing a template file and storing the questions.\n */\n@Injectable()\nexport class UpdateMcqExamProvider {\n  constructor(\n    @InjectModel(McqQuestion.name)\n    private readonly mcqQuestionModel: Model,\n\n    @InjectModel(Exam.name)\n    private readonly examSchema: Model,\n\n    @InjectConnection()\n    private readonly connection: Connection,\n  ) {}\n\n  /**\n   * Updates an MCQ exam with questions from an uploaded template file.\n   *\n   * - Verifies exam existence and type\n   * - Parses and validates the MCQ template\n   * - Saves new or updated MCQ questions to the database\n   * - Links questions to the exam using a transactional operation\n   *\n   * @param examId - ID of the exam to update\n   * @param mcqTemplate - File containing MCQ questions\n   * @returns Success response if operation completes\n   *\n   * @throws {NotFoundException} If exam is not found\n   * @throws {BadRequestException} If exam type is not MCQ or template is invalid\n   */\n  public async updateMcqExam(\n    examId: string,\n    mcqTemplate: Express.Multer.File,\n  ): Promise {\n    const exam = await this.examSchema.findById(examId);\n\n    if (!exam) {\n      throw new NotFoundException('Exam not found');\n    }\n\n    if (exam.examType !== examType.MCQ) {\n      throw new BadRequestException('Exam mode is not MCQ');\n    }\n\n    const mcqList = parseTemplate(\n      mcqTemplate,\n      iMcqQuestionExpectedKeys,\n    );\n\n    if (mcqList.length === 0) {\n      throw new BadRequestException('Questions template is empty');\n    }\n\n    const session = await this.connection.startSession();\n    session.startTransaction();\n\n    try {\n      const operations = this.prepareListForBulkWrite(mcqList);\n\n      const result = await this.mcqQuestionModel.bulkWrite(operations, {\n        session,\n      });\n\n      const insertedQuestionIds = Object.values(result.upsertedIds || {});\n      exam.questions.push(...insertedQuestionIds);\n      await exam.save({ session });\n\n      await session.commitTransaction();\n\n      return successResponse({ message: 'Exam updated successfully.' });\n    } catch (error) {\n      await session.abortTransaction();\n      throw new BadRequestException(\n        error.message || 'Failed to save exam questions',\n      );\n    } finally {\n      await session.endSession();\n    }\n  }\n\n  /**\n   * Prepares a bulk write operation list from an array of parsed MCQ questions.\n   *\n   * @param mcqList - Parsed MCQ questions\n   * @returns List of MongoDB bulk write operations\n   */\n  private prepareListForBulkWrite(mcqList: IMcqQuestion[]) {\n    const collapseMcqList = mcqList.map((mcq) => ({\n      question: mcq.Question,\n      options: [mcq.A, mcq.B, mcq.C, mcq.D],\n      answer: mcq['Correct Answer'],\n    }));\n\n    const operations = collapseMcqList.map((item) => ({\n      updateOne: {\n        filter: { question: item.question },\n        update: { $set: item },\n        upsert: true,\n      },\n    }));\n    return operations;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateOeExamProvider.html":{"url":"injectables/UpdateOeExamProvider.html","title":"injectable - UpdateOeExamProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateOeExamProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/update-oe-exam.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider responsible for updating open-ended (OE) exams.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateOeExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oeQuestionModel: Model, examSchema: Model, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/update-oe-exam.provider.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oeQuestionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examSchema\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOeExam(examId: string, markingGuide: Express.Multer.File, oeTemplate: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/update-oe-exam.provider.ts:52\n                        \n                    \n\n\n            \n                \n                        Updates an OE exam by inserting parsed questions from an uploaded template.\n\nVerifies exam existence and type\nParses OE questions template\nInserts questions and links them to the exam\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to update\n\n\n                                            \n                                        \n                                        \n                                                markingGuide\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile containing marking guide (not yet processed)\n\n\n                                            \n                                        \n                                        \n                                                oeTemplate\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile containing open-ended questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Success response if update completes\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport {\n  OeQuestion,\n  OeQuestionDocument,\n} from '../schemas/oe/oe-question.schema';\nimport { Connection, Model } from 'mongoose';\nimport { parseTemplate } from 'src/utils/template-parser';\nimport {\n  iOeExpectedKeys,\n  IOeQuestion,\n} from 'src/utils/interfaces/oe-question.interface';\nimport { IResponse, successResponse } from 'src/utils/response-writer';\nimport { examType } from '../enums/exam-type.enum';\n\n/**\n * Provider responsible for updating open-ended (OE) exams.\n */\n@Injectable()\nexport class UpdateOeExamProvider {\n  constructor(\n    @InjectModel(OeQuestion.name)\n    private readonly oeQuestionModel: Model,\n\n    @InjectModel(Exam.name)\n    private readonly examSchema: Model,\n\n    @InjectConnection()\n    private readonly connection: Connection,\n  ) {}\n\n  /**\n   * Updates an OE exam by inserting parsed questions from an uploaded template.\n   *\n   * - Verifies exam existence and type\n   * - Parses OE questions template\n   * - Inserts questions and links them to the exam\n   *\n   * @param examId - ID of the exam to update\n   * @param markingGuide - File containing marking guide (not yet processed)\n   * @param oeTemplate - File containing open-ended questions\n   * @returns Success response if update completes\n   *\n   * @throws {NotFoundException} If exam is not found\n   * @throws {BadRequestException} If exam type is not OE or questions are invalid\n   */\n  public async updateOeExam(\n    examId: string,\n    markingGuide: Express.Multer.File,\n    oeTemplate: Express.Multer.File,\n  ): Promise {\n    const exam = await this.examSchema.findById(examId);\n\n    if (!exam) {\n      throw new NotFoundException('Exam not found');\n    }\n\n    if (exam.examType !== examType.OE) {\n      throw new BadRequestException('Exam mode is not OE');\n    }\n\n    const oeqList = parseTemplate(oeTemplate, iOeExpectedKeys);\n\n    if (oeqList.length === 0) {\n      throw new BadRequestException('Question template is empty');\n    }\n\n    const session = await this.connection.startSession();\n    session.startTransaction();\n\n    try {\n      const operations = oeqList.map((oeq) => ({\n        insertOne: { document: { question: oeq.Question } },\n      }));\n\n      const result = await this.oeQuestionModel.bulkWrite(operations, {\n        session,\n      });\n\n      const insertedQuestionIds = Object.values(result.insertedIds || {});\n      console.log(insertedQuestionIds);\n\n      // TODO: Create Assistant and update exam with assistantId\n\n      exam.questions.push(...insertedQuestionIds);\n      await exam.save({ session });\n\n      await session.commitTransaction();\n\n      return successResponse({ message: 'Exam updated successfully' });\n    } catch (error) {\n      await session.abortTransaction();\n      throw new BadRequestException(\n        error.message || 'Failed to save exam questions',\n      );\n    } finally {\n      await session.endSession();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/admin/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/admin/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/auth/decorators/active-admin.decorator.ts\n            \n            variable\n            ActiveAdmin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/admin/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/admin/auth/guards/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/auth/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/admin/auth/interfaces/active-admin-data.interface.ts\n            \n            interface\n            ActiveAdminData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/admin/auth/providers/generate-token.provider.ts\n            \n            class\n            GenerateTokenProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/admin/dtos/create-admin.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/providers/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/schemas/admin.schema.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/admin/schemas/admin.schema.ts\n            \n            variable\n            AdminSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/schemas/admin.schema.ts\n            \n            type alias\n            AdminDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam-assignment.dto.ts\n            \n            class\n            CreateExamAssignmentDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/exam/dtos/mcq.dto.ts\n            \n            class\n            Mcq\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam-param.dto.ts\n            \n            class\n            UpdateExamParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/exam/exam.controller.ts\n            \n            controller\n            ExamController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/exam/providers/create-exam.provider.ts\n            \n            injectable\n            CreateExamProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/exam/providers/exam.service.ts\n            \n            injectable\n            ExamService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/exam/providers/fetch-exam-assignments.provider.ts\n            \n            injectable\n            FetchExamAssignmentsProvider\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                        src/exam/providers/fetch-exam-assignments.provider.ts\n            \n            variable\n            CACHE_TTL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/exam/providers/update-mcq-exam.provider.ts\n            \n            injectable\n            UpdateMcqExamProvider\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/exam/providers/update-oe-exam.provider.ts\n            \n            injectable\n            UpdateOeExamProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/exam/schemas/exam-assigment.schema.ts\n            \n            class\n            ExamAssignment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/exam/schemas/exam-assigment.schema.ts\n            \n            variable\n            ExamAssignmentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/exam-assigment.schema.ts\n            \n            type alias\n            ExamAssignmentDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/schemas/exam.schema.ts\n            \n            class\n            Exam\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/exam/schemas/exam.schema.ts\n            \n            variable\n            ExamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/exam.schema.ts\n            \n            type alias\n            ExamDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/schemas/mcq/mcq-question.schema.ts\n            \n            class\n            McqQuestion\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/exam/schemas/mcq/mcq-question.schema.ts\n            \n            variable\n            McqQuestionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/mcq/mcq-question.schema.ts\n            \n            type alias\n            McqQuestionDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/schemas/oe/oe-question.schema.ts\n            \n            class\n            OeQuestion\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/exam/schemas/oe/oe-question.schema.ts\n            \n            variable\n            OeQuestionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/oe/oe-question.schema.ts\n            \n            type alias\n            OeQuestionDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/global-http-exception.filter.ts\n            \n            class\n            GlobalHttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/student/dtos/login-student.dto.ts\n            \n            class\n            LoginStudentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/student/providers/insert-student.provider.ts\n            \n            injectable\n            InsertStudentProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/student/providers/student.service.ts\n            \n            injectable\n            StudentService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/student/schemas/student.schema.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/student/schemas/student.schema.ts\n            \n            variable\n            StudentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/student/schemas/student.schema.ts\n            \n            type alias\n            StudentDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/student/student.controller.ts\n            \n            controller\n            StudentController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/interfaces/mcq-question.interface.ts\n            \n            interface\n            IMcqQuestion\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        src/utils/interfaces/mcq-question.interface.ts\n            \n            variable\n            iMcqQuestionExpectedKeys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/interfaces/oe-question.interface.ts\n            \n            interface\n            IOeQuestion\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/utils/interfaces/oe-question.interface.ts\n            \n            variable\n            iOeExpectedKeys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/interfaces/student.interface.ts\n            \n            interface\n            IStudent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/interfaces/student.interface.ts\n            \n            variable\n            iStudentExpectedKeys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/response-writer.ts\n            \n            interface\n            IResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/utils/response-writer.ts\n            \n            function\n            successResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/template-parser.ts\n            \n            function\n            parseTemplate\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^3.0.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mongoose : ^11.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            bcrypt : ^5.1.1\n        \n            cache-manager : ^6.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            helmet : ^8.1.0\n        \n            joi : ^17.13.3\n        \n            mongoose : ^8.13.2\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            xlsx : ^0.18.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            examType   (src/.../exam-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/admin/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        examType\n                    \n                \n                    \n                        \n                            Enum representing the type of an exam.\n\nMCQ: Multiple Choice Questions.\nOE: Open-Ended Questions.\n\n\n                        \n                    \n                        \n                            \n                                 MCQ\n                            \n                        \n                        \n                            \n                                Value : McqQuestion\n                            \n                        \n                        \n                            \n                                 OE\n                            \n                        \n                        \n                            \n                                Value : OeQuestion\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            parseTemplate   (src/.../template-parser.ts)\n                        \n                        \n                            successResponse   (src/.../response-writer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/template-parser.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseTemplate\n                        \n                    \n                \n            \n            \n                \nparseTemplate(template, expectedKeys)\n                \n            \n\n\n\n\n            \n                \n                        Parses an uploaded Excel file and maps it into a strongly-typed array of objects.\nThis function ensures that the uploaded file contains the expected columns.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                template\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe uploaded file received through a multipart/form-data request.\n\n\n                                            \n                                        \n                                        \n                                                expectedKeys\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of keys (column headers) that must be present in the file.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [] | null\n\n                        \n                            \n                                An array of objects parsed from the Excel file, typed as T[].\n\n                            \n                \n            \n        \n    \n    src/utils/response-writer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        successResponse\n                        \n                    \n                \n            \n            \n                \nsuccessResponse(__namedParameters: {message: string, data: any})\n                \n            \n\n\n\n\n            \n                \n                        Utility function to generate a standardized success response.\nThis is used across the application to ensure all successful API responses\nfollow a consistent structure defined by the IResponse interface.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IResponse\n\n                        \n                            \n                                A standardized success response object.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2025 Oluwafemi Ojuri\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StudentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_StudentModule\n\n\n\ncluster_StudentModule_exports\n\n\n\ncluster_StudentModule_providers\n\n\n\n\nAdminService\n\nAdminService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAdminModule -->\n\nAuthService->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nFetchExamAssignmentsProvider \n\nFetchExamAssignmentsProvider \n\nFetchExamAssignmentsProvider  -->\n\nExamModule->FetchExamAssignmentsProvider \n\n\n\n\n\nStudentModule\n\nStudentModule\n\nAppModule -->\n\nStudentModule->AppModule\n\n\n\n\n\nStudentService \n\nStudentService \n\nStudentService  -->\n\nStudentModule->StudentService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCreateExamProvider\n\nCreateExamProvider\n\nExamModule -->\n\nCreateExamProvider->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nFetchExamAssignmentsProvider\n\nFetchExamAssignmentsProvider\n\nExamModule -->\n\nFetchExamAssignmentsProvider->ExamModule\n\n\n\n\n\nUpdateMcqExamProvider\n\nUpdateMcqExamProvider\n\nExamModule -->\n\nUpdateMcqExamProvider->ExamModule\n\n\n\n\n\nUpdateOeExamProvider\n\nUpdateOeExamProvider\n\nExamModule -->\n\nUpdateOeExamProvider->ExamModule\n\n\n\n\n\nInsertStudentProvider\n\nInsertStudentProvider\n\nStudentModule -->\n\nInsertStudentProvider->StudentModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nStudentModule -->\n\nStudentService->StudentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AdminDocument   (src/.../admin.schema.ts)\n                        \n                        \n                            ExamAssignmentDocument   (src/.../exam-assigment.schema.ts)\n                        \n                        \n                            ExamDocument   (src/.../exam.schema.ts)\n                        \n                        \n                            McqQuestionDocument   (src/.../mcq-question.schema.ts)\n                        \n                        \n                            OeQuestionDocument   (src/.../oe-question.schema.ts)\n                        \n                        \n                            StudentDocument   (src/.../student.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/admin/schemas/admin.schema.ts\n    \n    \n        \n            \n                \n                    \n                    AdminDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/exam/schemas/exam-assigment.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ExamAssignmentDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/exam/schemas/exam.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ExamDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/exam/schemas/mcq/mcq-question.schema.ts\n    \n    \n        \n            \n                \n                    \n                    McqQuestionDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/exam/schemas/oe/oe-question.schema.ts\n    \n    \n        \n            \n                \n                    \n                    OeQuestionDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/student/schemas/student.schema.ts\n    \n    \n        \n            \n                \n                    \n                    StudentDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveAdmin   (src/.../active-admin.decorator.ts)\n                        \n                        \n                            AdminSchema   (src/.../admin.schema.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            CACHE_TTL   (src/.../fetch-exam-assignments.provider.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            ExamAssignmentSchema   (src/.../exam-assigment.schema.ts)\n                        \n                        \n                            ExamSchema   (src/.../exam.schema.ts)\n                        \n                        \n                            iMcqQuestionExpectedKeys   (src/.../mcq-question.interface.ts)\n                        \n                        \n                            iOeExpectedKeys   (src/.../oe-question.interface.ts)\n                        \n                        \n                            iStudentExpectedKeys   (src/.../student.interface.ts)\n                        \n                        \n                            McqQuestionSchema   (src/.../mcq-question.schema.ts)\n                        \n                        \n                            OeQuestionSchema   (src/.../oe-question.schema.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            StudentSchema   (src/.../student.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/admin/auth/decorators/active-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveAdminData, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveAdminData = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/admin/schemas/admin.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AdminSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Admin)\n                    \n                \n\n\n        \n    \n\n    src/admin/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/admin/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/exam/providers/fetch-exam-assignments.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_TTL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3600\n                    \n                \n\n            \n                \n                    Cache for just 1hour\n\n                \n            \n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/exam/schemas/exam-assigment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ExamAssignmentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ExamAssignment)\n                    \n                \n\n\n        \n    \n\n    src/exam/schemas/exam.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ExamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Exam)\n                    \n                \n\n\n        \n    \n\n    src/utils/interfaces/mcq-question.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        iMcqQuestionExpectedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'Question',\n  'A',\n  'B',\n  'C',\n  'D',\n  'Correct Answer',\n]\n                    \n                \n\n            \n                \n                    An array of the expected keys for a valid MCQ question object.\nThis can be used for validation or checking the shape of imported data.\n\n                \n            \n\n        \n    \n\n    src/utils/interfaces/oe-question.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        iOeExpectedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['Question']\n                    \n                \n\n            \n                \n                    An array of the expected keys for a valid open-ended question object.\nUseful for validating imported data or ensuring consistency.\n\n                \n            \n\n        \n    \n\n    src/utils/interfaces/student.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        iStudentExpectedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'FullName',\n  'Matric No',\n]\n                    \n                \n\n            \n                \n                    List of expected keys in a valid student object.\nThis is useful for validating structured data such as CSV or Excel file imports.\n\n                \n            \n\n        \n    \n\n    src/exam/schemas/mcq/mcq-question.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        McqQuestionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(McqQuestion)\n                    \n                \n\n\n        \n    \n\n    src/exam/schemas/oe/oe-question.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OeQuestionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(OeQuestion)\n                    \n                \n\n\n        \n    \n\n    src/student/schemas/student.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StudentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Student)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
