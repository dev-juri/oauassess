var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,3.091,1,2.629]],["body/guards/AccessTokenGuard.html",[1,3.665,2,3.186,3,0.183,4,0.166,5,0.132,6,5.812,7,3.541,8,0.219,9,1.657,10,1.878,11,5.812,12,2.556,13,5.516,14,2.016,15,3.541,16,6.399,17,5.426,18,5.812,19,0.851,20,4.079,21,1.878,22,0.015,23,1.387,24,0.363,25,1.496,26,4.788,27,5.23,28,4.079,29,2.922,30,1.595,31,2.099,32,5.516,33,4.212,34,4.079,35,0.534,36,2.743,37,0.775,38,3.652,39,1.178,40,4.477,41,0.871,42,2.922,43,4.309,44,3.541,45,2.383,46,2.71,47,3.186,48,3.541,49,0.274,50,0.007,51,3.186,52,1.722,53,3.541,54,1.543,55,4.079,56,3.541,57,6.258,58,3.541,59,4.079,60,2.284,61,1.79,62,2.029,63,4.309,64,1.376,65,4.079,66,4.079,67,3.541,68,1.933,69,1.764,70,1.133,71,1.432,72,3.541,73,4.079,74,0.01,75,0.01]],["title/interfaces/ActiveAdminData.html",[76,1.022,77,2.834]],["body/interfaces/ActiveAdminData.html",[3,0.256,4,0.232,5,0.185,8,0.306,22,0.014,23,1.682,24,0.425,35,0.782,49,0.384,74,0.012,75,0.012,76,1.473,77,4.893,78,2.467,79,4.952,80,2.984,81,4.952,82,1.199,83,4.71,84,6.582]],["title/classes/Admin.html",[50,0.007,80,2.071]],["body/classes/Admin.html",[3,0.195,4,0.177,5,0.141,8,0.233,10,1.304,19,0.878,22,0.015,23,1.431,24,0.399,35,0.71,37,0.767,41,0.927,49,0.434,50,0.01,54,1.326,60,1.797,61,1.409,62,2.159,64,1.941,68,2.057,69,1.877,70,1.182,71,2.701,74,0.01,75,0.01,80,3.009,82,1.009,83,4.006,85,1.304,86,3.109,87,4.265,88,1.938,89,4.619,90,3.821,91,4.341,92,4.341,93,4.341,94,4.341,95,4.011,96,2.725,97,2.536,98,1.304,99,3.174,100,3.391,101,1.524,102,4.492,103,2.884,104,5.751,105,2.697,106,3.109,107,2.536,108,2.536,109,2.396,110,2.396,111,2.536,112,3.36,113,2.536,114,3.36,115,1.964,116,3.374,117,3.109,118,3.769,119,4.341,120,3.109,121,4.341,122,5.751,123,4.341,124,4.341,125,4.341,126,4.341,127,4.341]],["title/controllers/AdminController.html",[128,1.875,129,2.834]],["body/controllers/AdminController.html",[3,0.205,4,0.186,5,0.148,8,0.245,9,1.785,10,1.985,19,0.621,21,1.37,22,0.015,23,1.012,24,0.265,25,1.092,30,1.319,33,3.471,37,0.752,41,0.974,49,0.307,50,0.008,52,1.424,57,3.959,61,1.928,70,0.937,74,0.011,75,0.011,80,3.797,88,1.37,115,2.063,128,2.161,129,4.255,130,2.268,131,3.959,132,3.267,133,2.735,134,5.157,135,3.959,136,4.944,137,4.561,138,4.255,139,4.561,140,6.607,141,2.955,142,4.561,143,5.157,144,4.255,145,3.279,146,5.157,147,4.561,148,5.157,149,2.103,150,5.941,151,3.947,152,3.947,153,4.561,154,2.063,155,3.267,156,2.268,157,3.959,158,4.255,159,3.86,160,3.959,161,3.03,162,3.959,163,3.563,164,5.157,165,4.64,166,4.64,167,5.157,168,5.941,169,2.386,170,3.563,171,4.561,172,3.267,173,3.563,174,2.834,175,3.563,176,4.561,177,4.561]],["title/modules/AdminModule.html",[178,1.711,179,2.629]],["body/modules/AdminModule.html",[1,3.909,3,0.202,4,0.183,5,0.146,22,0.015,23,0.997,37,0.86,41,0.96,42,3.219,43,3.511,45,2.626,49,0.302,50,0.008,74,0.011,75,0.011,80,2.352,96,2.13,98,1.351,117,4.214,129,4.698,130,2.926,159,4.33,160,3.902,178,2.837,179,5.089,180,2.352,181,2.352,182,2.626,183,2.626,184,2.352,185,3.621,186,2.626,187,3.902,188,3.902,189,4.604,190,3.438,191,2.626,192,2.352,193,4.495,194,4.698,195,4.495,196,4.495,197,4.495,198,3.219,199,3.902,200,3.909,201,4.495,202,3.902,203,4.495,204,4.495,205,3.511,206,4.495,207,3.902,208,5.884,209,3.511,210,4.214,211,4.495,212,2.626,213,3.511,214,4.495,215,4.495,216,4.495,217,3.902,218,4.495]],["title/injectables/AdminService.html",[39,0.845,159,2.312]],["body/injectables/AdminService.html",[3,0.205,4,0.186,5,0.148,8,0.245,9,1.787,10,2.237,12,1.67,14,2.174,19,0.901,21,1.987,22,0.015,23,1.467,24,0.384,25,1.583,30,1.721,31,2.666,35,0.64,37,0.78,39,1.27,41,0.976,49,0.307,50,0.008,52,1.427,54,1.054,61,1.483,64,2.007,70,1.359,74,0.011,75,0.011,80,2.391,83,3.696,98,1.373,101,1.604,106,3.274,133,3.082,134,5.164,135,5.164,136,4.825,159,3.476,161,3.037,162,3.968,199,3.968,219,1.813,220,3.968,221,5.949,222,4.571,223,3.319,224,4.571,225,5.949,226,4.571,227,5.949,228,4.571,229,2.273,230,4.571,231,4.394,232,4.571,233,2.067,234,4.571,235,4.571,236,4.571]],["title/controllers/AppController.html",[128,1.875,237,2.834]],["body/controllers/AppController.html",[3,0.268,4,0.243,5,0.193,22,0.015,37,0.753,41,1.272,49,0.4,50,0.011,52,1.859,74,0.013,75,0.013,128,3.321,130,2.962,172,4.266,237,5.02,238,5.17,239,4.627,240,5.17]],["title/modules/AppModule.html",[178,1.711,241,2.834]],["body/modules/AppModule.html",[3,0.188,4,0.171,5,0.136,22,0.015,37,0.852,38,2.448,41,0.895,45,2.448,49,0.282,50,0.008,71,1.471,74,0.01,75,0.01,98,1.259,130,2.793,178,2.74,179,4.827,180,2.192,181,2.192,182,2.448,183,2.448,184,2.192,185,3.497,186,2.448,190,3.282,191,2.448,192,2.192,198,3.001,205,4.387,212,3.702,237,4.538,239,4.514,240,3.637,241,5.73,242,3.637,243,3.637,244,3.637,245,4.827,246,4.514,247,4.514,248,4.514,249,4.19,250,4.19,251,4.19,252,5.288,253,4.19,254,4.19,255,4.19,256,4.19,257,5.617,258,4.19,259,5.617,260,4.19,261,5.617,262,4.19,263,5.617,264,4.19,265,4.19,266,4.19,267,4.19,268,4.19,269,4.19,270,4.19,271,4.19,272,4.19,273,4.19,274,3.637,275,4.19,276,4.19]],["title/injectables/AppService.html",[39,0.845,239,2.459]],["body/injectables/AppService.html",[3,0.262,4,0.237,5,0.189,8,0.313,9,2.079,19,0.794,22,0.015,30,1.685,35,0.67,37,0.626,39,1.478,41,1.244,49,0.392,50,0.01,70,1.197,74,0.012,75,0.012,219,2.312,239,4.299,277,5.058,278,7.636,279,5.827,280,5.827,281,5.827]],["title/controllers/AuthController.html",[128,1.875,194,2.834]],["body/controllers/AuthController.html",[3,0.21,4,0.191,5,0.152,8,0.251,9,1.815,10,2.01,19,0.637,21,1.406,22,0.015,23,1.038,24,0.272,25,1.12,30,1.353,37,0.805,41,0.999,49,0.315,50,0.008,52,1.461,64,1.579,70,0.962,74,0.011,75,0.011,80,3.16,88,1.406,128,2.217,130,2.327,132,3.352,133,2.769,145,3.334,149,1.815,151,4.013,152,4.013,154,2.117,155,3.352,158,4.326,163,3.655,165,4.718,166,4.718,167,4.062,169,2.448,170,3.655,172,3.352,173,3.655,189,4.155,194,4.326,282,4.062,283,4.013,284,5.24,285,4.062,286,4.978,287,4.68,288,4.68,289,4.68,290,5.243,291,4.68,292,4.68,293,3.655,294,3.352,295,4.062,296,6.04,297,4.68,298,4.062,299,4.68,300,2.907,301,4.062,302,2.117,303,4.68,304,3.655,305,4.062,306,4.68,307,2.734,308,4.062,309,4.68]],["title/injectables/AuthService.html",[39,0.845,189,2.459]],["body/injectables/AuthService.html",[3,0.201,4,0.182,5,0.145,8,0.24,9,1.761,10,1.965,12,2.141,14,2.141,19,0.798,21,1.761,22,0.015,23,1.451,24,0.34,25,1.403,30,1.292,31,2.23,37,0.795,39,1.251,40,3.199,41,0.954,49,0.3,50,0.008,52,1.83,54,1.03,60,2.426,61,1.902,64,2.207,70,0.918,74,0.011,75,0.011,83,2.775,102,4.578,133,2.707,159,4.323,189,3.64,200,5.009,202,3.878,219,1.772,231,3.893,284,4.684,285,5.087,286,4.79,290,3.878,298,3.878,307,2.61,310,3.878,311,4.467,312,4.467,313,4.467,314,2.61,315,2.777,316,2.117,317,2.465,318,4.467,319,2.968,320,4.467,321,4.467,322,2.337,323,5.86,324,4.467,325,4.467,326,4.467,327,4.467,328,5.86,329,4.467,330,4.467,331,4.467,332,1.772,333,1.772]],["title/guards/AuthenticationGuard.html",[0,3.091,210,2.834]],["body/guards/AuthenticationGuard.html",[1,4.9,2,5.467,3,0.184,4,0.166,5,0.133,8,0.219,9,1.66,10,1.88,11,6.511,12,2.636,14,2.018,19,0.752,21,1.66,22,0.015,23,1.226,24,0.321,25,1.322,26,4.795,27,5.234,29,2.927,30,1.182,31,2.102,37,0.775,39,1.18,40,3.956,41,0.873,48,3.548,49,0.275,50,0.007,51,3.192,52,2.252,54,1.613,60,1.692,61,1.326,64,1.379,69,2.705,70,0.84,71,1.939,74,0.01,75,0.01,82,0.717,138,2.927,207,3.548,209,3.192,210,3.956,300,2.539,301,3.548,302,1.849,334,3.548,335,5.523,336,5.523,337,5.523,338,4.087,339,7.375,340,4.087,341,4.087,342,4.087,343,3.548,344,4.087,345,3.192,346,5.523,347,3.548,348,4.087,349,4.087,350,4.795,351,4.087,352,4.087,353,4.087,354,4.087,355,1.692,356,4.087,357,4.087,358,2.388,359,3.548,360,3.192,361,4.087,362,4.087,363,4.087,364,4.087,365,4.087,366,3.548]],["title/modules/CacheModule.html",[178,1.711,245,2.629]],["body/modules/CacheModule.html",[3,0.204,4,0.185,5,0.147,10,1.365,22,0.015,36,2.946,37,0.779,38,2.654,41,0.97,45,2.654,49,0.305,50,0.008,54,1.366,61,1.474,70,1.217,74,0.011,75,0.011,87,2.822,178,2.851,180,2.376,181,2.376,182,2.654,183,2.654,184,2.376,185,3.639,186,3.852,190,3.461,191,2.654,192,2.376,205,4.628,212,3.461,245,5.1,252,5.458,274,3.943,367,3.943,368,3.943,369,3.943,370,4.931,371,4.542,372,5.143,373,5.924,374,3.548,375,4.628,376,5.924,377,2.259,378,3.943,379,4.628,380,4.542,381,4.542,382,5.924,383,4.542,384,3.943,385,4.542,386,3.943,387,4.542,388,4.542,389,4.542,390,4.542,391,4.542,392,4.542,393,4.542,394,4.542,395,4.628,396,5.924,397,5.924]],["title/injectables/CacheService.html",[39,0.845,370,2.459]],["body/injectables/CacheService.html",[3,0.154,4,0.139,5,0.111,8,0.183,9,1.465,10,2.327,12,1.248,14,1.782,19,0.929,21,2.226,22,0.015,23,1.513,24,0.43,25,1.633,30,1.897,31,2.82,35,0.733,37,0.611,38,1.996,39,1.041,41,0.729,49,0.23,50,0.006,52,1.066,54,1.124,62,3.261,64,2.213,68,3.107,69,3.243,70,1.274,74,0.009,75,0.009,115,1.545,219,1.355,233,2.205,355,2.354,370,3.029,374,2.668,375,3.809,377,3.261,395,4.844,398,2.965,399,4.876,400,4.876,401,5.686,402,4.441,403,3.416,404,3.416,405,4.876,406,4.876,407,3.416,408,5.606,409,4.876,410,3.416,411,5.027,412,4.876,413,3.416,414,2.849,415,4.876,416,3.416,417,2.668,418,4.876,419,4.357,420,1.996,421,3.416,422,2.446,423,3.416,424,3.416,425,4.232,426,3.416,427,3.416,428,4.876,429,3.416,430,3.492,431,3.416,432,3.416,433,3.416,434,3.416,435,3.416,436,3.416,437,3.416,438,2.668,439,3.416,440,3.416,441,3.416,442,3.416,443,3.416]],["title/classes/CreateAdminDto.html",[50,0.007,136,2.629]],["body/classes/CreateAdminDto.html",[3,0.19,4,0.172,5,0.137,8,0.226,19,0.866,22,0.015,23,1.57,24,0.369,35,0.705,37,0.607,49,0.284,50,0.01,74,0.01,75,0.01,80,3.553,82,0.991,83,4.397,85,1.269,87,4.397,88,1.911,136,3.751,149,1.911,169,2.209,332,2.24,420,2.384,444,5.894,445,3.665,446,4.226,447,4.901,448,3.622,449,4.223,450,4.223,451,4.044,452,5.646,453,5.646,454,5.528,455,4.223,456,4.223,457,5.304,458,5.894,459,5.304,460,6.133,461,5.894,462,5.894,463,5.894,464,5.646,465,3.665,466,5.304,467,5.646,468,5.646,469,4.223,470,4.511,471,4.901,472,3.218,473,3.218,474,3.298,475,1.91,476,3.665,477,4.223,478,4.223,479,3.665,480,3.665,481,3.665]],["title/classes/CreateExamAssignmentDto.html",[50,0.007,482,2.834]],["body/classes/CreateExamAssignmentDto.html",[3,0.122,4,0.111,5,0.088,8,0.146,19,0.889,22,0.015,24,0.442,25,1.681,35,0.651,37,0.597,49,0.183,50,0.009,74,0.007,75,0.007,82,0.724,85,0.818,88,1.795,90,3.694,105,1.692,116,2.909,149,1.889,169,1.425,302,1.232,333,1.637,446,3.969,448,3.828,470,4.177,472,2.361,473,2.361,475,1.232,482,2.956,483,4.911,484,2.249,485,2.364,486,3.582,487,1.955,488,3.582,489,2.199,490,2.956,491,4.127,492,4.127,493,3.223,494,3.223,495,5.458,496,6.287,497,4.127,498,4.983,499,2.75,500,4.983,501,7.616,502,5.949,503,6.727,504,6.727,505,4.494,506,5.458,507,6.287,508,4.983,509,3.248,510,4.127,511,2.723,512,5.56,513,4.127,514,4.127,515,2.765,516,5.56,517,2.723,518,2.723,519,4.343,520,3.248,521,2.031,522,2.765,523,2.909,524,3.454,525,2.364,526,2.723,527,3.582,528,4.127,529,3.582,530,4.983,531,2.723,532,4.127,533,3.223,534,5.56,535,2.723,536,2.723,537,4.983,538,2.364,539,4.983,540,1.503,541,4.127,542,4.127,543,2.956,544,2.364]],["title/classes/CreateExamDto.html",[50,0.007,545,2.459]],["body/classes/CreateExamDto.html",[3,0.131,4,0.119,5,0.095,8,0.157,19,0.838,22,0.015,23,1.432,24,0.421,35,0.557,37,0.558,49,0.196,50,0.008,61,1.41,74,0.008,75,0.008,82,0.763,85,0.877,88,1.849,90,3.824,116,2.274,149,1.939,151,2.888,169,1.527,174,3.575,302,1.32,332,1.724,333,1.724,420,2.411,430,3.113,446,4.089,448,3.865,454,4.057,457,5.735,459,4.496,470,4.287,472,3.058,473,2.461,475,1.32,483,5.041,484,2.164,486,3.773,487,2.06,520,3.554,521,1.588,522,3.209,523,3.376,524,2.7,525,2.533,538,2.533,540,1.61,543,2.09,544,2.533,545,2.7,546,1.938,547,3.395,548,3.395,549,3.773,550,4.346,551,3.395,552,2.539,553,3.773,554,4.346,555,5.735,556,5.601,557,5.028,558,1.257,559,3.773,560,2.888,561,3.395,562,3.035,563,3.227,564,3.72,565,4.808,566,5.194,567,2.918,568,2.918,569,5.756,570,5.194,571,5.194,572,2.918,573,2.918,574,5.756,575,5.343,576,3.72,577,2.918,578,2.918,579,3.324,580,5.756,581,2.784,582,2.918,583,2.918,584,2.727,585,3.823,586,4.509,587,2.918,588,2.918,589,4.346,590,5.194,591,2.918,592,4.346,593,2.918,594,2.918,595,2.918]],["title/injectables/CreateExamProvider.html",[39,0.845,596,2.459]],["body/injectables/CreateExamProvider.html",[3,0.136,4,0.123,5,0.202,8,0.162,9,1.338,10,1.591,12,2.137,14,1.627,19,0.607,21,1.338,22,0.015,23,0.988,24,0.259,25,1.066,30,1.288,31,1.695,37,0.761,38,1.762,39,0.951,41,0.644,49,0.203,50,0.005,52,1.826,54,1.348,60,1.844,61,1.898,62,1.5,64,2.28,68,1.429,69,1.304,70,0.62,71,1.059,74,0.008,75,0.008,98,0.906,101,1.059,133,2.192,141,1.5,149,1.338,156,2.215,161,2.959,174,3.29,219,1.196,223,3.201,229,1.5,315,2.11,316,1.429,317,1.664,322,1.578,332,1.196,333,2.476,347,3.866,402,2.16,482,3.19,484,2.153,488,3.866,489,2.195,493,3.479,499,1.664,545,4.197,547,4.137,552,2.602,596,2.767,597,4.597,598,2.003,599,3.19,600,3.19,601,4.839,602,4.137,603,3.015,604,4.339,605,4.052,606,4.597,607,3.793,608,3.015,609,2.355,610,3.886,611,2.923,612,3.015,613,5.077,614,5.077,615,2.959,616,3.886,617,4.137,618,3.228,619,3.19,620,2.959,621,4.454,622,4.454,623,3.866,624,4.454,625,3.866,626,2.767,627,3.479,628,2.602,629,2.015,630,2.959,631,2.16,632,1.873,633,1.578,634,1.762,635,3.015,636,3.19,637,3.015,638,1.578,639,1.762,640,2.003,641,1.873,642,1.762,643,2.618,644,2.16,645,2.16,646,2.16,647,2.355,648,3.015,649,2.355,650,3.015,651,3.793,652,2.16,653,2.16,654,3.015,655,3.015,656,1.578,657,3.015,658,3.015,659,2.355,660,1.873,661,3.015,662,2.355,663,2.16,664,2.618,665,1.664,666,2.355,667,2.003,668,2.618,669,3.015,670,2.16,671,3.015,672,2.16,673,3.015,674,2.003,675,2.16]],["title/classes/Exam.html",[50,0.007,484,1.102]],["body/classes/Exam.html",[3,0.184,4,0.166,5,0.133,8,0.219,19,1.004,22,0.015,24,0.446,25,1.604,35,0.698,36,2.747,37,0.672,49,0.421,50,0.007,54,0.942,70,0.84,71,2.697,74,0.01,75,0.01,82,0.969,85,1.228,88,2.216,89,4.799,95,4.382,96,2.617,97,2.388,98,1.228,99,3.048,101,1.939,107,2.388,108,2.388,109,2.256,110,2.256,111,2.388,112,3.227,113,2.388,114,3.227,115,1.849,116,3.506,233,1.849,302,1.849,358,2.388,420,2.352,484,1.538,499,2.256,520,3.78,524,2.539,540,2.256,557,4.481,562,3.655,563,3.887,564,4.481,584,2.964,633,2.138,676,2.927,677,4.481,678,4.087,679,4.087,680,4.087,681,4.087,682,4.087,683,4.087,684,4.087,685,4.087,686,5.523,687,2.927,688,4.087,689,3.192,690,4.087,691,3.548]],["title/classes/ExamAssignment.html",[50,0.007,638,2.071]],["body/classes/ExamAssignment.html",[3,0.193,4,0.175,5,0.139,8,0.382,19,0.931,22,0.015,24,0.446,25,1.366,36,3.188,37,0.734,49,0.431,50,0.008,54,0.989,70,0.881,71,2.497,74,0.01,75,0.01,82,1.001,85,1.289,88,2.053,95,4.157,96,2.704,97,2.506,98,1.289,99,3.149,101,2.003,107,2.506,108,2.506,109,2.368,110,2.368,111,2.506,112,3.334,113,2.506,114,3.334,115,1.94,233,1.94,358,3.992,420,2.399,484,2.112,489,2.278,509,3.746,638,2.985,639,2.506,687,4.894,689,4.457,692,5.096,693,3.072,694,4.259,695,3.746,696,5.932,697,4.29,698,5.932,699,4.29,700,4.29,701,4.29,702,4.29,703,4.29,704,3.072,705,3.724]],["title/controllers/ExamController.html",[128,1.875,706,2.834]],["body/controllers/ExamController.html",[3,0.058,4,0.053,5,0.216,8,0.069,9,0.674,10,2.188,19,0.769,21,1.697,22,0.015,23,1.321,24,0.419,25,1.426,30,1.825,31,1.352,35,0.691,37,0.587,41,0.276,46,2.36,49,0.087,50,0.002,52,0.403,54,0.927,61,1.833,64,1.004,70,1.079,72,1.122,74,0.004,75,0.004,82,0.522,88,1.697,96,2.089,115,2.376,116,1.556,128,1.409,130,0.643,132,0.926,133,3.015,138,2.544,141,2,143,1.948,145,2.433,148,3.827,149,2.258,154,2.376,155,1.607,156,2.962,157,1.122,158,1.607,161,0.859,163,1.01,164,1.948,165,3.444,166,4.538,169,0.676,170,1.01,172,0.926,173,3.141,174,2.207,175,4.411,283,0.859,293,1.01,294,0.926,295,1.122,300,0.803,302,0.585,304,4.104,307,1.311,322,1.859,332,0.89,333,1.749,355,1.231,377,1.116,417,1.01,422,0.926,448,2,466,1.01,484,2.178,487,2.244,489,0.674,493,2.775,505,2.498,515,3.273,520,1.116,521,2.503,522,2.193,523,2.307,524,0.803,529,1.948,545,2.942,547,1.753,548,3.141,549,1.948,552,1.311,557,1.607,558,1.027,562,1.738,563,1.848,564,1.607,576,0.926,579,1.116,581,0.585,584,2.376,586,1.122,602,2.323,609,1.01,610,3.146,611,2.9,617,4.104,618,1.239,626,3.114,628,2.075,629,2.694,632,1.394,660,1.394,665,3.015,706,1.607,707,1.122,708,1.948,709,1.948,710,1.607,711,1.948,712,2.683,713,1.948,714,1.948,715,2.974,716,2.974,717,2.775,718,3.084,719,2.244,720,2.323,721,2.323,722,2.244,723,1.292,724,1.292,725,1.292,726,2.974,727,2.244,728,4.021,729,1.292,730,2.244,731,1.292,732,3.552,733,3.591,734,3.084,735,4.409,736,1.122,737,1.292,738,2.244,739,2.909,740,2.244,741,5.014,742,3.084,743,3.552,744,1.292,745,2.775,746,3.084,747,1.122,748,1.292,749,1.292,750,2.244,751,1.292,752,5.463,753,2.974,754,1.292,755,1.292,756,2.244,757,1.015,758,1.753,759,1.948,760,1.753,761,1.292,762,1.292,763,1.292,764,2.244,765,1.292,766,1.292,767,1.292,768,1.292,769,3.158,770,1.292,771,1.292,772,1.292,773,4.044,774,3.141,775,1.292,776,1.948,777,3.299,778,1.292,779,2.244,780,2.244,781,3.916,782,1.292,783,1.948,784,1.292,785,4.742,786,1.292,787,3.552,788,3.552,789,3.913,790,1.292,791,3.444,792,2.582,793,1.292,794,3.158,795,1.948,796,1.753,797,2.244,798,2.244,799,2.323,800,1.491,801,1.292,802,1.292,803,1.292,804,2.323,805,2.244,806,1.292,807,1.292,808,1.738,809,1.122,810,1.292,811,1.292,812,1.122,813,3.552,814,1.292,815,4.021,816,1.292,817,1.122,818,1.01,819,1.292,820,1.292,821,1.292,822,2.974,823,1.292,824,1.292,825,1.292,826,2.244,827,2.974,828,1.292,829,1.292,830,1.292,831,1.292,832,1.122,833,1.292,834,1.292,835,1.292,836,1.292,837,1.292,838,1.292,839,1.292,840,1.292,841,1.292,842,1.292,843,1.292,844,1.292,845,1.292,846,1.292,847,1.292,848,1.292,849,1.292,850,1.292,851,2.244,852,1.753,853,1.292,854,1.292,855,1.292,856,1.292,857,1.292,858,1.292,859,1.948,860,1.01,861,1.292,862,4.409,863,1.122,864,1.122,865,2.244,866,2.244,867,2.244,868,2.244,869,2.244,870,2.244,871,2.244,872,2.244,873,2.244,874,1.292,875,1.292,876,1.292]],["title/modules/ExamModule.html",[178,1.711,246,2.459]],["body/modules/ExamModule.html",[3,0.16,4,0.145,5,0.116,22,0.015,23,1.478,37,0.846,41,0.761,49,0.239,50,0.006,74,0.009,75,0.009,96,3.157,98,1.07,130,2.498,178,2.516,180,1.864,181,1.864,182,2.081,183,2.081,184,1.864,185,3.211,186,3.4,190,2.935,191,2.081,192,1.864,198,2.551,212,2.935,213,2.782,246,4.989,247,4.295,248,3.12,484,1.62,499,2.772,521,1.301,579,1.771,581,1.611,596,4.295,631,3.598,634,2.081,638,1.864,640,2.366,641,2.213,704,3.598,706,4.167,712,2.172,808,4.459,809,3.092,877,3.092,878,3.092,879,3.092,880,3.562,881,4.741,882,4.459,883,4.295,884,4.295,885,4.295,886,3.562,887,3.562,888,3.562,889,3.562,890,4.936,891,5.023,892,3.598,893,2.551,894,2.935,895,3.598,896,2.551,897,3.562,898,3.092,899,3.562,900,2.081,901,3.598,902,2.551,903,2.551,904,3.562,905,3.562,906,3.092,907,3.562,908,3.562,909,3.562,910,3.562,911,3.562]],["title/injectables/ExamReportProvider.html",[39,0.845,883,2.459]],["body/injectables/ExamReportProvider.html",[3,0.078,4,0.07,5,0.12,8,0.198,9,0.862,10,2.027,12,1.049,14,1.049,19,0.7,21,1.545,22,0.015,23,1.267,24,0.317,25,1.231,30,1.768,31,2.601,35,0.357,37,0.702,39,0.613,41,0.368,49,0.116,50,0.003,52,0.896,54,1.765,58,1.498,60,1.188,61,1.195,62,1.427,64,2.276,68,0.818,69,0.746,70,1.12,71,1.805,74,0.005,75,0.005,98,0.518,101,0.606,141,1.427,149,0.862,154,0.78,156,2.558,219,0.685,223,2.583,229,0.858,233,1.666,302,0.78,315,1.746,316,0.818,317,0.952,319,3.793,322,1.501,332,1.138,333,1.891,420,0.606,484,2.049,489,1.927,505,1.072,515,2.37,520,1.427,533,1.348,540,0.952,555,2.242,558,1.065,560,1.146,562,2.784,563,2.96,575,1.498,585,1.072,601,2.638,607,2.638,626,1.783,627,2.878,629,1.666,630,1.146,633,3.197,634,1.008,638,0.903,639,1.008,640,1.146,641,1.072,645,1.236,656,2.493,664,3.198,666,1.348,674,1.146,694,2.852,695,2.508,733,2.638,739,2.643,757,2.326,758,2.242,760,2.242,777,1.008,796,3.353,852,4.774,859,2.491,860,4.774,883,1.783,900,1.008,902,1.236,903,1.236,912,4.732,913,1.498,914,2.491,915,2.491,916,2.87,917,2.491,918,2.87,919,1.498,920,1.726,921,2.242,922,2.87,923,1.726,924,2.242,925,2.87,926,1.726,927,1.907,928,2.87,929,2.96,930,4.732,931,1.726,932,2.242,933,3.726,934,2.87,935,1.726,936,2.87,937,1.726,938,1.907,939,1.726,940,2.491,941,2.491,942,1.348,943,1.348,944,2.242,945,1.348,946,4.017,947,2.878,948,3.075,949,1.498,950,3.684,951,2.667,952,2.667,953,3.353,954,3.684,955,1.348,956,1.498,957,3.198,958,2.491,959,2.87,960,2.242,961,2.87,962,2.242,963,2.87,964,2.491,965,1.726,966,1.726,967,1.726,968,1.726,969,1.498,970,1.726,971,1.498,972,1.498,973,2.055,974,1.726,975,1.726,976,1.726,977,1.726,978,2.87,979,1.726,980,1.726,981,1.498,982,1.726,983,4.293,984,1.726,985,1.726,986,1.726,987,1.726,988,1.726,989,1.726,990,1.726,991,1.726,992,2.87,993,2.87,994,2.491,995,2.491,996,1.348,997,1.726,998,1.726,999,2.447,1000,2.242,1001,2.447,1002,2.878,1003,1.146,1004,1.726,1005,4.293,1006,1.677,1007,1.726,1008,2.242,1009,1.726,1010,1.726,1011,1.726,1012,1.726,1013,1.726,1014,1.726,1015,1.726,1016,1.726,1017,1.907,1018,1.726,1019,1.726,1020,1.348,1021,1.348,1022,1.498,1023,0.903,1024,1.726,1025,0.903,1026,1.726,1027,1.726,1028,1.726,1029,1.726,1030,1.726,1031,1.726,1032,1.726,1033,1.726,1034,1.726,1035,1.726,1036,1.726,1037,1.726,1038,2.87,1039,1.726,1040,2.87,1041,1.726,1042,1.726,1043,1.726,1044,1.726,1045,1.726,1046,1.726,1047,2.87,1048,1.726,1049,1.726,1050,1.498,1051,1.726,1052,1.726,1053,1.726,1054,1.498,1055,1.726,1056,1.726,1057,1.726,1058,2.87,1059,4.293,1060,1.726,1061,1.726,1062,1.726,1063,1.726,1064,1.726,1065,1.726,1066,1.726,1067,1.498,1068,1.498,1069,1.726,1070,1.726,1071,1.726,1072,1.726,1073,1.498,1074,1.726,1075,1.726,1076,1.726,1077,1.726,1078,1.726,1079,1.726,1080,1.726,1081,1.726,1082,1.726,1083,1.726,1084,1.726,1085,1.726,1086,2.87,1087,1.726,1088,2.87,1089,1.726,1090,1.726,1091,1.726,1092,1.726]],["title/injectables/ExamService.html",[39,0.845,808,2.312]],["body/injectables/ExamService.html",[3,0.063,4,0.057,5,0.177,8,0.075,9,0.724,10,2.243,12,1.991,14,0.881,19,0.835,21,1.752,22,0.015,23,1.294,24,0.356,25,1.396,30,1.965,31,1.985,35,0.694,37,0.684,39,0.515,41,0.3,49,0.094,50,0.003,52,1.701,54,1.413,60,2.045,61,2.029,64,2.021,70,1.23,74,0.004,75,0.004,98,0.422,101,0.493,115,1.7,116,0.735,133,2.911,138,1.006,141,0.698,144,1.006,145,0.775,149,1.637,154,2.557,156,2.9,161,0.933,174,1.498,185,1.33,217,2.75,219,0.557,223,2.904,229,0.698,233,1.09,302,0.635,307,2.195,314,1.851,315,2.005,316,0.665,317,0.775,319,3.068,322,1.657,332,1.491,333,1.491,355,0.998,484,2.161,487,1.142,489,1.387,505,2.334,509,1.408,515,3.11,520,0.698,521,1.805,522,2.104,523,2.213,540,0.775,545,3.069,552,2.698,558,0.697,561,1.883,562,1.408,563,1.498,579,0.698,581,0.635,584,2.904,596,2.869,600,1.726,601,1.726,602,2.474,606,2.75,609,1.097,610,3.068,611,3.218,613,2.093,614,2.093,616,1.602,618,2.074,625,3.262,626,2.869,629,2.557,630,3.283,632,0.872,633,0.735,634,0.82,644,1.006,646,3.03,660,1.498,665,3.218,667,0.933,694,0.933,695,0.82,709,3.262,712,1.997,713,2.093,714,2.093,717,2.935,718,3.262,720,1.883,721,1.883,733,4.176,736,2.093,739,2.908,742,2.093,745,2.935,746,3.262,747,2.093,757,0.635,758,1.883,760,1.883,774,3.607,776,2.093,777,1.851,783,2.093,785,4.73,789,3.03,791,3.304,794,3.03,795,1.219,796,1.097,808,1.408,852,1.883,860,2.935,863,3.262,864,2.75,882,2.887,883,3.069,884,3.069,885,3.069,890,2.935,893,1.006,894,1.408,896,1.006,900,0.82,902,1.006,903,1.006,906,1.219,914,2.093,915,2.093,917,2.093,921,2.474,924,1.883,927,1.602,945,1.097,951,0.872,952,0.872,953,1.097,958,1.219,969,1.219,999,0.933,1000,1.883,1001,2.104,1002,2.474,1003,2.496,1008,1.097,1093,1.219,1094,2.411,1095,2.411,1096,2.411,1097,3.307,1098,1.883,1099,2.411,1100,2.411,1101,1.404,1102,2.75,1103,2.474,1104,1.404,1105,1.404,1106,1.404,1107,3.758,1108,3.758,1109,1.404,1110,2.411,1111,1.404,1112,1.404,1113,2.411,1114,1.404,1115,2.411,1116,1.404,1117,2.411,1118,1.404,1119,1.404,1120,2.411,1121,1.404,1122,2.093,1123,1.404,1124,2.093,1125,1.404,1126,2.093,1127,2.411,1128,1.219,1129,1.219,1130,1.097,1131,1.404,1132,1.219,1133,1.498,1134,1.404,1135,2.411,1136,2.411,1137,1.404,1138,1.404,1139,1.404,1140,4.23,1141,2.093,1142,1.404,1143,2.093,1144,2.411,1145,3.758,1146,3.262,1147,1.219,1148,1.404,1149,3.168,1150,1.404,1151,1.404,1152,2.093,1153,1.404,1154,1.404,1155,1.404,1156,1.006,1157,1.404,1158,1.404,1159,1.404,1160,1.097,1161,1.404,1162,1.404,1163,2.411,1164,1.404,1165,2.093,1166,2.411,1167,2.75,1168,1.404,1169,1.219,1170,2.411,1171,1.404,1172,1.404,1173,1.404,1174,1.404,1175,1.404,1176,1.404,1177,1.404,1178,1.404,1179,1.404]],["title/injectables/FetchExamAssignmentsProvider.html",[39,0.845,881,2.459]],["body/injectables/FetchExamAssignmentsProvider.html",[3,0.077,4,0.069,5,0.055,8,0.091,9,0.853,10,2.02,12,2.154,14,1.037,19,0.773,21,1.876,22,0.015,23,1.26,24,0.4,25,1.456,30,1.642,31,1.944,35,0.651,36,0.847,37,0.653,39,0.606,41,0.364,49,0.114,50,0.007,52,1.329,54,1.589,60,2.44,61,1.974,62,1.815,64,2.052,68,1.729,69,2.455,70,1.338,71,0.996,74,0.007,75,0.005,98,0.512,100,1.33,101,1.281,103,1.885,144,1.219,149,1.096,154,0.77,156,1.815,219,0.675,223,3.185,229,0.847,233,2.139,302,0.77,314,0.995,319,2.828,322,2.227,355,2.115,358,0.995,370,3.366,377,3.025,395,3.695,408,1.33,411,4.472,414,0.995,417,2.217,419,1.131,420,2.242,422,1.219,425,4.703,438,1.33,451,2.032,484,2.084,489,1.827,502,2.217,509,0.995,515,2.541,520,2.541,521,2.074,522,0.847,523,0.891,524,1.058,533,2.217,540,0.94,543,1.219,557,2.032,558,1.916,559,4.106,561,1.33,562,1.658,563,1.763,564,1.219,576,2.032,579,0.847,581,0.77,584,3.497,585,1.058,599,2.032,607,2.032,618,1.566,620,1.885,633,2.475,634,0.995,638,0.891,639,0.995,640,1.131,641,1.058,645,1.219,656,0.891,666,2.217,667,1.885,694,1.885,695,2.764,739,2.63,759,3.695,881,1.763,893,1.219,894,0.995,932,2.85,946,2.85,947,1.33,948,2.032,953,2.217,955,1.33,956,1.478,957,1.478,964,2.463,996,2.217,999,3.143,1000,1.33,1001,1.131,1002,2.217,1003,2.424,1006,0.995,1098,2.85,1141,1.478,1143,1.478,1160,1.33,1180,4.222,1181,1.33,1182,2.463,1183,3.167,1184,3.649,1185,4.257,1186,2.838,1187,2.838,1188,2.838,1189,2.838,1190,2.838,1191,1.702,1192,3.649,1193,3.649,1194,1.702,1195,1.702,1196,1.702,1197,2.838,1198,2.838,1199,2.463,1200,3.695,1201,2.838,1202,2.838,1203,2.838,1204,1.702,1205,1.702,1206,2.838,1207,2.838,1208,2.991,1209,2.838,1210,1.702,1211,2.463,1212,2.838,1213,2.838,1214,2.838,1215,1.702,1216,4.257,1217,2.014,1218,1.702,1219,1.702,1220,2.838,1221,1.702,1222,2.838,1223,2.838,1224,1.702,1225,1.702,1226,1.702,1227,1.131,1228,1.33,1229,1.33,1230,1.702,1231,1.478,1232,2.85,1233,1.33,1234,1.478,1235,1.702,1236,1.702,1237,1.478,1238,1.702,1239,1.702,1240,2.463,1241,1.478,1242,1.702,1243,1.702,1244,1.702,1245,1.702,1246,1.702,1247,1.702,1248,1.702,1249,2.838,1250,1.478,1251,1.478,1252,2.838,1253,2.838,1254,1.702,1255,1.702,1256,3.649,1257,2.838,1258,1.702,1259,1.702,1260,2.838,1261,1.702,1262,1.702,1263,1.478,1264,1.702,1265,1.702,1266,1.763,1267,2.838,1268,2.838,1269,1.478,1270,4.73,1271,1.131,1272,2.838,1273,2.838,1274,2.838,1275,1.763,1276,1.702,1277,1.702,1278,1.478,1279,1.702,1280,1.702,1281,1.702,1282,1.702,1283,2.032,1284,1.702,1285,1.702,1286,1.702,1287,1.702,1288,1.478,1289,1.702,1290,1.702,1291,1.702,1292,1.478,1293,2.838,1294,1.478,1295,1.702,1296,1.478,1297,1.702,1298,2.838,1299,1.702,1300,1.702,1301,1.702]],["title/classes/FetchQuestionParamsDto.html",[50,0.007,1302,2.629]],["body/classes/FetchQuestionParamsDto.html",[3,0.249,4,0.225,5,0.179,8,0.297,19,0.913,22,0.015,24,0.39,35,0.726,37,0.594,49,0.372,50,0.012,74,0.012,75,0.012,82,1.177,85,1.661,88,2.015,472,3.42,473,3.42,475,2.501,558,2.087,739,3.121,1208,3.983,1302,4.455,1303,6.265,1304,4.8,1305,4.165,1306,5.529,1307,5.529]],["title/classes/GenerateTokenProvider.html",[50,0.007,200,2.629]],["body/classes/GenerateTokenProvider.html",[3,0.215,4,0.195,5,0.156,8,0.257,9,1.843,10,2.033,12,2.241,14,2.241,15,4.161,16,6.546,17,5.873,18,6.191,19,0.835,21,2.033,22,0.015,23,1.361,24,0.393,25,1.469,30,1.387,35,0.655,37,0.766,38,2.801,41,1.024,42,3.433,43,3.745,44,4.161,45,2.801,49,0.322,50,0.009,52,1.915,53,4.161,63,5.571,64,1.618,70,0.985,74,0.011,75,0.011,84,4.161,85,1.44,133,2.801,154,2.168,200,4.076,411,5.108,422,3.433,1308,5.873,1309,4.161,1310,6.135,1311,4.794,1312,6.135,1313,4.794,1314,6.135,1315,4.794,1316,4.794,1317,4.794,1318,4.794,1319,4.794]],["title/classes/GlobalHttpExceptionFilter.html",[50,0.007,1320,3.091]],["body/classes/GlobalHttpExceptionFilter.html",[3,0.161,4,0.146,5,0.117,8,0.193,9,1.518,19,0.489,21,1.079,22,0.015,23,0.797,24,0.209,25,0.86,29,3.619,30,1.039,33,2.952,35,0.348,37,0.543,41,0.767,46,2.386,49,0.241,50,0.006,51,3.947,54,1.54,68,3.005,69,2.743,70,0.738,74,0.009,75,0.009,85,1.079,145,2.788,149,1.518,154,2.285,156,2.513,175,5.221,294,2.572,332,2.884,358,2.952,372,4.386,386,5.505,448,2.907,487,2.394,509,3.415,556,4.386,560,3.357,628,3.415,629,3.135,663,4.542,708,4.386,1320,3.947,1321,4.386,1322,6.017,1323,3.118,1324,7.27,1325,5.052,1326,5.052,1327,7.27,1328,5.052,1329,6.342,1330,5.052,1331,5.052,1332,3.947,1333,5.074,1334,3.357,1335,5.052,1336,4.386,1337,6.684,1338,4.386,1339,5.052,1340,5.052,1341,4.386,1342,3.619,1343,4.386,1344,5.845,1345,5.052,1346,6.342,1347,3.591,1348,5.052,1349,5.052,1350,5.052,1351,5.052,1352,5.052,1353,5.052,1354,5.052,1355,3.118,1356,3.591,1357,3.591,1358,5.052,1359,3.591,1360,3.591,1361,5.845,1362,3.591,1363,3.591,1364,3.591,1365,3.118,1366,2.805,1367,3.591,1368,3.591,1369,3.591,1370,3.118,1371,3.591]],["title/classes/GradeOeExamDto.html",[50,0.007,769,2.834]],["body/classes/GradeOeExamDto.html",[3,0.259,4,0.235,5,0.187,8,0.309,19,0.785,22,0.014,24,0.335,35,0.666,37,0.619,49,0.388,50,0.012,74,0.012,75,0.012,82,1.207,85,1.732,88,1.732,472,3.258,473,3.258,475,2.608,546,3.83,712,2.973,739,3.177,769,4.925,1305,3.581,1372,5.969,1373,5.765]],["title/injectables/GradeOeExamProvider.html",[39,0.845,882,2.312]],["body/injectables/GradeOeExamProvider.html",[3,0.106,4,0.096,5,0.077,8,0.198,9,1.111,10,1.984,12,1.884,14,1.351,19,0.702,21,1.549,22,0.015,23,1.144,24,0.299,25,1.234,30,1.318,31,1.962,35,0.639,36,1.174,37,0.709,39,0.789,41,0.504,49,0.159,50,0.004,52,1.609,54,1.672,60,1.53,61,2.084,64,2.279,70,1.15,71,1.599,74,0.007,75,0.007,98,0.709,100,1.844,101,0.829,109,1.303,141,1.838,154,1.068,219,0.936,223,3.201,229,1.174,233,2.532,314,1.379,315,2.159,316,1.118,317,1.303,322,1.235,332,1.466,402,2.647,420,0.829,484,1.653,489,0.709,509,1.379,558,0.683,581,1.068,584,1.118,598,1.568,607,3.263,632,1.466,638,1.235,639,1.379,640,1.568,641,1.466,645,1.691,656,2.928,662,2.887,663,2.647,665,2.04,677,3.263,694,1.568,695,2.662,712,2.567,739,2.229,757,2.685,882,2.16,894,1.379,896,1.691,900,1.379,902,1.691,903,1.691,919,2.049,921,2.887,945,1.844,947,1.844,948,1.691,949,2.049,994,2.049,995,3.209,996,1.844,999,4.122,1001,1.568,1003,3.425,1006,1.379,1017,3.719,1022,3.209,1023,1.235,1025,1.235,1067,3.209,1103,3.559,1130,1.844,1156,1.691,1165,2.049,1167,2.049,1169,2.049,1200,2.049,1208,2.04,1217,2.04,1237,2.049,1240,2.049,1241,3.209,1366,1.844,1374,4.372,1375,3.696,1376,3.696,1377,3.696,1378,3.625,1379,2.36,1380,3.696,1381,2.36,1382,3.696,1383,2.36,1384,3.696,1385,3.688,1386,4.009,1387,2.36,1388,1.691,1389,2.36,1390,2.049,1391,1.568,1392,3.696,1393,2.36,1394,2.36,1395,2.36,1396,2.36,1397,2.456,1398,2.36,1399,2.36,1400,2.36,1401,2.36,1402,2.36,1403,2.36,1404,2.36,1405,2.36,1406,2.36,1407,2.36,1408,3.209,1409,2.36,1410,2.36,1411,2.36,1412,2.36,1413,2.36,1414,3.209,1415,2.16,1416,2.36,1417,2.36,1418,2.36,1419,2.36,1420,2.36,1421,2.36,1422,1.568,1423,2.36,1424,2.36,1425,1.568,1426,2.36,1427,2.36,1428,2.36,1429,2.36,1430,2.36,1431,2.36,1432,2.36,1433,2.36,1434,2.36,1435,2.36,1436,2.36,1437,2.36,1438,2.36,1439,2.36,1440,2.36,1441,2.36,1442,2.36,1443,2.36,1444,1.379,1445,2.36,1446,2.36,1447,2.36,1448,2.36,1449,2.36,1450,2.36,1451,2.36,1452,3.696,1453,2.36,1454,2.36,1455,2.36,1456,2.36,1457,2.36,1458,2.36,1459,2.36,1460,3.696,1461,2.36,1462,2.36,1463,2.36,1464,2.36,1465,2.36,1466,2.36,1467,2.36,1468,2.36,1469,2.36,1470,2.36,1471,2.36]],["title/interfaces/GradingRequest.html",[76,1.022,1415,2.312]],["body/interfaces/GradingRequest.html",[3,0.223,4,0.202,5,0.161,8,0.266,22,0.015,24,0.449,25,1.501,35,0.801,74,0.011,75,0.011,76,1.775,78,2.144,82,1.1,355,2.053,420,1.741,1006,4.351,1023,2.594,1025,2.594,1217,3.986,1342,3.551,1386,5.172,1397,4.798,1415,3.662,1422,4.948,1425,4.948,1444,2.897,1472,3.551,1473,3.551,1474,5.641,1475,3.294]],["title/interfaces/GradingResult.html",[76,1.022,1444,2.312]],["body/interfaces/GradingResult.html",[3,0.231,4,0.21,5,0.167,8,0.276,22,0.015,24,0.437,35,0.797,74,0.012,75,0.012,76,1.805,78,2.226,82,1.126,355,2.131,420,2.454,1006,4.4,1023,3.829,1025,3.829,1217,2.841,1342,3.687,1386,3.687,1397,3.42,1415,3.007,1422,5.003,1425,5.003,1444,3.749,1472,3.687,1473,3.687,1474,4.021,1475,3.42]],["title/interfaces/IMcqQuestion.html",[76,1.022,1476,2.834]],["body/interfaces/IMcqQuestion.html",[3,0.192,4,0.174,5,0.138,8,0.229,22,0.015,24,0.424,35,0.781,49,0.382,54,0.983,74,0.01,75,0.01,76,1.467,78,1.844,82,0.997,149,1.281,151,2.833,333,1.692,355,1.765,360,3.331,414,2.491,430,3.054,460,4.439,487,2.021,521,2.336,527,3.702,551,3.331,558,2.24,620,2.833,792,3.702,1020,4.439,1133,2.649,1266,2.649,1334,2.833,1408,4.933,1476,4.578,1477,3.054,1478,3.054,1479,3.054,1480,3.702,1481,4.264,1482,4.264,1483,6.722,1484,5.915,1485,4.704,1486,6.655,1487,5.989,1488,7.573,1489,3.054,1490,3.702,1491,3.702,1492,3.331,1493,3.054,1494,3.054]],["title/interfaces/IOeQuestion.html",[76,1.022,1495,2.834]],["body/interfaces/IOeQuestion.html",[3,0.235,4,0.213,5,0.169,8,0.28,22,0.015,24,0.376,35,0.681,49,0.435,54,1.204,74,0.012,75,0.012,76,1.672,78,2.258,82,1.136,149,1.569,333,2.072,355,2.162,414,3.051,487,2.474,489,1.569,490,3.74,522,3.659,523,3.849,558,2.33,629,2.362,712,2.258,1020,5.497,1133,3.244,1266,3.244,1334,3.469,1478,3.74,1479,3.74,1492,4.079,1494,3.74,1495,5.04,1496,3.74,1497,5.222,1498,5.222,1499,4.079,1500,4.079,1501,4.533,1502,4.533,1503,3.74]],["title/interfaces/IResponse.html",[76,1.022,642,2.312]],["body/interfaces/IResponse.html",[3,0.178,4,0.161,5,0.128,8,0.212,22,0.015,24,0.357,25,1.293,29,3.867,33,3.155,35,0.64,36,2.685,49,0.363,63,4.218,69,2.335,70,1.422,71,2.159,74,0.01,75,0.01,76,1.588,78,1.709,82,0.948,120,2.831,141,3.287,145,2.98,149,1.188,174,4.106,231,3.587,233,2.442,307,3.861,315,1.873,316,1.873,332,2.995,333,2.995,355,2.235,448,2.685,484,1.989,487,2.558,505,3.354,509,3.155,515,2.685,552,3.155,628,4.042,629,2.989,642,3.593,649,5.162,698,5.338,757,2.442,800,4.391,924,4.218,932,4.218,1332,4.218,1334,4.391,1336,4.687,1338,4.687,1341,4.687,1370,4.687,1489,3.867,1504,3.087,1505,4.218,1506,5.399,1507,5.399,1508,5.399,1509,5.399,1510,5.399,1511,5.399,1512,5.399,1513,5.399,1514,5.399,1515,5.399,1516,4.687,1517,5.399]],["title/interfaces/IStudent.html",[76,1.022,1518,2.834]],["body/interfaces/IStudent.html",[3,0.224,4,0.203,5,0.204,8,0.268,22,0.015,23,1.53,24,0.366,35,0.738,49,0.423,54,1.151,74,0.011,75,0.011,76,1.625,78,2.159,82,1.105,149,1.5,212,2.917,333,1.981,414,2.917,420,2.42,451,4.938,484,1.39,487,2.366,489,2.29,494,3.9,618,2.756,927,3.317,951,4.636,973,5.345,1133,3.102,1266,3.102,1479,3.576,1480,4.334,1494,3.576,1499,3.9,1500,3.9,1518,4.938,1519,3.9,1520,4.993,1521,4.993,1522,4.993,1523,6.895,1524,6.295,1525,6.295,1526,3.9,1527,4.334,1528,3.576]],["title/injectables/InsertStudentProvider.html",[39,0.845,1529,2.459]],["body/injectables/InsertStudentProvider.html",[3,0.17,4,0.154,5,0.123,8,0.203,9,1.575,10,1.807,12,1.915,14,1.383,19,0.714,21,1.575,22,0.015,23,1.163,24,0.305,25,1.255,30,1.095,31,1.995,35,0.366,37,0.757,39,1.119,41,0.809,49,0.255,50,0.007,52,1.637,54,1.625,56,3.287,60,1.567,61,1.229,62,1.883,64,2.379,68,1.794,69,1.637,70,1.077,71,1.329,74,0.009,75,0.009,98,1.138,101,1.329,103,3.483,133,2.489,152,2.516,219,1.502,223,3.075,229,1.883,333,1.502,402,2.712,489,1.807,601,4.306,604,4.801,610,3.995,611,3.319,617,2.958,618,2.09,636,3.755,651,3.755,652,2.712,653,2.712,660,2.352,662,2.958,663,2.712,665,2.09,668,3.287,670,2.712,672,2.712,674,2.516,675,2.712,777,2.212,948,2.712,951,2.352,952,3.735,1003,2.516,1183,3.287,1283,2.712,1518,2.712,1528,3.755,1529,3.257,1530,5.219,1531,3.287,1532,5.219,1533,3.287,1534,3.786,1535,4.55,1536,3.287,1537,3.786,1538,2.516,1539,2.958,1540,3.483,1541,2.516,1542,2.958,1543,3.786,1544,3.786,1545,6.013,1546,3.786,1547,5.242,1548,3.786,1549,5.242,1550,3.786,1551,3.786,1552,3.786,1553,3.786,1554,3.786,1555,3.786,1556,5.242,1557,3.786,1558,3.786,1559,3.786,1560,3.786,1561,3.786,1562,3.786,1563,3.786,1564,3.287]],["title/classes/LoginDto.html",[50,0.007,286,2.629]],["body/classes/LoginDto.html",[3,0.205,4,0.186,5,0.148,8,0.245,19,0.809,22,0.015,24,0.345,35,0.677,37,0.638,49,0.307,50,0.011,74,0.011,75,0.011,82,1.043,83,4.509,85,1.37,87,4.509,88,1.785,149,1.785,169,2.386,231,3.947,286,3.947,332,2.357,420,2.457,446,3.947,447,5.157,448,3.481,454,5.161,457,5.467,458,6.076,459,5.467,460,6.204,461,6.076,462,6.076,463,6.076,465,3.959,466,5.467,470,4.389,471,5.157,472,3.131,473,3.131,474,3.563,475,2.063,479,3.959,480,3.959,481,3.959,1565,3.959,1566,4.561,1567,4.561,1568,5.941,1569,5.941,1570,5.941,1571,4.561,1572,4.561]],["title/classes/LoginStudentDto.html",[50,0.007,1573,2.629]],["body/classes/LoginStudentDto.html",[3,0.242,4,0.22,5,0.175,8,0.289,19,0.899,22,0.015,24,0.384,35,0.72,37,0.709,49,0.362,50,0.013,74,0.012,75,0.012,82,1.159,85,1.62,87,4.434,88,1.984,105,3.349,110,3.644,419,3.582,472,3.382,473,3.382,475,2.439,952,4.434,1305,3.349,1573,4.387,1574,6.196,1575,4.68,1576,5.391,1577,5.391,1578,5.391,1579,5.391]],["title/classes/Mcq.html",[50,0.007,521,1.446]],["body/classes/Mcq.html",[3,0.258,4,0.234,5,0.186,8,0.308,19,0.998,22,0.014,24,0.426,35,0.763,49,0.386,50,0.01,74,0.012,75,0.012,82,1.203,85,1.723,521,2.504,558,2.12,1275,4.554,1485,4.554,1580,4.978,1581,5.735,1582,5.735,1583,5.735]],["title/classes/McqQuestion.html",[50,0.007,579,1.968]],["body/classes/McqQuestion.html",[3,0.215,4,0.194,5,0.155,8,0.256,19,0.919,22,0.015,24,0.428,35,0.741,36,2.374,37,0.657,49,0.454,50,0.009,54,1.1,70,0.981,71,2.723,74,0.011,75,0.011,82,1.074,85,1.434,88,2.028,89,4.381,95,4.16,96,2.899,97,2.788,98,1.434,99,3.376,101,1.675,107,2.788,108,2.788,109,2.634,110,2.634,111,2.788,112,3.574,113,2.788,114,3.574,115,2.159,116,3.725,558,1.953,579,3.042,687,3.418,892,3.418,1227,3.171,1275,4.194,1485,4.194,1584,5.1,1585,3.171,1586,4.773,1587,4.773,1588,4.143,1589,4.143]],["title/interfaces/McqQuestionCache.html",[76,1.022,1590,2.629]],["body/interfaces/McqQuestionCache.html",[3,0.248,4,0.225,5,0.179,8,0.296,22,0.015,24,0.435,35,0.785,74,0.012,75,0.012,76,1.729,78,2.385,82,1.175,377,2.743,515,3.82,558,2.221,1271,3.664,1275,4.657,1590,4.789,1591,3.95,1592,3.95,1593,4.448]],["title/classes/OeExamGrading.html",[50,0.007,900,2.312]],["body/classes/OeExamGrading.html",[3,0.188,4,0.17,5,0.136,8,0.224,19,0.862,22,0.015,24,0.448,35,0.703,36,2.08,37,0.78,49,0.426,50,0.008,54,0.964,70,0.859,71,2.549,74,0.01,75,0.01,82,0.984,85,1.256,88,1.902,95,4.121,96,2.658,97,2.443,98,1.256,99,3.096,101,2.222,107,2.443,108,2.443,109,2.308,110,2.308,111,2.443,112,3.277,113,2.443,114,3.277,115,1.891,116,3.539,233,2.537,358,3.277,420,1.969,484,1.964,581,2.863,638,3.691,641,2.598,677,4.533,687,2.995,689,4.382,696,5.871,757,2.863,894,2.443,900,3.277,901,2.995,999,4.205,1023,2.935,1025,2.935,1217,3.096,1388,2.995,1397,3.727,1594,4.844,1595,2.995,1596,4.182,1597,4.182,1598,4.182,1599,4.182,1600,4.182,1601,4.182,1602,3.63,1603,3.63]],["title/classes/OeQuestion.html",[50,0.007,581,1.79]],["body/classes/OeQuestion.html",[3,0.238,4,0.215,5,0.172,8,0.284,19,0.72,22,0.015,24,0.379,35,0.631,37,0.701,49,0.476,50,0.01,54,1.218,70,1.086,71,2.29,74,0.012,75,0.012,82,1.145,85,1.588,88,1.588,95,4.134,96,3.091,97,3.088,98,1.588,99,3.6,101,1.856,107,3.088,108,3.088,109,2.917,110,2.917,111,3.088,112,3.811,113,3.088,114,3.811,115,2.391,558,2.046,581,2.95,895,3.786,1391,3.512,1585,3.512,1588,4.588,1604,4.672,1605,4.588]],["title/interfaces/OeQuestionCache.html",[76,1.022,1593,2.629]],["body/interfaces/OeQuestionCache.html",[3,0.252,4,0.229,5,0.182,8,0.301,22,0.015,24,0.422,35,0.78,74,0.012,75,0.012,76,1.748,78,2.428,82,1.188,377,2.793,515,3.839,558,2.233,1271,3.731,1275,3.488,1590,4.497,1591,4.022,1592,4.022,1593,4.827]],["title/interfaces/OpenaiApiResponse.html",[76,1.022,1475,2.629]],["body/interfaces/OpenaiApiResponse.html",[3,0.248,4,0.225,5,0.179,8,0.296,22,0.015,24,0.32,35,0.785,74,0.012,75,0.012,76,1.861,78,2.385,82,1.175,355,2.984,420,1.936,1006,3.912,1023,2.886,1025,2.886,1217,3.044,1342,5.369,1386,3.95,1397,3.664,1415,3.222,1422,4.448,1425,4.448,1444,3.222,1472,3.95,1473,3.95,1474,4.308,1475,4.448]],["title/modules/OpenaiModule.html",[178,1.711,247,2.459]],["body/modules/OpenaiModule.html",[3,0.247,4,0.223,5,0.178,22,0.015,37,0.717,41,1.172,49,0.369,50,0.01,74,0.012,75,0.012,178,3.11,180,2.871,181,2.871,182,3.206,183,3.206,184,2.871,185,3.97,186,4.202,190,3.899,191,3.206,192,2.871,247,4.904,1378,4.757,1606,4.763,1607,4.763,1608,4.763,1609,5.487,1610,5.487]],["title/injectables/OpenaiService.html",[39,0.845,1378,2.312]],["body/injectables/OpenaiService.html",[3,0.113,4,0.103,5,0.173,8,0.135,9,1.17,10,1.833,12,2.514,14,1.422,19,0.831,21,1.605,22,0.015,23,1.281,24,0.381,25,1.279,30,1.545,31,1.481,33,2.777,35,0.666,36,1.255,37,0.62,39,0.831,41,0.539,45,1.474,49,0.17,50,0.005,52,1.668,54,1.614,60,1.044,61,1.542,62,2.364,64,2.059,68,2.252,69,2.497,70,1.349,74,0.01,75,0.007,82,0.683,133,2.526,144,1.807,154,1.141,219,1.001,223,1.195,233,2.417,252,4.766,366,3.379,379,3.041,408,1.971,420,1.366,448,1.255,474,1.971,476,2.19,484,0.703,489,1.605,490,1.807,505,1.567,558,1.126,560,1.676,562,3.122,565,1.971,585,2.418,611,2.623,615,1.676,629,2.417,656,1.32,695,2.777,757,1.761,789,3.827,794,1.807,799,3.041,804,1.971,1006,2.777,1008,1.971,1023,2.487,1025,2.487,1050,2.19,1098,1.971,1128,2.19,1133,1.567,1211,2.19,1233,1.971,1269,2.19,1294,2.19,1333,2.19,1343,2.19,1366,3.041,1378,2.274,1414,2.19,1415,3.564,1422,3.158,1425,3.158,1444,1.474,1484,1.971,1505,1.971,1526,1.971,1611,2.19,1612,4.753,1613,3.893,1614,5.343,1615,3.893,1616,3.893,1617,2.523,1618,3.893,1619,3.893,1620,2.523,1621,2.523,1622,3.893,1623,2.523,1624,3.893,1625,2.523,1626,2.19,1627,4.51,1628,2.523,1629,2.523,1630,2.523,1631,2.523,1632,2.523,1633,2.523,1634,2.19,1635,2.523,1636,2.523,1637,2.523,1638,2.523,1639,2.523,1640,2.523,1641,3.893,1642,4.753,1643,2.523,1644,4.753,1645,2.523,1646,2.523,1647,1.971,1648,3.893,1649,2.523,1650,2.523,1651,2.523,1652,2.523,1653,4.753,1654,2.523,1655,2.19,1656,2.523,1657,2.19,1658,2.523,1659,2.523,1660,2.523,1661,2.523,1662,2.523,1663,2.523,1664,2.523,1665,2.523,1666,2.523,1667,2.523,1668,2.523,1669,2.523,1670,3.379,1671,2.523,1672,2.523,1673,2.523,1674,3.893,1675,2.523,1676,2.523,1677,2.523,1678,2.19,1679,2.523,1680,2.523,1681,2.523,1682,2.523,1683,2.523,1684,2.19,1685,2.523,1686,2.523,1687,2.523,1688,2.523,1689,2.523,1690,2.523,1691,2.523,1692,2.19,1693,3.893,1694,2.523,1695,2.523,1696,2.523,1697,2.523,1698,2.523,1699,2.523,1700,2.523,1701,2.523,1702,2.523,1703,2.523,1704,2.523,1705,2.523,1706,2.523,1707,2.523,1708,2.523,1709,2.523,1710,2.523,1711,2.523,1712,2.523,1713,3.893,1714,3.893,1715,4.753,1716,4.753,1717,5.773,1718,2.523,1719,2.19,1720,2.523,1721,2.523,1722,2.523,1723,2.523,1724,4.753,1725,2.523,1726,2.523,1727,2.523,1728,2.523,1729,2.523,1730,2.523,1731,2.523,1732,2.19,1733,2.523,1734,3.379,1735,3.893,1736,2.523,1737,2.523,1738,2.523,1739,2.523,1740,2.523,1741,2.523,1742,2.523,1743,2.523,1744,2.523,1745,2.523,1746,2.523]],["title/interfaces/QuestionResponse.html",[76,1.022,938,2.629]],["body/interfaces/QuestionResponse.html",[3,0.241,4,0.218,5,0.174,8,0.288,22,0.014,24,0.431,25,1.778,35,0.786,49,0.443,74,0.012,75,0.012,76,1.7,78,2.32,82,1.155,420,2.5,558,2.148,757,2.426,929,3.333,938,4.732,960,4.191,962,4.191,1017,3.564,1021,5.801,1023,3.885,1025,3.885,1747,4.191]],["title/classes/Student.html",[50,0.007,489,1.189]],["body/classes/Student.html",[3,0.223,4,0.202,5,0.161,8,0.369,19,0.854,22,0.015,24,0.399,35,0.699,37,0.673,49,0.462,50,0.009,54,1.143,70,1.019,71,2.789,74,0.011,75,0.011,82,1.1,85,1.49,88,1.883,89,4.489,90,4.164,95,4.015,96,2.97,97,2.897,98,1.49,99,3.459,101,1.741,107,2.897,108,2.897,109,2.737,110,2.737,111,2.897,112,3.662,113,2.897,114,3.662,115,2.243,116,3.279,489,1.883,951,4.27,952,4.27,1538,3.294,1748,3.551,1749,4.959,1750,4.959,1751,3.551,1752,4.304]],["title/classes/StudentAnswerDto.html",[50,0.007,1753,2.629]],["body/classes/StudentAnswerDto.html",[3,0.25,4,0.226,5,0.18,8,0.298,19,0.916,22,0.015,24,0.391,35,0.727,37,0.597,49,0.374,50,0.012,74,0.012,75,0.012,82,1.18,85,1.67,88,2.021,472,3.187,473,3.427,475,2.514,1217,3.992,1305,3.453,1485,4.493,1753,4.469,1754,6.279,1755,4.824,1756,5.558,1757,5.558,1758,5.558,1759,5.558,1760,5.558]],["title/controllers/StudentController.html",[128,1.875,1761,2.834]],["body/controllers/StudentController.html",[3,0.167,4,0.151,5,0.12,8,0.199,9,1.553,10,2.355,12,1.355,14,1.355,19,0.921,21,2.032,22,0.015,23,1.501,24,0.393,25,1.619,30,1.956,35,0.576,37,0.787,41,0.792,49,0.249,50,0.007,52,1.158,70,1.39,74,0.009,75,0.009,88,2.032,128,1.757,130,1.844,132,2.656,133,3.245,154,3.059,155,2.656,156,1.844,158,2.656,283,2.464,284,3.701,293,2.897,294,2.656,300,2.304,302,1.677,304,4.645,305,3.219,308,3.219,489,1.114,521,1.355,558,1.073,605,3.474,632,3.21,712,1.604,717,4.036,817,3.219,818,2.897,1208,2.852,1302,4.653,1385,4.351,1573,4.653,1761,3.701,1762,3.219,1763,5.167,1764,4.485,1765,4.485,1766,3.708,1767,5.167,1768,3.708,1769,3.708,1770,5.167,1771,3.708,1772,3.708,1773,3.708,1774,3.708,1775,3.219,1776,4.653,1777,3.708,1778,3.708,1779,3.219,1780,3.708,1781,3.708,1782,3.219,1783,3.219,1784,3.219,1785,3.219,1786,3.219,1787,4.485,1788,3.708,1789,3.708,1790,3.708,1791,3.708,1792,3.708,1793,3.708,1794,3.708,1795,3.708,1796,3.708,1797,3.708,1798,3.708,1799,3.708,1800,3.708]],["title/modules/StudentModule.html",[178,1.711,248,2.459]],["body/modules/StudentModule.html",[3,0.216,4,0.196,5,0.156,22,0.015,23,1.068,37,0.825,41,1.028,49,0.324,50,0.009,74,0.011,75,0.011,96,2.282,98,1.447,130,3.06,178,2.932,180,2.519,181,2.519,182,2.813,183,2.813,184,2.519,185,3.742,186,3.961,190,3.594,191,2.813,192,2.519,198,3.449,212,2.813,213,3.761,246,3.822,248,4.874,489,1.447,605,4.676,631,4.406,1529,4.69,1539,3.761,1751,4.406,1761,4.856,1784,4.18,1801,4.18,1802,4.18,1803,4.18,1804,4.815,1805,4.815,1806,4.815,1807,4.18,1808,4.815,1809,4.815]],["title/interfaces/StudentResponseData.html",[76,1.022,929,2.459]],["body/interfaces/StudentResponseData.html",[3,0.244,4,0.221,5,0.176,8,0.291,22,0.015,24,0.433,35,0.787,49,0.445,74,0.012,75,0.012,76,1.71,78,2.343,82,1.162,420,1.902,558,1.567,757,3.37,929,4.114,938,4.951,960,5.821,962,5.821,1017,4.951,1021,4.233,1023,2.835,1025,2.835,1747,4.233]],["title/injectables/StudentService.html",[39,0.845,605,2.312]],["body/injectables/StudentService.html",[3,0.123,4,0.112,5,0.089,8,0.147,9,1.247,10,2.291,12,2.19,14,1.516,19,0.892,21,1.968,22,0.015,23,1.453,24,0.38,25,1.568,30,1.824,31,1.58,35,0.485,37,0.788,38,1.603,39,0.886,40,1.965,41,0.586,49,0.184,50,0.005,52,1.871,54,1.509,60,1.718,61,1.347,64,2.329,70,1.386,74,0.007,75,0.007,87,1.704,98,0.824,101,0.963,133,3.157,141,2.49,154,2.711,219,1.089,223,2.644,229,1.365,284,1.965,307,1.603,314,1.603,315,2.988,316,1.3,317,1.514,332,2.378,333,1.986,420,0.963,438,2.143,484,1.756,489,1.801,521,1.003,558,1.448,584,2.372,585,1.704,605,2.425,610,2.757,611,2.763,629,1.241,631,1.965,632,2.578,643,3.603,656,2.171,677,2.973,695,2.425,712,1.795,800,2.757,808,3.94,881,4.189,882,3.826,890,2.143,898,2.382,946,2.143,952,1.704,973,1.965,1017,2.757,1132,2.382,1180,1.965,1208,1.514,1302,3.982,1374,2.143,1385,3.724,1529,4.068,1532,4.345,1533,2.382,1535,3.603,1536,2.382,1538,1.823,1539,2.143,1564,2.382,1573,3.982,1678,2.382,1764,3.603,1765,3.603,1775,3.603,1776,3.982,1779,3.603,1782,2.382,1783,2.382,1785,2.382,1786,2.382,1787,3.603,1807,2.382,1810,2.382,1811,4.15,1812,4.15,1813,4.15,1814,2.744,1815,4.15,1816,2.744,1817,4.15,1818,2.744,1819,2.744,1820,4.15,1821,2.744,1822,2.744,1823,2.744,1824,2.744,1825,2.744,1826,2.744,1827,2.744,1828,2.744,1829,2.744,1830,2.744,1831,2.744,1832,2.744,1833,2.744,1834,2.744,1835,2.744,1836,2.744,1837,2.744,1838,2.744,1839,2.744,1840,2.744,1841,2.744,1842,2.744,1843,2.744,1844,2.744,1845,2.744,1846,2.744,1847,4.15,1848,2.744,1849,2.744]],["title/classes/SubmitMcqExamDto.html",[50,0.007,1776,2.629]],["body/classes/SubmitMcqExamDto.html",[3,0.227,4,0.205,5,0.164,8,0.27,19,0.943,22,0.015,24,0.435,35,0.703,37,0.744,49,0.339,50,0.012,71,1.769,74,0.011,75,0.011,82,1.111,85,1.514,88,2.08,105,3.131,472,3.281,473,3.281,475,2.279,489,1.514,521,2.654,546,3.348,620,3.348,739,2.994,757,3.132,1208,3.822,1305,3.934,1753,4.826,1776,4.207,1850,5.674,1851,5.04,1852,4.375,1853,4.375,1854,5.04,1855,5.04,1856,5.497,1857,5.497,1858,5.04,1859,4.375]],["title/classes/SubmitOeExamDto.html",[50,0.007,1385,2.459]],["body/classes/SubmitOeExamDto.html",[3,0.227,4,0.206,5,0.164,8,0.271,19,0.944,22,0.015,24,0.435,35,0.704,37,0.745,49,0.34,50,0.012,71,1.773,74,0.011,75,0.011,82,1.113,85,1.518,88,2.083,105,3.138,472,3.284,473,3.284,475,2.285,489,1.518,546,3.356,620,3.356,712,3.144,739,2.997,757,3.135,1208,3.826,1305,3.939,1385,3.939,1753,4.83,1850,5.679,1852,4.385,1853,4.385,1856,5.505,1857,5.505,1859,4.385,1860,5.051,1861,5.051,1862,5.051]],["title/classes/UpdateExamParamDto.html",[50,0.007,773,2.834]],["body/classes/UpdateExamParamDto.html",[3,0.22,4,0.2,5,0.159,8,0.263,19,0.668,22,0.015,24,0.285,35,0.602,37,0.669,49,0.33,50,0.011,74,0.011,75,0.011,82,1.092,85,1.473,88,1.473,90,4.778,115,3.253,149,1.87,169,2.565,384,5.402,446,3.257,448,3.576,470,4.134,472,2.949,473,2.949,475,2.217,484,2.171,519,5.617,521,2.274,548,4.861,665,3.969,710,4.457,711,5.402,712,2.691,739,3.21,773,4.457,1001,4.134,1863,5.402,1864,4.256,1865,6.223,1866,4.902,1867,4.902,1868,6.837]],["title/injectables/UpdateMcqExamProvider.html",[39,0.845,884,2.459]],["body/injectables/UpdateMcqExamProvider.html",[3,0.118,4,0.107,5,0.209,8,0.141,9,1.208,10,1.466,12,2.266,14,1.469,19,0.664,21,1.466,22,0.015,23,1.082,24,0.36,25,1.168,30,1.58,31,1.53,35,0.472,37,0.733,39,0.858,41,0.562,49,0.177,50,0.005,52,1.523,54,1.534,60,2.261,61,2.013,62,1.308,64,2.178,68,1.246,69,1.137,70,0.826,74,0.007,75,0.007,98,0.79,101,0.923,103,1.747,133,2.019,141,1.308,145,1.452,149,1.466,152,1.747,156,2.426,219,1.044,223,3.058,229,1.308,302,1.19,314,2.348,315,1.904,316,1.246,317,1.452,322,2.103,332,1.044,355,1.664,484,2.064,499,2.692,515,1.999,520,1.308,521,2.799,540,1.452,543,1.884,552,2.348,558,0.761,579,1.308,584,3.512,598,1.747,599,2.879,600,2.879,604,4.287,611,2.692,615,3.628,616,2.67,618,3.014,619,2.879,626,2.497,628,2.348,629,1.818,630,3.241,633,1.376,634,1.537,636,2.879,642,1.537,644,1.884,646,2.879,647,2.055,649,4.845,651,3.494,652,1.884,653,1.884,656,1.376,659,2.055,660,3.655,665,2.218,667,1.747,670,1.884,672,1.884,674,1.747,675,1.884,710,2.879,720,3.81,739,2.109,774,4.596,777,3.888,781,3.81,800,1.747,832,4.234,884,2.497,893,1.884,894,1.537,1097,2.879,1102,3.489,1122,2.283,1129,2.283,1156,1.884,1227,1.747,1263,4.741,1275,1.634,1283,1.884,1476,3.911,1477,1.884,1485,2.497,1493,2.879,1540,2.67,1541,1.747,1542,2.055,1719,3.489,1869,4.266,1870,4.019,1871,4.019,1872,2.63,1873,2.63,1874,4.019,1875,2.63,1876,4.019,1877,5.461,1878,4.019,1879,2.63,1880,3.489,1881,3.489,1882,4.019,1883,4.019,1884,4.019,1885,3.489,1886,3.489,1887,4.019,1888,3.489,1889,2.283,1890,2.283,1891,2.283,1892,2.055,1893,2.63,1894,2.63,1895,2.63,1896,2.63,1897,2.283,1898,2.283,1899,2.283,1900,2.283,1901,2.63,1902,2.63,1903,2.63,1904,2.63,1905,2.63,1906,2.63,1907,2.63,1908,2.63,1909,2.63,1910,2.283,1911,2.283,1912,2.63]],["title/injectables/UpdateOeExamProvider.html",[39,0.845,885,2.459]],["body/injectables/UpdateOeExamProvider.html",[3,0.125,4,0.113,5,0.196,8,0.149,9,1.26,10,1.517,12,2.054,14,1.533,19,0.571,21,1.26,22,0.015,23,0.931,24,0.35,25,1.004,30,1.213,31,1.596,35,0.489,37,0.771,39,0.896,41,0.594,49,0.187,50,0.005,52,1.755,54,1.517,60,2.497,61,1.957,62,1.384,64,2.285,68,1.319,69,1.203,70,0.572,74,0.008,75,0.008,98,0.836,101,0.977,103,1.849,133,2.09,141,1.384,145,1.536,149,1.26,152,1.849,156,2.511,219,1.104,223,3.118,229,1.384,302,1.259,314,2.451,315,1.988,316,1.319,317,1.536,322,2.195,332,1.104,484,2.085,499,2.787,515,2.086,520,1.384,522,2.795,523,2.941,540,1.536,552,2.451,558,0.805,581,1.259,584,3.346,598,1.849,599,3.004,600,3.004,604,4.371,611,3.499,615,2.787,616,2.787,619,3.004,626,3.492,628,2.451,629,1.897,630,3.354,633,1.456,634,1.626,636,3.004,642,1.626,644,1.993,646,3.004,647,2.174,651,3.616,652,1.993,653,1.993,656,1.456,659,2.174,660,1.729,665,3.102,667,1.849,670,1.993,672,1.993,674,1.849,675,1.993,710,3.004,712,3.102,721,3.944,739,2.183,777,3.524,781,2.174,789,3.616,794,3.616,800,1.849,804,2.174,885,2.606,894,1.626,896,1.993,955,2.174,1097,3.004,1103,3.277,1124,2.415,1130,2.174,1146,4.879,1156,1.993,1160,2.174,1278,3.641,1283,1.993,1378,3.844,1390,2.415,1391,1.849,1495,1.993,1496,1.993,1503,3.004,1540,1.849,1541,1.849,1542,2.174,1626,4.879,1627,2.174,1734,2.415,1869,3.944,1880,3.641,1881,3.641,1885,3.641,1888,3.641,1889,2.415,1890,2.415,1891,2.415,1892,2.174,1897,2.415,1898,2.415,1899,2.415,1900,3.641,1910,2.415,1911,2.415,1913,2.783,1914,2.783,1915,2.783,1916,4.195,1917,4.195,1918,2.783,1919,2.783,1920,2.783,1921,2.783,1922,2.783,1923,2.783,1924,2.783,1925,2.783,1926,2.783,1927,2.783,1928,2.783,1929,2.415,1930,2.783,1931,2.783,1932,2.783,1933,2.783,1934,2.783,1935,2.783,1936,2.783,1937,2.783]],["title/coverage.html",[1938,4.221]],["body/coverage.html",[0,2.873,1,1.558,5,0.076,6,2.036,7,2.036,22,0.015,24,0.383,39,1.531,47,1.832,50,0.014,61,0.761,74,0.007,75,0.007,76,1.803,77,1.68,79,2.036,80,1.924,81,2.036,86,3.249,106,1.68,117,1.68,120,4.24,128,2.644,129,1.68,131,2.036,136,1.558,159,1.37,184,1.227,189,1.457,194,1.68,200,1.558,210,1.68,220,2.036,237,1.68,238,2.036,239,1.457,277,2.036,282,2.036,283,1.558,286,1.558,310,2.036,315,1.111,316,1.743,334,2.036,345,1.832,370,1.457,377,2.256,398,2.036,444,2.036,445,2.036,482,1.68,483,2.873,484,1.785,485,2.036,489,0.705,499,1.294,519,1.832,521,1.658,545,1.457,546,3.413,558,0.678,579,1.166,581,1.061,596,1.457,597,2.036,598,3.413,605,1.37,633,1.227,638,1.227,639,1.37,642,1.37,656,4.272,676,3.249,692,3.249,693,3.249,704,1.68,706,1.68,707,2.036,712,2.221,769,1.68,773,1.68,808,1.37,881,1.457,882,1.37,883,1.457,884,1.457,885,1.457,892,1.68,895,1.68,900,1.37,901,1.68,912,2.036,913,2.036,929,1.457,938,1.558,942,1.832,943,1.832,944,1.832,1093,2.036,1180,2.634,1181,2.873,1227,1.558,1228,1.832,1229,1.832,1232,1.832,1271,1.558,1302,1.558,1303,2.036,1304,2.036,1308,2.036,1309,2.036,1320,1.832,1321,2.036,1322,2.036,1323,2.036,1372,2.036,1374,1.832,1378,1.37,1385,1.457,1388,1.68,1391,1.558,1415,1.37,1444,1.37,1472,3.249,1473,3.249,1475,1.558,1476,1.68,1477,2.634,1478,3.679,1493,1.68,1495,1.68,1496,2.634,1503,1.68,1504,2.873,1518,1.68,1519,2.873,1528,1.68,1529,1.457,1530,2.036,1531,2.036,1538,1.558,1540,1.558,1541,1.558,1565,2.036,1573,1.558,1574,2.036,1575,2.036,1580,2.036,1584,3.249,1585,3.933,1590,1.558,1591,3.249,1592,3.249,1593,1.558,1594,3.249,1595,3.249,1604,3.249,1611,2.036,1684,2.036,1692,5.72,1747,2.873,1748,3.249,1751,1.68,1753,1.558,1754,2.036,1755,2.036,1761,1.68,1762,2.036,1776,1.558,1810,2.036,1850,2.873,1863,2.036,1864,2.036,1869,2.873,1938,1.832,1939,1.832,1940,2.345,1941,5.92,1942,3.192,1943,7.245,1944,7.642,1945,2.036,1946,2.036,1947,2.036,1948,2.036,1949,6.872,1950,5.58,1951,6.408,1952,3.677,1953,3.192,1954,3.192,1955,7.245,1956,3.677,1957,4.537,1958,2.345,1959,2.345,1960,3.677,1961,3.677,1962,2.345,1963,2.345,1964,2.345,1965,2.345,1966,2.345,1967,2.345,1968,6.19,1969,2.345,1970,2.345,1971,4.537,1972,2.036,1973,3.677,1974,2.036,1975,2.345,1976,2.345,1977,2.036,1978,2.345,1979,2.345]],["title/dependencies.html",[181,2.491,1980,2.868]],["body/dependencies.html",[22,0.015,41,1.099,42,3.687,45,3.007,46,4.263,50,0.012,74,0.012,75,0.012,98,1.547,101,1.807,102,4.021,105,3.198,169,2.693,181,2.693,209,4.021,343,4.468,374,4.021,375,5.461,377,3.191,378,5.57,379,4.021,475,2.328,733,3.687,734,4.468,812,4.468,940,4.468,941,4.468,1602,4.468,1627,4.021,1981,6.417,1982,6.991,1983,5.148,1984,5.148,1985,5.148,1986,5.148,1987,5.148,1988,5.148,1989,5.148,1990,5.148,1991,5.148,1992,5.148,1993,5.148,1994,5.148,1995,5.148,1996,5.148,1997,5.148,1998,5.148,1999,5.148,2000,5.148,2001,5.148,2002,5.148,2003,5.148,2004,5.148,2005,5.148]],["title/miscellaneous/enumerations.html",[2006,1.823,2007,4.132]],["body/miscellaneous/enumerations.html",[8,0.311,22,0.014,24,0.337,74,0.012,75,0.012,146,5.031,300,4.285,419,4.583,430,4.151,484,1.614,520,3.431,521,2.52,522,2.883,523,3.032,524,3.601,551,4.528,579,2.883,581,2.622,584,3.268,712,2.983,818,4.528,1479,4.151,2006,3.199,2007,5.031,2008,5.796,2009,7.622,2010,4.528,2011,5.796,2012,5.796]],["title/miscellaneous/functions.html",[2006,1.823,2013,4.132]],["body/miscellaneous/functions.html",[5,0.229,8,0.226,19,0.573,21,2.124,22,0.014,23,1.568,24,0.369,25,1.692,30,2.044,33,2.458,35,0.748,74,0.01,75,0.01,76,1.086,120,4.033,149,1.692,184,3.321,233,1.902,307,2.458,315,2.668,316,1.993,319,3.741,332,2.234,333,2.69,355,2.628,360,3.286,411,3.013,414,2.458,487,1.993,489,1.692,490,3.013,553,3.651,555,3.286,615,2.795,616,4.218,619,3.013,623,3.651,627,3.286,628,3.29,629,3.066,642,3.29,739,2.435,757,1.902,777,3.29,927,3.741,929,3.498,930,4.888,933,3.651,942,4.399,943,3.286,944,5.296,971,3.651,972,3.651,981,3.651,1073,3.651,1199,4.888,1208,2.322,1217,2.322,1228,4.399,1229,4.399,1250,3.651,1266,2.613,1292,3.651,1332,3.286,1334,2.795,1489,3.013,1504,4.399,1505,3.286,1540,3.741,1541,2.795,1647,3.286,1953,3.651,1954,5.511,1972,3.651,1974,4.888,1977,4.888,2006,2.322,2013,3.651,2014,4.206,2015,5.631,2016,4.206,2017,4.206,2018,4.206,2019,4.206,2020,4.206,2021,5.631,2022,4.206,2023,4.206,2024,5.631,2025,4.206,2026,4.206,2027,4.206,2028,4.206,2029,4.206,2030,5.631,2031,3.651]],["title/index.html",[8,0.177,2032,2.868,2033,2.868]],["body/index.html",[4,0.175,22,0.014,74,0.01,75,0.01,149,1.291,192,3.578,359,3.731,448,3.192,451,3.078,495,3.731,502,5.013,522,2.138,584,2.037,1068,6.484,1097,3.078,1147,3.731,1152,4.959,1251,5.936,1365,3.731,1634,5.936,1647,3.357,1657,3.731,1886,3.731,1892,4.463,1938,3.357,1939,3.357,2031,4.959,2034,4.298,2035,4.298,2036,6.417,2037,4.298,2038,4.298,2039,4.298,2040,4.298,2041,4.298,2042,6.417,2043,4.298,2044,4.298,2045,4.298,2046,4.298,2047,7.469,2048,4.298,2049,4.298,2050,4.298,2051,4.298,2052,4.298,2053,4.298,2054,6.417,2055,4.298,2056,5.713,2057,4.298,2058,4.298,2059,4.298,2060,4.298,2061,4.298,2062,4.298,2063,4.298,2064,4.298,2065,6.839,2066,5.713,2067,4.298,2068,6.417,2069,5.936,2070,4.298,2071,4.298,2072,4.298,2073,4.298,2074,4.298,2075,4.298,2076,6.417,2077,4.298,2078,4.298,2079,4.298,2080,4.298,2081,4.298,2082,4.298,2083,4.298,2084,4.298,2085,4.298,2086,4.298,2087,5.713,2088,4.298,2089,4.298,2090,5.713,2091,4.298,2092,4.298,2093,4.298,2094,4.959,2095,5.713,2096,4.298,2097,4.298,2098,4.298,2099,4.298,2100,4.298,2101,4.298,2102,4.298,2103,4.298,2104,4.298,2105,4.298,2106,3.731,2107,4.298,2108,4.298,2109,4.298,2110,4.298,2111,4.298,2112,4.298,2113,3.078]],["title/license.html",[2032,2.868,2033,2.868,2113,2.366]],["body/license.html",[22,0.011,46,3.348,74,0.011,75,0.011,192,2.637,506,4.375,560,3.348,604,3.348,745,3.937,791,3.937,1126,5.497,1182,4.375,1296,5.497,1487,3.937,1516,4.375,1655,5.497,1732,4.375,1929,4.375,1939,3.937,2094,4.375,2113,3.609,2114,6.924,2115,5.04,2116,5.04,2117,6.332,2118,5.04,2119,5.04,2120,5.04,2121,5.04,2122,5.04,2123,5.04,2124,7.91,2125,5.04,2126,6.924,2127,5.04,2128,5.04,2129,5.04,2130,5.04,2131,5.04,2132,5.04,2133,5.04,2134,5.04,2135,5.04,2136,6.332,2137,5.04,2138,5.04,2139,5.04,2140,5.04,2141,5.04,2142,5.04,2143,5.04,2144,6.332,2145,6.332,2146,5.04,2147,5.04,2148,5.04,2149,5.04,2150,5.04,2151,5.04,2152,5.04,2153,5.04,2154,5.04,2155,5.04,2156,5.04,2157,5.04,2158,5.04,2159,5.04,2160,5.04,2161,5.04,2162,5.04,2163,5.04,2164,5.04,2165,5.04,2166,5.04,2167,5.04,2168,5.04,2169,5.04]],["title/modules.html",[180,2.827]],["body/modules.html",[22,0.013,74,0.013,75,0.013,179,3.914,180,3.082,241,4.219,245,3.914,246,3.66,247,3.66,248,3.66,1054,6.882,2069,6.882,2170,7.928,2171,7.928]],["title/overview.html",[2172,4.691]],["body/overview.html",[2,3.169,22,0.015,74,0.01,75,0.01,78,1.754,85,1.219,130,2.017,159,3.641,178,1.754,179,4.89,180,2.122,181,2.122,182,2.37,183,2.37,184,2.122,185,2.239,186,2.37,187,3.521,188,3.521,189,3.872,190,3.211,191,2.37,192,2.122,219,1.609,239,3.872,241,5.656,242,3.521,243,3.521,244,3.521,245,4.782,246,5.039,247,4.572,248,4.651,367,3.521,368,3.521,369,3.521,370,4.572,565,3.169,596,3.872,605,4.3,799,3.169,808,4.3,877,3.521,878,3.521,879,3.521,881,4.572,882,4.3,883,3.872,884,3.872,885,3.872,1378,4.3,1529,3.872,1606,3.521,1607,3.521,1608,3.521,1670,3.521,1801,3.521,1802,3.521,1803,3.521,2172,3.521,2173,4.056,2174,4.056,2175,4.056]],["title/properties.html",[82,0.835,1980,2.868]],["body/properties.html",[22,0.014,74,0.013,75,0.013,82,1.093,149,1.872,2106,5.408,2113,4.462,2176,6.23,2177,6.23,2178,6.23]],["title/miscellaneous/typealiases.html",[2006,1.823,2179,4.761]],["body/miscellaneous/typealiases.html",[8,0.293,22,0.013,24,0.317,74,0.012,75,0.012,86,3.91,99,4.352,106,4.765,377,3.309,484,1.853,633,3.481,639,3.887,676,3.91,692,3.91,693,4.765,1227,4.421,1271,4.421,1388,4.765,1391,4.421,1538,4.421,1584,3.91,1585,4.963,1590,3.627,1591,3.91,1592,4.765,1593,3.627,1594,3.91,1595,4.765,1604,3.91,1748,3.91,2006,3.013,2010,4.265,2180,5.46,2181,4.739,2182,5.46,2183,4.739,2184,4.739,2185,5.776,2186,4.739]],["title/miscellaneous/variables.html",[2006,1.823,2187,4.132]],["body/miscellaneous/variables.html",[5,0.121,8,0.199,22,0.015,24,0.393,27,2.902,33,2.17,35,0.501,47,4.041,54,1.192,67,3.225,70,0.763,74,0.009,75,0.009,77,3.705,86,2.661,117,3.705,118,3.225,151,2.468,212,2.17,231,3.954,283,3.437,300,3.214,333,2.361,345,4.041,350,4.491,355,2.141,358,4.581,377,1.848,414,3.478,419,5.209,484,1.792,487,2.82,489,1.116,494,2.902,499,2.855,521,1.357,522,1.848,523,1.944,558,1.862,576,3.705,585,2.308,618,2.05,676,2.661,691,3.225,692,2.661,693,3.705,704,3.705,705,3.225,892,3.705,895,3.705,901,3.705,927,2.468,951,2.308,973,2.661,1133,3.698,1180,2.661,1181,4.041,1231,3.225,1232,4.041,1233,2.902,1234,3.225,1266,3.698,1288,4.491,1355,3.225,1477,2.661,1478,4.61,1483,3.225,1484,2.902,1485,2.308,1486,3.225,1487,2.902,1489,2.661,1490,3.225,1491,3.225,1492,4.041,1493,3.705,1494,2.661,1496,2.661,1499,4.041,1500,4.041,1501,3.225,1502,3.225,1503,3.705,1519,2.902,1526,2.902,1527,3.225,1528,3.705,1584,2.661,1585,4.276,1589,3.225,1594,2.661,1595,3.705,1603,3.225,1604,2.661,1605,3.225,1748,2.661,1751,3.705,1752,3.225,1942,3.225,1945,3.225,1946,4.491,1947,4.491,1948,3.225,2006,2.05,2010,2.902,2181,3.225,2183,3.225,2184,4.491,2185,5.167,2186,3.225,2187,3.225,2188,3.715,2189,3.715,2190,5.173,2191,3.715,2192,3.715,2193,3.715,2194,3.715,2195,3.715,2196,3.715]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":656,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2177,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1991,"title":{},"body":{"dependencies.html":{}}}],["0.18.5",{"_index":2005,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":2000,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1990,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1944,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1941,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1692,"title":{},"body":{"injectables/OpenaiService.html":{},"coverage.html":{}}}],["0/4",{"_index":1949,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1950,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1973,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1952,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1971,"title":{},"body":{"coverage.html":{}}}],["04t09:00:00z",{"_index":530,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["04t10:00:00z",{"_index":508,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["06",{"_index":507,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["0].tolowercase",{"_index":1831,"title":{},"body":{"injectables/StudentService.html":{}}}],["1",{"_index":585,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":1968,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":575,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/ExamReportProvider.html":{}}}],["10.0.0",{"_index":1982,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1955,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":1233,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{},"miscellaneous/variables.html":{}}}],["101",{"_index":592,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["101'})@isstring()@isnotempty",{"_index":572,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["10})@isint()@isnotempty()@min(10",{"_index":577,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["11.0.0",{"_index":1984,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":1985,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":2175,"title":{},"body":{"overview.html":{}}}],["14",{"_index":2173,"title":{},"body":{"overview.html":{}}}],["15",{"_index":985,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["15mm",{"_index":1088,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["17.13.3",{"_index":1994,"title":{},"body":{"dependencies.html":{}}}],["1})@isint()@isnotempty()@min(1",{"_index":587,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["2",{"_index":799,"title":{},"body":{"controllers/ExamController.html":{},"injectables/OpenaiService.html":{},"overview.html":{}}}],["2/2",{"_index":1957,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1961,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":1689,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["20",{"_index":586,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{}}}],["200",{"_index":741,"title":{},"body":{"controllers/ExamController.html":{}}}],["201",{"_index":727,"title":{},"body":{"controllers/ExamController.html":{}}}],["2025",{"_index":506,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"license.html":{}}}],["20mm",{"_index":1086,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["21",{"_index":2174,"title":{},"body":{"overview.html":{}}}],["24",{"_index":1234,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/variables.html":{}}}],["24.16.1",{"_index":1997,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":984,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["2d",{"_index":1065,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["3",{"_index":476,"title":{},"body":{"classes/CreateAdminDto.html":{},"injectables/OpenaiService.html":{}}}],["3.0.1",{"_index":1981,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1684,"title":{},"body":{"injectables/OpenaiService.html":{},"coverage.html":{}}}],["3/4",{"_index":1970,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1706,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["3600",{"_index":397,"title":{},"body":{"modules/CacheModule.html":{}}}],["3})@isstring()@isnotempty()@minlength(3",{"_index":455,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["4",{"_index":1665,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["4.0.2",{"_index":1983,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1976,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":148,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{}}}],["401",{"_index":730,"title":{},"body":{"controllers/ExamController.html":{}}}],["404",{"_index":743,"title":{},"body":{"controllers/ExamController.html":{}}}],["4o",{"_index":1696,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["5",{"_index":1670,"title":{},"body":{"injectables/OpenaiService.html":{},"overview.html":{}}}],["5.0.1",{"_index":2004,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1988,"title":{},"body":{"dependencies.html":{}}}],["5.12.2",{"_index":1996,"title":{},"body":{"dependencies.html":{}}}],["5.5.6",{"_index":1998,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":1963,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":1339,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["58",{"_index":1958,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":565,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/OpenaiService.html":{},"overview.html":{}}}],["6.4.3",{"_index":1989,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1956,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":576,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/variables.html":{}}}],["600",{"_index":1077,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["6379",{"_index":391,"title":{},"body":{"modules/CacheModule.html":{}}}],["64",{"_index":1964,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1960,"title":{},"body":{"coverage.html":{}}}],["6})@isstring()@isnotempty()@minlength(6",{"_index":567,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["7",{"_index":1680,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["7.0.1",{"_index":1987,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1986,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2001,"title":{},"body":{"dependencies.html":{}}}],["7/12",{"_index":1959,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":1975,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1967,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":1962,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1969,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":1966,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":479,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["8.1.0",{"_index":1993,"title":{},"body":{"dependencies.html":{}}}],["8.13.2",{"_index":1995,"title":{},"body":{"dependencies.html":{}}}],["800",{"_index":1075,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["8601",{"_index":504,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["8})@isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":465,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["9",{"_index":1036,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["9/14",{"_index":1965,"title":{},"body":{"coverage.html":{}}}],["9\\s]/g",{"_index":857,"title":{},"body":{"controllers/ExamController.html":{}}}],["_",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ExamController.html":{}}}],["_id",{"_index":1003,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["a._id",{"_index":1405,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["a4",{"_index":1082,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["abc",{"_index":1683,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["above",{"_index":2143,"title":{},"body":{"license.html":{}}}],["acc",{"_index":1461,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["acc[r.assignmentid",{"_index":1460,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["accelerated",{"_index":1064,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["accepts",{"_index":732,"title":{},"body":{"controllers/ExamController.html":{}}}],["access",{"_index":344,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["accessible",{"_index":514,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["accesstoken",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AdminModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["account",{"_index":140,"title":{},"body":{"controllers/AdminController.html":{}}}],["account'})@apicreatedresponse({description",{"_index":139,"title":{},"body":{"controllers/AdminController.html":{}}}],["action",{"_index":2164,"title":{},"body":{"license.html":{}}}],["actions",{"_index":1514,"title":{},"body":{"interfaces/IResponse.html":{}}}],["activeadmin",{"_index":1947,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeadmindata",{"_index":77,"title":{"interfaces/ActiveAdminData.html":{}},"body":{"interfaces/ActiveAdminData.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["actual",{"_index":1507,"title":{},"body":{"interfaces/IResponse.html":{}}}],["add",{"_index":1468,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["additional",{"_index":1513,"title":{},"body":{"interfaces/IResponse.html":{}}}],["address",{"_index":447,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["admin",{"_index":80,"title":{"classes/Admin.html":{}},"body":{"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["admin.controller",{"_index":195,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.decorator.ts",{"_index":1946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["admin.dto",{"_index":162,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["admin.dto.ts",{"_index":445,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["admin.dto.ts:19",{"_index":456,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:28",{"_index":450,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.dto.ts:43",{"_index":469,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin.name",{"_index":214,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin/admin.module",{"_index":251,"title":{},"body":{"modules/AppModule.html":{}}}],["admin@example.com",{"_index":478,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admin@example.com'})@isemail()@isnotempty()@isstring",{"_index":449,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["admincontroller",{"_index":129,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["admindocument",{"_index":106,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["adminid",{"_index":1314,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["adminmodel",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{}}}],["adminmodule",{"_index":179,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminschema",{"_index":117,"title":{},"body":{"classes/Admin.html":{},"modules/AdminModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adminschema.pre('save",{"_index":119,"title":{},"body":{"classes/Admin.html":{}}}],["adminservice",{"_index":159,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["affected",{"_index":1554,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["affectedmatricnos",{"_index":1556,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["affectedstudents",{"_index":1559,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["affectedstudents.map((s",{"_index":1562,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["aicomment",{"_index":1025,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"classes/OeExamGrading.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{}}}],["airesponse",{"_index":1708,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["airesponse.replace(/```json\\s*|```/g",{"_index":1711,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["aiscore",{"_index":1023,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"classes/OeExamGrading.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{}}}],["alias",{"_index":1951,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":2180,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allotted",{"_index":1654,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["allowed",{"_index":1136,"title":{},"body":{"injectables/ExamService.html":{}}}],["already",{"_index":1240,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["always",{"_index":1642,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["amazing",{"_index":2099,"title":{},"body":{"index.html":{}}}],["anchor",{"_index":1739,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["and/or",{"_index":1182,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"license.html":{}}}],["answer",{"_index":1485,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/StudentAnswerDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"miscellaneous/variables.html":{}}}],["answer.dto",{"_index":1859,"title":{},"body":{"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{}}}],["answer.dto.ts",{"_index":1755,"title":{},"body":{"classes/StudentAnswerDto.html":{},"coverage.html":{}}}],["answer.dto.ts:10",{"_index":1757,"title":{},"body":{"classes/StudentAnswerDto.html":{}}}],["answer.dto.ts:6",{"_index":1758,"title":{},"body":{"classes/StudentAnswerDto.html":{}}}],["answers",{"_index":792,"title":{},"body":{"controllers/ExamController.html":{},"interfaces/IMcqQuestion.html":{}}}],["answers)'})@apiconsumes('multipart/form",{"_index":790,"title":{},"body":{"controllers/ExamController.html":{}}}],["api",{"_index":1505,"title":{},"body":{"interfaces/IResponse.html":{},"injectables/OpenaiService.html":{},"miscellaneous/functions.html":{}}}],["apibadrequestresponse",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibearerauth",{"_index":164,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{}}}],["apibody",{"_index":813,"title":{},"body":{"controllers/ExamController.html":{}}}],["apiconsumes",{"_index":814,"title":{},"body":{"controllers/ExamController.html":{}}}],["apiconsumes('multipart/form",{"_index":822,"title":{},"body":{"controllers/ExamController.html":{}}}],["apicreatedresponse",{"_index":167,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{}}}],["apikey",{"_index":1632,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["apioperation",{"_index":165,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["apiparam",{"_index":815,"title":{},"body":{"controllers/ExamController.html":{}}}],["apiproperty",{"_index":470,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["apiproperty({description",{"_index":446,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["apiresponse",{"_index":166,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["apitags",{"_index":163,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["apitags('admin",{"_index":170,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["apiunauthorizedresponse",{"_index":168,"title":{},"body":{"controllers/AdminController.html":{}}}],["app.controller",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":240,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":208,"title":{},"body":{"modules/AdminModule.html":{}}}],["appconfig",{"_index":259,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":237,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":1669,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["application",{"_index":2031,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["application/pdf",{"_index":1151,"title":{},"body":{"injectables/ExamService.html":{}}}],["application/vnd.openxmlformats",{"_index":863,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["application/zip",{"_index":876,"title":{},"body":{"controllers/ExamController.html":{}}}],["applications",{"_index":2041,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":241,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":561,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["appservice",{"_index":239,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":1032,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["archive.append(pdfbuffer",{"_index":1052,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["archive.finalize",{"_index":1053,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["archive.on('data",{"_index":1041,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["archive.on('end",{"_index":1044,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["archive.on('error",{"_index":1046,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["archiver",{"_index":941,"title":{},"body":{"injectables/ExamReportProvider.html":{},"dependencies.html":{}}}],["archiver('zip",{"_index":1033,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["args",{"_index":1057,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["argumentshost",{"_index":1346,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["arising",{"_index":2168,"title":{},"body":{"license.html":{}}}],["array",{"_index":355,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["array.from(examgroups.values",{"_index":1179,"title":{},"body":{"injectables/ExamService.html":{}}}],["array.isarray(exceptionresponse?.message",{"_index":1367,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["arrayminsize",{"_index":1858,"title":{},"body":{"classes/SubmitMcqExamDto.html":{}}}],["assigment.schema",{"_index":641,"title":{},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"classes/OeExamGrading.html":{}}}],["assigment.schema.ts",{"_index":693,"title":{},"body":{"classes/ExamAssignment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["assigment.schema.ts:22",{"_index":697,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["assigment.schema.ts:25",{"_index":701,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["assigment.schema.ts:28",{"_index":699,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["assigment.schema.ts:31",{"_index":700,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["assign",{"_index":516,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assigned",{"_index":1520,"title":{},"body":{"interfaces/IStudent.html":{}}}],["assigning",{"_index":488,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{}}}],["assignment",{"_index":999,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"classes/OeExamGrading.html":{}}}],["assignment._id",{"_index":996,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["assignment._id.tostring",{"_index":1007,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["assignment.dto",{"_index":637,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["assignment.dto.ts",{"_index":485,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"coverage.html":{}}}],["assignment.dto.ts:24",{"_index":518,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.dto.ts:37",{"_index":536,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.dto.ts:53",{"_index":526,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.dto.ts:72",{"_index":531,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.dto.ts:91",{"_index":511,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["assignment.exam",{"_index":1246,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignment.iscompleted",{"_index":1392,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["assignment.save",{"_index":1399,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["assignment.score",{"_index":964,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignment.score.tostring",{"_index":1027,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["assignment.student.fullname",{"_index":961,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["assignment.student.matricno",{"_index":963,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["assignmentid",{"_index":1006,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{}}}],["assignmentids",{"_index":995,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["assignmentops",{"_index":1462,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["assignmentops.length",{"_index":1469,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["assignments",{"_index":946,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/StudentService.html":{}}}],["assignments.length",{"_index":957,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.map(assignment",{"_index":959,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["assignments.map(async",{"_index":1245,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider",{"_index":898,"title":{},"body":{"modules/ExamModule.html":{},"injectables/StudentService.html":{}}}],["assignments.provider.ts",{"_index":1181,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["assignments.provider.ts:104",{"_index":1205,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:188",{"_index":1196,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:216",{"_index":1215,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:232",{"_index":1221,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:244",{"_index":1219,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:26",{"_index":1194,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:40",{"_index":1224,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments.provider.ts:64",{"_index":1210,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["assignments[0].exam",{"_index":1029,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["assignmenttotals",{"_index":1457,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["assigns",{"_index":614,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{}}}],["associated",{"_index":745,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"license.html":{}}}],["async",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["atomicity",{"_index":624,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["attachment",{"_index":866,"title":{},"body":{"controllers/ExamController.html":{}}}],["attempt",{"_index":1690,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["auth",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StudentController.html":{}}}],["auth/auth.controller",{"_index":196,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/config/jwt.config",{"_index":204,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/guards/access",{"_index":206,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/guards/authentication.guard",{"_index":211,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/providers/auth.service",{"_index":197,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth/providers/generate",{"_index":201,"title":{},"body":{"modules/AdminModule.html":{}}}],["auth_type_key",{"_index":345,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":194,"title":{"controllers/AuthController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":210,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AdminModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":354,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["author",{"_index":2106,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":2158,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":189,"title":{"injectables/AuthService.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":346,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":349,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguidemap",{"_index":335,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":350,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":356,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["available",{"_index":533,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["await",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["award",{"_index":1666,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["b",{"_index":1486,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":2100,"title":{},"body":{"index.html":{}}}],["bad",{"_index":150,"title":{},"body":{"controllers/AdminController.html":{}}}],["badrequestexception",{"_index":630,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["badrequestexception(\"scripts",{"_index":1161,"title":{},"body":{"injectables/ExamService.html":{}}}],["badrequestexception('error",{"_index":673,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["badrequestexception('exam",{"_index":1891,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["badrequestexception('no",{"_index":657,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["badrequestexception('only",{"_index":1135,"title":{},"body":{"injectables/ExamService.html":{}}}],["badrequestexception('question",{"_index":1922,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["badrequestexception('questions",{"_index":1894,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["based",{"_index":1098,"title":{},"body":{"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{}}}],["batchresults",{"_index":1720,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["batchsize",{"_index":1693,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["bcrypt",{"_index":102,"title":{},"body":{"classes/Admin.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":123,"title":{},"body":{"classes/Admin.html":{}}}],["bcrypt.hash(this.password",{"_index":125,"title":{},"body":{"classes/Admin.html":{}}}],["bearer",{"_index":146,"title":{},"body":{"controllers/AdminController.html":{},"miscellaneous/enumerations.html":{}}}],["becomes",{"_index":532,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["being",{"_index":569,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["binary",{"_index":827,"title":{},"body":{"controllers/ExamController.html":{}}}],["board",{"_index":2093,"title":{},"body":{"index.html":{}}}],["body",{"_index":155,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["booktype",{"_index":988,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["boolean",{"_index":698,"title":{},"body":{"classes/ExamAssignment.html":{},"interfaces/IResponse.html":{}}}],["bootstrap",{"_index":184,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":550,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["bottom",{"_index":1089,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["break",{"_index":1649,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["breakdown",{"_index":1679,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["browse",{"_index":2171,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1054,"title":{},"body":{"injectables/ExamReportProvider.html":{},"modules.html":{}}}],["browser.close",{"_index":1092,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["browser.newpage",{"_index":1072,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["buffer",{"_index":852,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["buffer.from(buffer",{"_index":991,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["buffer.from(pdfbuffer",{"_index":1091,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["buffer.length",{"_index":869,"title":{},"body":{"controllers/ExamController.html":{}}}],["buildgradingprompt",{"_index":1613,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["buildgradingprompt(request",{"_index":1619,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["building",{"_index":2037,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":1263,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["c",{"_index":1487,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["cache",{"_index":377,"title":{},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cache.service",{"_index":380,"title":{},"body":{"modules/CacheModule.html":{}}}],["cache/cache.module",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["cache_manager",{"_index":423,"title":{},"body":{"injectables/CacheService.html":{}}}],["cache_ttl",{"_index":1232,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cacheconfig",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["cached",{"_index":425,"title":{},"body":{"injectables/CacheService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["cached/randomized",{"_index":1213,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cachedquestion",{"_index":1271,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cacheitems",{"_index":1284,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cachekey",{"_index":1249,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cachemanager",{"_index":405,"title":{},"body":{"injectables/CacheService.html":{}}}],["cachemcqquestions",{"_index":1184,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cachemcqquestions(questions",{"_index":1195,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cachemodule",{"_index":245,"title":{"modules/CacheModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules.html":{},"overview.html":{}}}],["cachequestion",{"_index":1293,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["cacheservice",{"_index":370,"title":{"injectables/CacheService.html":{}},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{},"overview.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canvas",{"_index":1066,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["case",{"_index":1298,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["catch",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["catch((err",{"_index":365,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["catch(exception",{"_index":1345,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["catches",{"_index":1328,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["caught",{"_index":1350,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["channel",{"_index":2071,"title":{},"body":{"index.html":{}}}],["character",{"_index":463,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["characters",{"_index":459,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{}}}],["charge",{"_index":2121,"title":{},"body":{"license.html":{}}}],["check",{"_index":1251,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"index.html":{}}}],["checking",{"_index":1490,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["choice",{"_index":551,"title":{},"body":{"classes/CreateExamDto.html":{},"interfaces/IMcqQuestion.html":{},"miscellaneous/enumerations.html":{}}}],["chunk",{"_index":1042,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["chunks",{"_index":1037,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["chunks.push(chunk",{"_index":1043,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["claim",{"_index":2161,"title":{},"body":{"license.html":{}}}],["class",{"_index":50,"title":{"classes/Admin.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":85,"title":{},"body":{"classes/Admin.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["cleancoursename",{"_index":854,"title":{},"body":{"controllers/ExamController.html":{}}}],["cleancoursename}.xlsx",{"_index":861,"title":{},"body":{"controllers/ExamController.html":{}}}],["cleanedresponse",{"_index":1710,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["client",{"_index":1612,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["cluster_adminmodule",{"_index":187,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":188,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_cachemodule",{"_index":367,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_cachemodule_exports",{"_index":369,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_cachemodule_providers",{"_index":368,"title":{},"body":{"modules/CacheModule.html":{},"overview.html":{}}}],["cluster_exammodule",{"_index":877,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_exports",{"_index":878,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_exammodule_imports",{"_index":880,"title":{},"body":{"modules/ExamModule.html":{}}}],["cluster_exammodule_providers",{"_index":879,"title":{},"body":{"modules/ExamModule.html":{},"overview.html":{}}}],["cluster_openaimodule",{"_index":1606,"title":{},"body":{"modules/OpenaiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_exports",{"_index":1607,"title":{},"body":{"modules/OpenaiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_providers",{"_index":1608,"title":{},"body":{"modules/OpenaiModule.html":{},"overview.html":{}}}],["cluster_studentmodule",{"_index":1801,"title":{},"body":{"modules/StudentModule.html":{},"overview.html":{}}}],["cluster_studentmodule_exports",{"_index":1802,"title":{},"body":{"modules/StudentModule.html":{},"overview.html":{}}}],["cluster_studentmodule_providers",{"_index":1803,"title":{},"body":{"modules/StudentModule.html":{},"overview.html":{}}}],["code",{"_index":556,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["collapsemcqlist",{"_index":1901,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["collapsemcqlist.map((item",{"_index":1909,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["column",{"_index":971,"title":{},"body":{"injectables/ExamReportProvider.html":{},"miscellaneous/functions.html":{}}}],["columns",{"_index":981,"title":{},"body":{"injectables/ExamReportProvider.html":{},"miscellaneous/functions.html":{}}}],["combination",{"_index":1279,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["combo",{"_index":1207,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["come",{"_index":2062,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1644,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["comments",{"_index":1662,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["completed",{"_index":994,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["completedassignments",{"_index":1400,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["completedassignments.length",{"_index":1403,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["completedassignments.map(a",{"_index":1404,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["completes",{"_index":1888,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["components",{"_index":1651,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["compression",{"_index":989,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["computer",{"_index":570,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["computing",{"_index":824,"title":{},"body":{"controllers/ExamController.html":{}}}],["concise",{"_index":1663,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["cond",{"_index":1467,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["conditions",{"_index":2142,"title":{},"body":{"license.html":{}}}],["config",{"_index":1630,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["config/app.config",{"_index":260,"title":{},"body":{"modules/AppModule.html":{}}}],["config/cache.config",{"_index":264,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":262,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":258,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["configmodule",{"_index":205,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":215,"title":{},"body":{"modules/AdminModule.html":{}}}],["configmodule.forroot",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheModule.html":{},"injectables/OpenaiService.html":{}}}],["configservice.get('appconfig.openaikey",{"_index":1633,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["configservice.get('appconfig.openaiprojid",{"_index":1635,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["configservice.get('cache_ttl",{"_index":396,"title":{},"body":{"modules/CacheModule.html":{}}}],["configservice.get('cacheconfig.redisurl",{"_index":383,"title":{},"body":{"modules/CacheModule.html":{}}}],["configservice.get('database.uri",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["confirmation",{"_index":750,"title":{},"body":{"controllers/ExamController.html":{}}}],["confirming",{"_index":1108,"title":{},"body":{"injectables/ExamService.html":{}}}],["connection",{"_index":604,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"license.html":{}}}],["consistency",{"_index":1502,"title":{},"body":{"interfaces/IOeQuestion.html":{},"miscellaneous/variables.html":{}}}],["consistent",{"_index":1332,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"miscellaneous/functions.html":{}}}],["console.error('cache",{"_index":443,"title":{},"body":{"injectables/CacheService.html":{}}}],["console.error('error",{"_index":1281,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["console.error(`cache",{"_index":428,"title":{},"body":{"injectables/CacheService.html":{}}}],["console.error(`error",{"_index":1294,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{}}}],["console.error(`json",{"_index":1718,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["console.error(error",{"_index":671,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["console.log(error",{"_index":1745,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["console.log(markingguide.originalname",{"_index":1730,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["console.log(template.mimetype",{"_index":1148,"title":{},"body":{"injectables/ExamService.html":{}}}],["const",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"injectables/OpenaiService.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/variables.html":{}}}],["constants/auth.constants",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["constants/cache",{"_index":1230,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["constructor(@injectmodel(student.name",{"_index":1544,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["constructor(adminmodel",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{}}}],["constructor(adminservice",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(cachemanager",{"_index":403,"title":{},"body":{"injectables/CacheService.html":{}}}],["constructor(configservice",{"_index":1617,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["constructor(connection",{"_index":603,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["constructor(createexamprovider",{"_index":1101,"title":{},"body":{"injectables/ExamService.html":{}}}],["constructor(examassignmentmodel",{"_index":1191,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["constructor(jwtservice",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["constructor(mcqquestionmodel",{"_index":1872,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["constructor(oeexamgradingmodel",{"_index":919,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["constructor(oequestionmodel",{"_index":1913,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["constructor(private",{"_index":172,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["constructor(reflector",{"_index":338,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(studentmodel",{"_index":1533,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["containing",{"_index":626,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["contains",{"_index":490,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"interfaces/IOeQuestion.html":{},"injectables/OpenaiService.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":2019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["context",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["context.getclass",{"_index":353,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":352,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["contract",{"_index":2165,"title":{},"body":{"license.html":{}}}],["control",{"_index":871,"title":{},"body":{"controllers/ExamController.html":{}}}],["controller",{"_index":128,"title":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":171,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('auth",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('exam",{"_index":819,"title":{},"body":{"controllers/ExamController.html":{}}}],["controller('student",{"_index":1788,"title":{},"body":{"controllers/StudentController.html":{}}}],["controllers",{"_index":130,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["copies",{"_index":2136,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1296,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"license.html":{}}}],["copyright",{"_index":2114,"title":{},"body":{"license.html":{}}}],["correct",{"_index":1484,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"injectables/OpenaiService.html":{},"miscellaneous/variables.html":{}}}],["corresponds",{"_index":1658,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["count",{"_index":559,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["course",{"_index":555,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/ExamReportProvider.html":{},"miscellaneous/functions.html":{}}}],["coursecode",{"_index":562,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{}}}],["coursecode}.zip",{"_index":875,"title":{},"body":{"controllers/ExamController.html":{}}}],["courseinfo",{"_index":930,"title":{},"body":{"injectables/ExamReportProvider.html":{},"miscellaneous/functions.html":{}}}],["courseinfo?.coursecode",{"_index":1030,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["coursename",{"_index":563,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["coursename.replace(/[^a",{"_index":855,"title":{},"body":{"controllers/ExamController.html":{}}}],["courses",{"_index":2078,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1938,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":138,"title":{},"body":{"controllers/AdminController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["createadmin",{"_index":134,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["createadmin(@body",{"_index":176,"title":{},"body":{"controllers/AdminController.html":{}}}],["createadmin(createadmindto",{"_index":135,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["createadmindto",{"_index":136,"title":{"classes/CreateAdminDto.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["created",{"_index":174,"title":{},"body":{"controllers/AdminController.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{}}}],["created'})@apiunauthorizedresponse({description",{"_index":142,"title":{},"body":{"controllers/AdminController.html":{}}}],["createexam",{"_index":602,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["createexam(createexamdto",{"_index":609,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["createexamassignmentdto",{"_index":482,"title":{"classes/CreateExamAssignmentDto.html":{}},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"coverage.html":{}}}],["createexamdto",{"_index":545,"title":{"classes/CreateExamDto.html":{}},"body":{"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"coverage.html":{}}}],["createexamprovider",{"_index":596,"title":{"injectables/CreateExamProvider.html":{}},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":2193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":613,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{}}}],["creating",{"_index":547,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{}}}],["creation",{"_index":625,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{}}}],["credentials",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["credit",{"_index":1668,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["cs101a",{"_index":566,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["csc101",{"_index":825,"title":{},"body":{"controllers/ExamController.html":{}}}],["csv",{"_index":1527,"title":{},"body":{"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":1355,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getresponse",{"_index":1357,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1353,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["d",{"_index":1483,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["damages",{"_index":2162,"title":{},"body":{"license.html":{}}}],["data",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":725,"title":{},"body":{"controllers/ExamController.html":{}}}],["data')@apiparam({name",{"_index":779,"title":{},"body":{"controllers/ExamController.html":{}}}],["data'})@apiresponse({status",{"_index":729,"title":{},"body":{"controllers/ExamController.html":{}}}],["data.interface.ts",{"_index":81,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"coverage.html":{}}}],["database",{"_index":1884,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["databaseconfig",{"_index":261,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":501,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["day",{"_index":1231,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/variables.html":{}}}],["days",{"_index":1741,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["db",{"_index":648,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["deal",{"_index":2125,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2169,"title":{},"body":{"license.html":{}}}],["debouncing",{"_index":1933,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["declarations",{"_index":183,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["decorators",{"_index":88,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GradeOeExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["decorators/auth.decorator",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["deeper",{"_index":2073,"title":{},"body":{"index.html":{}}}],["def",{"_index":1686,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["default",{"_index":358,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/OeExamGrading.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":337,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defined",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"injectables/OpenaiService.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["defines",{"_index":512,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["del",{"_index":399,"title":{},"body":{"injectables/CacheService.html":{}}}],["del(key",{"_index":406,"title":{},"body":{"injectables/CacheService.html":{}}}],["delegates",{"_index":1096,"title":{},"body":{"injectables/ExamService.html":{}}}],["delete",{"_index":115,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/CacheService.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/UpdateExamParamDto.html":{}}}],["delete('mcq/:examid",{"_index":834,"title":{},"body":{"controllers/ExamController.html":{}}}],["delete('mcq/:examid')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":737,"title":{},"body":{"controllers/ExamController.html":{}}}],["delete('oe/:examid",{"_index":840,"title":{},"body":{"controllers/ExamController.html":{}}}],["delete('oe/:examid')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":748,"title":{},"body":{"controllers/ExamController.html":{}}}],["deleted",{"_index":742,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deletemcqexam",{"_index":713,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deletemcqexam(@param('examid",{"_index":835,"title":{},"body":{"controllers/ExamController.html":{}}}],["deletemcqexam(examid",{"_index":736,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deleteoeexam",{"_index":714,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deleteoeexam(@param('examid",{"_index":841,"title":{},"body":{"controllers/ExamController.html":{}}}],["deleteoeexam(examid",{"_index":747,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["deletes",{"_index":1107,"title":{},"body":{"injectables/ExamService.html":{}}}],["deleting",{"_index":711,"title":{},"body":{"controllers/ExamController.html":{},"classes/UpdateExamParamDto.html":{}}}],["deletion",{"_index":746,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["dependencies",{"_index":181,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depends",{"_index":1509,"title":{},"body":{"interfaces/IResponse.html":{}}}],["description",{"_index":149,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["descriptive",{"_index":1512,"title":{},"body":{"interfaces/IResponse.html":{}}}],["detail",{"_index":1688,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["details",{"_index":493,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{}}}],["dev",{"_index":1061,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["development",{"_index":2049,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":2083,"title":{},"body":{"index.html":{}}}],["disable",{"_index":1059,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["discord",{"_index":2070,"title":{},"body":{"index.html":{}}}],["disposition",{"_index":865,"title":{},"body":{"controllers/ExamController.html":{}}}],["distribute",{"_index":2133,"title":{},"body":{"license.html":{}}}],["dive",{"_index":2072,"title":{},"body":{"index.html":{}}}],["doc",{"_index":111,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["document",{"_index":1911,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["documentation",{"_index":1939,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documents",{"_index":1201,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["docx",{"_index":795,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["docx/pdf",{"_index":1127,"title":{},"body":{"injectables/ExamService.html":{}}}],["doe",{"_index":453,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["done",{"_index":1672,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["down",{"_index":1650,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["download",{"_index":756,"title":{},"body":{"controllers/ExamController.html":{}}}],["downloadallstudentresponses",{"_index":715,"title":{},"body":{"controllers/ExamController.html":{}}}],["downloadallstudentresponses(examid",{"_index":751,"title":{},"body":{"controllers/ExamController.html":{}}}],["downloadexamreport",{"_index":716,"title":{},"body":{"controllers/ExamController.html":{}}}],["downloadexamreport(examid",{"_index":761,"title":{},"body":{"controllers/ExamController.html":{}}}],["dto",{"_index":548,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"classes/UpdateExamParamDto.html":{}}}],["dtos/create",{"_index":161,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["dtos/fetch",{"_index":1785,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["dtos/grade",{"_index":816,"title":{},"body":{"controllers/ExamController.html":{}}}],["dtos/login",{"_index":1782,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["dtos/login.dto",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/submit",{"_index":1787,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["dtos/update",{"_index":806,"title":{},"body":{"controllers/ExamController.html":{}}}],["duration",{"_index":557,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["during",{"_index":1330,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["e.g",{"_index":529,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"controllers/ExamController.html":{}}}],["e2e",{"_index":2057,"title":{},"body":{"index.html":{}}}],["each",{"_index":620,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IMcqQuestion.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{}}}],["efficient",{"_index":2038,"title":{},"body":{"index.html":{}}}],["eight",{"_index":458,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["email",{"_index":83,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["empty",{"_index":647,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["end",{"_index":496,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["ended",{"_index":523,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["endpoint",{"_index":1510,"title":{},"body":{"interfaces/IResponse.html":{}}}],["endpoints",{"_index":1506,"title":{},"body":{"interfaces/IResponse.html":{}}}],["endtime",{"_index":498,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["ensure",{"_index":623,"title":{},"body":{"injectables/CreateExamProvider.html":{},"miscellaneous/functions.html":{}}}],["ensures",{"_index":553,"title":{},"body":{"classes/CreateExamDto.html":{},"miscellaneous/functions.html":{}}}],["ensuring",{"_index":1501,"title":{},"body":{"interfaces/IOeQuestion.html":{},"miscellaneous/variables.html":{}}}],["enterprise",{"_index":2086,"title":{},"body":{"index.html":{}}}],["enum",{"_index":524,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":2007,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{}}}],["enums/exam",{"_index":540,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["env",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["env.${process.env.node_env",{"_index":270,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":267,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":1677,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["err",{"_index":366,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/OpenaiService.html":{}}}],["error",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["error('no",{"_index":993,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["error('question",{"_index":1287,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["error('student",{"_index":1393,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["error(`failed",{"_index":1291,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["error(`no",{"_index":1255,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["error.message",{"_index":1283,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["errors",{"_index":1341,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["event",{"_index":1929,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{},"license.html":{}}}],["exam",{"_index":484,"title":{"classes/Exam.html":{}},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"classes/OeExamGrading.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["exam'})@apibody({description",{"_index":780,"title":{},"body":{"controllers/ExamController.html":{}}}],["exam'})@apiresponse({status",{"_index":740,"title":{},"body":{"controllers/ExamController.html":{}}}],["exam._id",{"_index":664,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{}}}],["exam._id.tostring",{"_index":666,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.controller",{"_index":887,"title":{},"body":{"modules/ExamModule.html":{}}}],["exam.coursecode",{"_index":955,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exam.coursename",{"_index":956,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.dto",{"_index":632,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["exam.dto.ts",{"_index":546,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/GradeOeExamDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"coverage.html":{}}}],["exam.dto.ts:12",{"_index":1851,"title":{},"body":{"classes/SubmitMcqExamDto.html":{}}}],["exam.dto.ts:13",{"_index":1860,"title":{},"body":{"classes/SubmitOeExamDto.html":{}}}],["exam.dto.ts:17",{"_index":1854,"title":{},"body":{"classes/SubmitMcqExamDto.html":{}}}],["exam.dto.ts:19",{"_index":1861,"title":{},"body":{"classes/SubmitOeExamDto.html":{}}}],["exam.dto.ts:31",{"_index":573,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:46",{"_index":568,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:6",{"_index":1373,"title":{},"body":{"classes/GradeOeExamDto.html":{}}}],["exam.dto.ts:61",{"_index":578,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:76",{"_index":588,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.dto.ts:8",{"_index":1855,"title":{},"body":{"classes/SubmitMcqExamDto.html":{}}}],["exam.dto.ts:9",{"_index":1862,"title":{},"body":{"classes/SubmitOeExamDto.html":{}}}],["exam.dto.ts:92",{"_index":583,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["exam.duration",{"_index":1247,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.examtype",{"_index":667,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exam.guidevectorstoreid",{"_index":1937,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["exam.name",{"_index":907,"title":{},"body":{"modules/ExamModule.html":{}}}],["exam.provider",{"_index":890,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/StudentService.html":{}}}],["exam.provider.ts",{"_index":598,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["exam.provider.ts:109",{"_index":1875,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["exam.provider.ts:12",{"_index":1379,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["exam.provider.ts:131",{"_index":1381,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["exam.provider.ts:18",{"_index":608,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["exam.provider.ts:26",{"_index":1873,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["exam.provider.ts:27",{"_index":1387,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["exam.provider.ts:28",{"_index":1914,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["exam.provider.ts:47",{"_index":612,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["exam.provider.ts:53",{"_index":1879,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["exam.provider.ts:54",{"_index":1383,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["exam.provider.ts:57",{"_index":1915,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["exam.questioncount",{"_index":1256,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.questions",{"_index":1143,"title":{},"body":{"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.questions.push(...insertedquestionids",{"_index":1899,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exam.questions?.length",{"_index":1141,"title":{},"body":{"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["exam.save",{"_index":659,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exam.schema",{"_index":703,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["exam/exam.module",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["exam_123abc",{"_index":1868,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["exam_123abc'})@isstring()@isnotempty",{"_index":1866,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["exam_abc123",{"_index":541,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["exam_abc123'})@isstring()@isnotempty",{"_index":517,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["examassignment",{"_index":638,"title":{"classes/ExamAssignment.html":{}},"body":{"injectables/CreateExamProvider.html":{},"classes/ExamAssignment.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"classes/OeExamGrading.html":{},"coverage.html":{}}}],["examassignment.name",{"_index":908,"title":{},"body":{"modules/ExamModule.html":{}}}],["examassignmentdocument",{"_index":639,"title":{},"body":{"injectables/CreateExamProvider.html":{},"classes/ExamAssignment.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["examassignmentdocument)._id.tostring",{"_index":1011,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["examassignmentmodel",{"_index":607,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["examassignmentschema",{"_index":704,"title":{},"body":{"classes/ExamAssignment.html":{},"modules/ExamModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examcontroller",{"_index":706,"title":{"controllers/ExamController.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"coverage.html":{}}}],["examdocument",{"_index":633,"title":{},"body":{"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["examdocument)._id.tostring",{"_index":1171,"title":{},"body":{"injectables/ExamService.html":{}}}],["examgradings",{"_index":997,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["examgradings.find(g",{"_index":1009,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["examgroups",{"_index":1168,"title":{},"body":{"injectables/ExamService.html":{}}}],["examgroups.has(examid",{"_index":1173,"title":{},"body":{"injectables/ExamService.html":{}}}],["examgroups.set(examid",{"_index":1174,"title":{},"body":{"injectables/ExamService.html":{}}}],["examid",{"_index":739,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["examinations",{"_index":1177,"title":{},"body":{"injectables/ExamService.html":{}}}],["examinfo",{"_index":1172,"title":{},"body":{"injectables/ExamService.html":{}}}],["examinfo.coursecode",{"_index":1176,"title":{},"body":{"injectables/ExamService.html":{}}}],["examinfo.coursename",{"_index":1175,"title":{},"body":{"injectables/ExamService.html":{}}}],["exammodel",{"_index":606,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{}}}],["exammodule",{"_index":246,"title":{"modules/ExamModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"modules.html":{},"overview.html":{}}}],["example",{"_index":448,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"classes/LoginDto.html":{},"injectables/OpenaiService.html":{},"classes/UpdateExamParamDto.html":{},"index.html":{}}}],["examples",{"_index":1511,"title":{},"body":{"interfaces/IResponse.html":{}}}],["examreportprovider",{"_index":883,"title":{"injectables/ExamReportProvider.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"coverage.html":{},"overview.html":{}}}],["exams",{"_index":552,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["examschema",{"_index":499,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"modules/ExamModule.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examservice",{"_index":808,"title":{"injectables/ExamService.html":{}},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["examtitle",{"_index":954,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["examtype",{"_index":520,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{}}}],["examtype.mcq",{"_index":543,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["examtype.oe",{"_index":1160,"title":{},"body":{"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["excel",{"_index":927,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"interfaces/IStudent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exceldata",{"_index":968,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["exception",{"_index":1324,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":1323,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:35",{"_index":1347,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1362,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1359,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exception.message",{"_index":1363,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1344,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptionresponse",{"_index":1361,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptionresponse.message[0",{"_index":1368,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptionresponse?.message",{"_index":1369,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exceptions",{"_index":1327,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["exclude",{"_index":104,"title":{},"body":{"classes/Admin.html":{}}}],["exec",{"_index":953,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["execution",{"_index":1354,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["executioncontext",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1829,"title":{},"body":{"injectables/StudentService.html":{}}}],["existence",{"_index":1881,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["existing",{"_index":783,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["exists",{"_index":1166,"title":{},"body":{"injectables/ExamService.html":{}}}],["expected",{"_index":1266,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["expectedkeys",{"_index":2021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expects",{"_index":1497,"title":{},"body":{"interfaces/IOeQuestion.html":{}}}],["experience",{"_index":2075,"title":{},"body":{"index.html":{}}}],["expert",{"_index":1638,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["expires_after",{"_index":1738,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["expiresin",{"_index":1318,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["explained",{"_index":1681,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["export",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["exports",{"_index":186,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["express",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":611,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["extract",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/InsertStudentProvider.html":{}}}],["extracting",{"_index":1865,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["extractrequestfromheader",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracts",{"_index":1335,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["failed",{"_index":152,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["fails",{"_index":650,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["false",{"_index":509,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/ExamAssignment.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{}}}],["faster",{"_index":1197,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["fetch",{"_index":1183,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["fetched",{"_index":1836,"title":{},"body":{"injectables/StudentService.html":{}}}],["fetchexam",{"_index":1099,"title":{},"body":{"injectables/ExamService.html":{}}}],["fetchexam(examid",{"_index":1110,"title":{},"body":{"injectables/ExamService.html":{}}}],["fetchexamassignmentsprovider",{"_index":881,"title":{"injectables/FetchExamAssignmentsProvider.html":{}},"body":{"modules/ExamModule.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["fetchexams",{"_index":717,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"controllers/StudentController.html":{}}}],["fetchexams(@param('studentid",{"_index":1791,"title":{},"body":{"controllers/StudentController.html":{}}}],["fetchexams(studentid",{"_index":1766,"title":{},"body":{"controllers/StudentController.html":{}}}],["fetching",{"_index":1282,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["fetchquestionparamsdto",{"_index":1302,"title":{"classes/FetchQuestionParamsDto.html":{}},"body":{"classes/FetchQuestionParamsDto.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["fetchquestions",{"_index":1763,"title":{},"body":{"controllers/StudentController.html":{}}}],["fetchquestions(@param",{"_index":1793,"title":{},"body":{"controllers/StudentController.html":{}}}],["fetchquestions(fetchquestionparamsdto",{"_index":1769,"title":{},"body":{"controllers/StudentController.html":{}}}],["fetchquestionsforstudent",{"_index":1811,"title":{},"body":{"injectables/StudentService.html":{}}}],["fetchquestionsforstudent(fetchquestionparamsdto",{"_index":1815,"title":{},"body":{"injectables/StudentService.html":{}}}],["fetchstudentassignments",{"_index":1812,"title":{},"body":{"injectables/StudentService.html":{}}}],["fetchstudentassignments(studentid",{"_index":1817,"title":{},"body":{"injectables/StudentService.html":{}}}],["few",{"_index":2060,"title":{},"body":{"index.html":{}}}],["field",{"_index":1288,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":554,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["file'})@apiconsumes('multipart/form",{"_index":778,"title":{},"body":{"controllers/ExamController.html":{}}}],["file([uint8array",{"_index":1727,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["file_id",{"_index":1744,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["file_search",{"_index":1701,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["fileinterceptor",{"_index":810,"title":{},"body":{"controllers/ExamController.html":{}}}],["filename",{"_index":859,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{}}}],["filename=\"${filename",{"_index":867,"title":{},"body":{"controllers/ExamController.html":{}}}],["files",{"_index":791,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"license.html":{}}}],["filesinterceptor",{"_index":811,"title":{},"body":{"controllers/ExamController.html":{}}}],["filter",{"_index":663,"title":{},"body":{"injectables/CreateExamProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["filter(([_",{"_index":1464,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["filter((student",{"_index":1546,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["finally",{"_index":674,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["find",{"_index":948,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["finduserbyemail",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{}}}],["finduserbyemail(email",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{}}}],["fire",{"_index":361,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":1067,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["fitness",{"_index":2155,"title":{},"body":{"license.html":{}}}],["follow",{"_index":1647,"title":{},"body":{"injectables/OpenaiService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["following",{"_index":2141,"title":{},"body":{"license.html":{}}}],["follows",{"_index":1643,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["forbiddenexception",{"_index":1225,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["forbiddenexception(\"exam",{"_index":1239,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["format",{"_index":505,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{},"injectables/OpenaiService.html":{}}}],["formats",{"_index":1331,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["formatted",{"_index":1352,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["forwardref",{"_index":631,"title":{},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{}}}],["found",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["four",{"_index":1481,"title":{},"body":{"interfaces/IMcqQuestion.html":{}}}],["framework",{"_index":2036,"title":{},"body":{"index.html":{}}}],["free",{"_index":2120,"title":{},"body":{"license.html":{}}}],["full",{"_index":451,"title":{},"body":{"classes/CreateAdminDto.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IStudent.html":{},"index.html":{}}}],["fullname",{"_index":951,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/Student.html":{},"miscellaneous/variables.html":{}}}],["fullquestions",{"_index":1265,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["fullquestions.length",{"_index":1267,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["fullquestions.map(q",{"_index":1272,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["function",{"_index":120,"title":{},"body":{"classes/Admin.html":{},"interfaces/IResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":2013,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2139,"title":{},"body":{"license.html":{}}}],["g.assignment",{"_index":1010,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["generate",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/functions.html":{}}}],["generateandcachequestions",{"_index":1185,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["generateandcachequestions(studentid",{"_index":1204,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["generated",{"_index":958,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["generateexamquestionscachekey",{"_index":1228,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generateexamquestionscachekey(studentid",{"_index":1250,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/functions.html":{}}}],["generateexamreport",{"_index":914,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["generateexamreport(exam",{"_index":922,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["generateexamreport(examid",{"_index":1113,"title":{},"body":{"injectables/ExamService.html":{}}}],["generateexcelreport",{"_index":915,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["generateexcelreport(exam",{"_index":925,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["generateexcelreport(examid",{"_index":1115,"title":{},"body":{"injectables/ExamService.html":{}}}],["generatehtmltemplate",{"_index":942,"title":{},"body":{"injectables/ExamReportProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatehtmltemplate(studentdata",{"_index":1073,"title":{},"body":{"injectables/ExamReportProvider.html":{},"miscellaneous/functions.html":{}}}],["generatemcqquestioncachekey",{"_index":1229,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatemcqquestioncachekey(question._id.tostring",{"_index":1289,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["generatemcqquestioncachekey(questionid",{"_index":1292,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/functions.html":{}}}],["generatestudentpdf",{"_index":916,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["generatestudentpdf(studentdata",{"_index":928,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["generatestudentresponseszip",{"_index":917,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["generatestudentresponseszip(exam",{"_index":934,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["generatestudentresponseszip(examid",{"_index":1117,"title":{},"body":{"injectables/ExamService.html":{}}}],["generatetokenprovider",{"_index":200,"title":{"classes/GenerateTokenProvider.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AuthService.html":{},"classes/GenerateTokenProvider.html":{},"coverage.html":{}}}],["get('/all",{"_index":764,"title":{},"body":{"controllers/ExamController.html":{}}}],["get(':examid/report",{"_index":848,"title":{},"body":{"controllers/ExamController.html":{}}}],["get(':examid/report')@httpcode(httpstatus.ok",{"_index":802,"title":{},"body":{"controllers/ExamController.html":{}}}],["get(':examid/report/download",{"_index":753,"title":{},"body":{"controllers/ExamController.html":{}}}],["get(':examid/report/download')@httpcode(httpstatus.ok",{"_index":762,"title":{},"body":{"controllers/ExamController.html":{}}}],["get(':studentid/assignments",{"_index":1767,"title":{},"body":{"controllers/StudentController.html":{}}}],["get(':studentid/assignments/:examid",{"_index":1770,"title":{},"body":{"controllers/StudentController.html":{}}}],["get('ugr",{"_index":843,"title":{},"body":{"controllers/ExamController.html":{}}}],["get('ugr')@httpcode(httpstatus.ok",{"_index":766,"title":{},"body":{"controllers/ExamController.html":{}}}],["get(key",{"_index":409,"title":{},"body":{"injectables/CacheService.html":{}}}],["getassignmentsforstudent",{"_index":1186,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getassignmentsforstudent(studentid",{"_index":1209,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getcachedmcqquestion",{"_index":1187,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getcachedmcqquestion(questionid",{"_index":1214,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getgradinginstructions",{"_index":1614,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["gethello",{"_index":278,"title":{},"body":{"injectables/AppService.html":{}}}],["getoeexamsreadyforgrading",{"_index":718,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["getquestionmodel",{"_index":1188,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getquestionmodel(type",{"_index":1218,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["getstudentresponses",{"_index":918,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["getstudentresponses(examid",{"_index":936,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["getting",{"_index":2032,"title":{"index.html":{},"license.html":{}},"body":{}}],["ghi",{"_index":1691,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["given",{"_index":1211,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{}}}],["global",{"_index":372,"title":{},"body":{"modules/CacheModule.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["globalhttpexceptionfilter",{"_index":1320,"title":{"classes/GlobalHttpExceptionFilter.html":{}},"body":{"classes/GlobalHttpExceptionFilter.html":{},"coverage.html":{}}}],["gpt",{"_index":1695,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["gpu",{"_index":1070,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["grade",{"_index":1128,"title":{},"body":{"injectables/ExamService.html":{},"injectables/OpenaiService.html":{}}}],["graded",{"_index":1241,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["gradeexam",{"_index":719,"title":{},"body":{"controllers/ExamController.html":{}}}],["gradeexam(@body",{"_index":846,"title":{},"body":{"controllers/ExamController.html":{}}}],["gradeexam(gradeoeexamdto",{"_index":768,"title":{},"body":{"controllers/ExamController.html":{}}}],["gradeoeexam",{"_index":1100,"title":{},"body":{"injectables/ExamService.html":{}}}],["gradeoeexam(examid",{"_index":1120,"title":{},"body":{"injectables/ExamService.html":{}}}],["gradeoeexamdto",{"_index":769,"title":{"classes/GradeOeExamDto.html":{}},"body":{"controllers/ExamController.html":{},"classes/GradeOeExamDto.html":{},"coverage.html":{}}}],["gradeoeexamprovider",{"_index":882,"title":{"injectables/GradeOeExamProvider.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["gradeoeresponses",{"_index":1375,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["gradeoeresponses(examid",{"_index":1380,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["grader",{"_index":1639,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["graderequests",{"_index":1615,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["graderequests(gradingrequests",{"_index":1622,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["grading",{"_index":1008,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/OpenaiService.html":{}}}],["grading.assignment.exam",{"_index":1170,"title":{},"body":{"injectables/ExamService.html":{}}}],["grading.responses",{"_index":1012,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["grading.responses.length",{"_index":1013,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["grading.responses.map((response",{"_index":1014,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["grading.schema",{"_index":903,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{}}}],["grading.schema.ts",{"_index":1595,"title":{},"body":{"classes/OeExamGrading.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["grading.schema.ts:24",{"_index":1596,"title":{},"body":{"classes/OeExamGrading.html":{}}}],["grading.schema.ts:27",{"_index":1597,"title":{},"body":{"classes/OeExamGrading.html":{}}}],["grading.schema.ts:37",{"_index":1600,"title":{},"body":{"classes/OeExamGrading.html":{}}}],["gradingrequest",{"_index":1415,"title":{"interfaces/GradingRequest.html":{}},"body":{"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"coverage.html":{}}}],["gradingrequests",{"_index":1414,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"injectables/OpenaiService.html":{}}}],["gradingrequests.foreach(request",{"_index":1438,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["gradingrequests.push",{"_index":1419,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["gradingresult",{"_index":1444,"title":{"interfaces/GradingResult.html":{}},"body":{"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"coverage.html":{}}}],["gradings",{"_index":1163,"title":{},"body":{"injectables/ExamService.html":{}}}],["granted",{"_index":2119,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2080,"title":{},"body":{"index.html":{}}}],["group",{"_index":1412,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["grow",{"_index":2096,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["guide",{"_index":789,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/OpenaiService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["guidelines",{"_index":1645,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["guidevectorid",{"_index":1386,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{}}}],["guidevectorstoreid",{"_index":677,"title":{},"body":{"classes/Exam.html":{},"injectables/GradeOeExamProvider.html":{},"classes/OeExamGrading.html":{},"injectables/StudentService.html":{}}}],["handle",{"_index":1325,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["handled",{"_index":1517,"title":{},"body":{"interfaces/IResponse.html":{}}}],["handles",{"_index":1349,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["handling",{"_index":708,"title":{},"body":{"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["hands",{"_index":2074,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2063,"title":{},"body":{"index.html":{}}}],["hashing",{"_index":127,"title":{},"body":{"classes/Admin.html":{}}}],["header",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ExamReportProvider.html":{}}}],["headers",{"_index":972,"title":{},"body":{"injectables/ExamReportProvider.html":{},"miscellaneous/functions.html":{}}}],["headless",{"_index":1056,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["height",{"_index":1076,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["hello",{"_index":280,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":1992,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":2084,"title":{},"body":{"index.html":{}}}],["here",{"_index":2104,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":2118,"title":{},"body":{"license.html":{}}}],["holders",{"_index":2159,"title":{},"body":{"license.html":{}}}],["host",{"_index":386,"title":{},"body":{"modules/CacheModule.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":1356,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["html",{"_index":944,"title":{},"body":{"injectables/ExamReportProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["http",{"_index":1322,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"coverage.html":{}}}],["httpcode",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["httpcode(httpstatus.created",{"_index":820,"title":{},"body":{"controllers/ExamController.html":{}}}],["httpcode(httpstatus.ok",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["httpcode(httpstatus.ok)@post('auth",{"_index":1773,"title":{},"body":{"controllers/StudentController.html":{}}}],["httpcode(httpstatus.ok)@post('submit/mcq",{"_index":1777,"title":{},"body":{"controllers/StudentController.html":{}}}],["httpcode(httpstatus.ok)@post('submit/oe",{"_index":1780,"title":{},"body":{"controllers/StudentController.html":{}}}],["httpcode(httpstatus.ok)@post()@auth(authtype.none)@useinterceptors(classserializerinterceptor)@apioperation({summary",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1337,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["https://nestjs.com",{"_index":2110,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"controllers/StudentController.html":{}}}],["httpstatus.internal_server_error",{"_index":1360,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["hydrateddocument",{"_index":99,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":515,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IResponse.html":{},"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["id'})@apiparam({name",{"_index":738,"title":{},"body":{"controllers/ExamController.html":{}}}],["identifier",{"_index":519,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/UpdateExamParamDto.html":{},"coverage.html":{}}}],["identifiers",{"_index":491,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["identifying",{"_index":1525,"title":{},"body":{"interfaces/IStudent.html":{}}}],["ids",{"_index":1555,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["if(!uploadedfile",{"_index":1935,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["imcqquestion",{"_index":1476,"title":{"interfaces/IMcqQuestion.html":{}},"body":{"interfaces/IMcqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{}}}],["imcqquestionexpectedkeys",{"_index":1493,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implement",{"_index":1931,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["implements",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["implied",{"_index":2151,"title":{},"body":{"license.html":{}}}],["import",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["imported",{"_index":1492,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"miscellaneous/variables.html":{}}}],["imports",{"_index":212,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"interfaces/IStudent.html":{},"modules/StudentModule.html":{},"miscellaneous/variables.html":{}}}],["improve",{"_index":1926,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["include",{"_index":1212,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["includearrayindex",{"_index":1410,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["included",{"_index":2146,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1480,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IStudent.html":{}}}],["including",{"_index":1126,"title":{},"body":{"injectables/ExamService.html":{},"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1515,"title":{},"body":{"interfaces/IResponse.html":{}}}],["individual",{"_index":759,"title":{},"body":{"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["information",{"_index":627,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"miscellaneous/functions.html":{}}}],["inject",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/StudentService.html":{}}}],["inject(cache_manager",{"_index":424,"title":{},"body":{"injectables/CacheService.html":{}}}],["inject(forwardref",{"_index":643,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/StudentService.html":{}}}],["inject(jwtconfig.key",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["injectables",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"overview.html":{}}}],["injectconnection",{"_index":636,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["injectmodel",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["injectmodel('mcqquestion",{"_index":1235,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["injectmodel('oequestion",{"_index":1236,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["injectmodel(admin.name",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{}}}],["injectmodel(exam.name",{"_index":644,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["injectmodel(examassignment.name",{"_index":645,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["injectmodel(mcqquestion.name",{"_index":1129,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["injectmodel(oeexamgrading.name",{"_index":945,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{}}}],["injectmodel(oequestion.name",{"_index":1130,"title":{},"body":{"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["injectmodel(student.name",{"_index":1825,"title":{},"body":{"injectables/StudentService.html":{}}}],["input",{"_index":1343,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"injectables/OpenaiService.html":{}}}],["insert",{"_index":1564,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["insertedquestionids",{"_index":1897,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["insertedstudentids",{"_index":1545,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["inserting",{"_index":1916,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["insertone",{"_index":1910,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["inserts",{"_index":1917,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["insertstudentprovider",{"_index":1529,"title":{"injectables/InsertStudentProvider.html":{}},"body":{"injectables/InsertStudentProvider.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["insertstudents",{"_index":1532,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["insertstudents(tutoriallist",{"_index":1536,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["installcompile",{"_index":2048,"title":{},"body":{"index.html":{}}}],["instance",{"_index":362,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instance.canactivate(context",{"_index":364,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instanceof",{"_index":1358,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["instructions",{"_index":1697,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["integer",{"_index":826,"title":{},"body":{"controllers/ExamController.html":{}}}],["interact",{"_index":2081,"title":{},"body":{"index.html":{}}}],["interface",{"_index":76,"title":{"interfaces/ActiveAdminData.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{}},"body":{"interfaces/ActiveAdminData.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interfaces",{"_index":78,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{},"overview.html":{}}}],["internal",{"_index":1364,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["internalservererror",{"_index":1918,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["internalservererrorexception",{"_index":103,"title":{},"body":{"classes/Admin.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["internalservererrorexception(\"couldn't",{"_index":1936,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["internalservererrorexception('error",{"_index":126,"title":{},"body":{"classes/Admin.html":{}}}],["internalservererrorexception(`unknown",{"_index":1301,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["introduction",{"_index":823,"title":{},"body":{"controllers/ExamController.html":{}}}],["invalid",{"_index":145,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["ioeexpectedkeys",{"_index":1503,"title":{},"body":{"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ioequestion",{"_index":1495,"title":{"interfaces/IOeQuestion.html":{}},"body":{"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["iresponse",{"_index":642,"title":{"interfaces/IResponse.html":{}},"body":{"injectables/CreateExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isarray",{"_index":1856,"title":{},"body":{"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{}}}],["isarray()@validatenested({each",{"_index":1852,"title":{},"body":{"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{}}}],["iscompleted",{"_index":694,"title":{},"body":{"classes/ExamAssignment.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["isdate",{"_index":537,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["isemail",{"_index":471,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["isenum",{"_index":538,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{}}}],["isenum(examtype",{"_index":544,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{}}}],["isglobal",{"_index":266,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":590,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["isnotempty",{"_index":472,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GradeOeExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/StudentAnswerDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["iso",{"_index":503,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["isoptional",{"_index":539,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["ispasswordvalid",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":473,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GradeOeExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/StudentAnswerDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{}}}],["isstring()@isnotempty",{"_index":1305,"title":{},"body":{"classes/FetchQuestionParamsDto.html":{},"classes/GradeOeExamDto.html":{},"classes/LoginStudentDto.html":{},"classes/StudentAnswerDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{}}}],["isstring()@isnotempty()@transform",{"_index":1576,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["isstring()@maxlength(2000",{"_index":1756,"title":{},"body":{"classes/StudentAnswerDto.html":{}}}],["istudent",{"_index":1518,"title":{"interfaces/IStudent.html":{}},"body":{"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"coverage.html":{}}}],["istudentexpectedkeys",{"_index":1528,"title":{},"body":{"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1912,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["item.ttl",{"_index":442,"title":{},"body":{"injectables/CacheService.html":{}}}],["item.value",{"_index":441,"title":{},"body":{"injectables/CacheService.html":{}}}],["items",{"_index":417,"title":{},"body":{"injectables/CacheService.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["items.map(item",{"_index":439,"title":{},"body":{"injectables/CacheService.html":{}}}],["job",{"_index":2090,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2092,"title":{},"body":{"index.html":{}}}],["john",{"_index":452,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["joi",{"_index":1602,"title":{},"body":{"classes/OeExamGrading.html":{},"dependencies.html":{}}}],["join",{"_index":2102,"title":{},"body":{"index.html":{}}}],["json",{"_index":1333,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"injectables/OpenaiService.html":{}}}],["json.parse(cleanedresponse",{"_index":1712,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["jwtconfig",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AdminModule.html":{},"classes/GenerateTokenProvider.html":{}}}],["jwtconfiguration",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["jwtmodule",{"_index":203,"title":{},"body":{"modules/AdminModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":216,"title":{},"body":{"modules/AdminModule.html":{}}}],["jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{}}}],["kamil",{"_index":2107,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1661,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["key",{"_index":408,"title":{},"body":{"injectables/CacheService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{}}}],["keyof",{"_index":1494,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["keys",{"_index":414,"title":{},"body":{"injectables/CacheService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["keys.map",{"_index":436,"title":{},"body":{"injectables/CacheService.html":{}}}],["keys.map(key",{"_index":433,"title":{},"body":{"injectables/CacheService.html":{}}}],["keys.ts",{"_index":1954,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":2150,"title":{},"body":{"license.html":{}}}],["labeled",{"_index":1482,"title":{},"body":{"interfaces/IMcqQuestion.html":{}}}],["last_active_at",{"_index":1740,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["later",{"_index":1927,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["lean",{"_index":1200,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["learn",{"_index":2067,"title":{},"body":{"index.html":{}}}],["left",{"_index":1090,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["legend",{"_index":182,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["length",{"_index":868,"title":{},"body":{"controllers/ExamController.html":{}}}],["letter",{"_index":461,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["level",{"_index":1035,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["liability",{"_index":2163,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2160,"title":{},"body":{"license.html":{}}}],["license",{"_index":2113,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2095,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":2128,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2152,"title":{},"body":{"license.html":{}}}],["linkedin",{"_index":2088,"title":{},"body":{"index.html":{}}}],["links",{"_index":1885,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["list",{"_index":618,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"miscellaneous/variables.html":{}}}],["literal",{"_index":1598,"title":{},"body":{"classes/OeExamGrading.html":{}}}],["live",{"_index":1202,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["load",{"_index":272,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost",{"_index":388,"title":{},"body":{"modules/CacheModule.html":{}}}],["login",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["login'})@apiresponse({description",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StudentController.html":{}}}],["login(logindto",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(loginstudentdto",{"_index":1772,"title":{},"body":{"controllers/StudentController.html":{}}}],["logindto",{"_index":286,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginstudent",{"_index":1813,"title":{},"body":{"injectables/StudentService.html":{}}}],["loginstudent(loginstudentdto",{"_index":1820,"title":{},"body":{"injectables/StudentService.html":{}}}],["loginstudentdto",{"_index":1573,"title":{"classes/LoginStudentDto.html":{}},"body":{"classes/LoginStudentDto.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["loginstudentdto.matricno",{"_index":1827,"title":{},"body":{"injectables/StudentService.html":{}}}],["loginstudentdto.password.tolowercase",{"_index":1832,"title":{},"body":{"injectables/StudentService.html":{}}}],["longer",{"_index":513,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["looking",{"_index":2089,"title":{},"body":{"index.html":{}}}],["loop",{"_index":359,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["m/total",{"_index":1660,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["manager",{"_index":375,"title":{},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"dependencies.html":{}}}],["managing",{"_index":1095,"title":{},"body":{"injectables/ExamService.html":{}}}],["map",{"_index":1169,"title":{},"body":{"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{}}}],["map(([assignmentid",{"_index":1465,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["map((student",{"_index":1548,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["mappedstudent",{"_index":1549,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["mappedstudent.matricno",{"_index":1552,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["maps",{"_index":2022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["margin",{"_index":1084,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["mark",{"_index":788,"title":{},"body":{"controllers/ExamController.html":{}}}],["marking",{"_index":794,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/OpenaiService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["markingguide",{"_index":1626,"title":{},"body":{"injectables/OpenaiService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["markingguide.mimetype",{"_index":1729,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["markingguide.originalname",{"_index":1728,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["marks",{"_index":1653,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["match",{"_index":1408,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"interfaces/IMcqQuestion.html":{}}}],["matches",{"_index":474,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{},"injectables/OpenaiService.html":{}}}],["matches(/^(?=.*[a",{"_index":481,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["matching",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matric",{"_index":973,"title":{},"body":{"injectables/ExamReportProvider.html":{},"interfaces/IStudent.html":{},"injectables/StudentService.html":{},"miscellaneous/variables.html":{}}}],["matricno",{"_index":952,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginStudentDto.html":{},"classes/Student.html":{},"injectables/StudentService.html":{}}}],["matricnumber",{"_index":962,"title":{},"body":{"injectables/ExamReportProvider.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{}}}],["matriculation",{"_index":1523,"title":{},"body":{"interfaces/IStudent.html":{}}}],["matric}.pdf",{"_index":1051,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["max",{"_index":798,"title":{},"body":{"controllers/ExamController.html":{}}}],["max_num_results",{"_index":1704,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["max_output_tokens",{"_index":1705,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["maxlength",{"_index":1759,"title":{},"body":{"classes/StudentAnswerDto.html":{}}}],["maxlength(2000",{"_index":1760,"title":{},"body":{"classes/StudentAnswerDto.html":{}}}],["mcq",{"_index":521,"title":{"classes/Mcq.html":{}},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IMcqQuestion.html":{},"classes/Mcq.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mcq.a",{"_index":1904,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq.b",{"_index":1905,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq.c",{"_index":1906,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq.d",{"_index":1907,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq.question",{"_index":1903,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcq['correct",{"_index":1908,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcqlist",{"_index":832,"title":{},"body":{"controllers/ExamController.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["mcqlist.length",{"_index":1893,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcqlist.map((mcq",{"_index":1902,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mcqmodel",{"_index":1192,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["mcqquestion",{"_index":579,"title":{"classes/McqQuestion.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/McqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["mcqquestion.name",{"_index":909,"title":{},"body":{"modules/ExamModule.html":{}}}],["mcqquestioncache",{"_index":1590,"title":{"interfaces/McqQuestionCache.html":{}},"body":{"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mcqquestiondocument",{"_index":1227,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"classes/McqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["mcqquestionmodel",{"_index":1102,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["mcqquestionschema",{"_index":892,"title":{},"body":{"modules/ExamModule.html":{},"classes/McqQuestion.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mcqs",{"_index":580,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["mcqtemplate",{"_index":774,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["mcqtemplate.mimetype",{"_index":1138,"title":{},"body":{"injectables/ExamService.html":{}}}],["mentioned",{"_index":1685,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["merchantability",{"_index":2154,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2131,"title":{},"body":{"license.html":{}}}],["message",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"classes/LoginDto.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":734,"title":{},"body":{"controllers/ExamController.html":{},"dependencies.html":{}}}],["method",{"_index":1348,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["mg",{"_index":1737,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["mget",{"_index":400,"title":{},"body":{"injectables/CacheService.html":{}}}],["mget(keys",{"_index":412,"title":{},"body":{"injectables/CacheService.html":{}}}],["mguide",{"_index":1145,"title":{},"body":{"injectables/ExamService.html":{}}}],["min",{"_index":591,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["min(1",{"_index":595,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["min(10",{"_index":594,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["minimum",{"_index":457,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{}}}],["minlength",{"_index":454,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"classes/LoginDto.html":{}}}],["minlength(3",{"_index":477,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["minlength(6",{"_index":593,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["minlength(8",{"_index":480,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["minutes",{"_index":574,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["miscellaneous",{"_index":2006,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missed",{"_index":1687,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["missing",{"_index":144,"title":{},"body":{"controllers/AdminController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{}}}],["mit",{"_index":2094,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":1892,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"index.html":{}}}],["model",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["modify",{"_index":2130,"title":{},"body":{"license.html":{}}}],["module",{"_index":178,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["modules",{"_index":180,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":1878,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["mongoose",{"_index":101,"title":{},"body":{"classes/Admin.html":{},"injectables/AdminService.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":689,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/OeExamGrading.html":{}}}],["mongoose.types.objectid",{"_index":686,"title":{},"body":{"classes/Exam.html":{}}}],["mongoosemodule",{"_index":198,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{}}}],["mongoosemodule.forfeature",{"_index":213,"title":{},"body":{"modules/AdminModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":2068,"title":{},"body":{"index.html":{}}}],["mset",{"_index":401,"title":{},"body":{"injectables/CacheService.html":{}}}],["mset(items",{"_index":415,"title":{},"body":{"injectables/CacheService.html":{}}}],["multipart/form",{"_index":2026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multiple",{"_index":430,"title":{},"body":{"injectables/CacheService.html":{},"classes/CreateExamDto.html":{},"interfaces/IMcqQuestion.html":{},"miscellaneous/enumerations.html":{}}}],["myśliwiec",{"_index":2108,"title":{},"body":{"index.html":{}}}],["name",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["ne",{"_index":949,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["need",{"_index":1147,"title":{},"body":{"injectables/ExamService.html":{},"index.html":{}}}],["nest",{"_index":2042,"title":{},"body":{"index.html":{}}}],["nestcachemodule",{"_index":373,"title":{},"body":{"modules/CacheModule.html":{}}}],["nestcachemodule.registerasync",{"_index":381,"title":{},"body":{"modules/CacheModule.html":{}}}],["nestframework",{"_index":2112,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":2065,"title":{},"body":{"index.html":{}}}],["nestjs/cache",{"_index":374,"title":{},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"classes/GenerateTokenProvider.html":{},"injectables/OpenaiService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":209,"title":{},"body":{"modules/AdminModule.html":{},"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AdminModule.html":{},"classes/GenerateTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":98,"title":{},"body":{"classes/Admin.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":812,"title":{},"body":{"controllers/ExamController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":169,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"classes/LoginDto.html":{},"classes/UpdateExamParamDto.html":{},"dependencies.html":{}}}],["networkidle0",{"_index":1080,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["new",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["newadmin",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{}}}],["newadmin.save",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{}}}],["no'].touppercase",{"_index":1550,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["node.js",{"_index":2035,"title":{},"body":{"index.html":{}}}],["none",{"_index":2011,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":2157,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["notfoundexception(\"assignment",{"_index":1238,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["notfoundexception('exam",{"_index":1156,"title":{},"body":{"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["notfoundexception('student",{"_index":1828,"title":{},"body":{"injectables/StudentService.html":{}}}],["notfoundexception('user",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["notice",{"_index":2144,"title":{},"body":{"license.html":{}}}],["npm",{"_index":2047,"title":{},"body":{"index.html":{}}}],["null",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CacheService.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"classes/OeExamGrading.html":{},"injectables/OpenaiService.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":420,"title":{},"body":{"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IStudent.html":{},"classes/LoginDto.html":{},"classes/OeExamGrading.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{}}}],["object",{"_index":487,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.entries(assignmenttotals",{"_index":1463,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["object.values(result.insertedids",{"_index":1898,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["objective",{"_index":1664,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["objects",{"_index":1199,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"miscellaneous/functions.html":{}}}],["observable",{"_index":342,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["obtaining",{"_index":2123,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":1370,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["oe",{"_index":712,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IOeQuestion.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["oe._id.tostring",{"_index":1423,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["oe.assignment.tostring",{"_index":1420,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["oe.guidevectorstoreid",{"_index":1421,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["oe.responses.foreach(response",{"_index":1417,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["oe/oe",{"_index":1601,"title":{},"body":{"classes/OeExamGrading.html":{}}}],["oeexamgrading",{"_index":900,"title":{"classes/OeExamGrading.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"classes/OeExamGrading.html":{},"coverage.html":{}}}],["oeexamgrading.name",{"_index":911,"title":{},"body":{"modules/ExamModule.html":{}}}],["oeexamgradingdocument",{"_index":1388,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"classes/OeExamGrading.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["oeexamgradingid",{"_index":1422,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{}}}],["oeexamgradingmodel",{"_index":921,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{}}}],["oeexamgradingschema",{"_index":901,"title":{},"body":{"modules/ExamModule.html":{},"classes/OeExamGrading.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oemodel",{"_index":1193,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["oeq.question",{"_index":1924,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["oeqlist",{"_index":1919,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["oeqlist.length",{"_index":1921,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["oeqlist.map((oeq",{"_index":1923,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["oequestion",{"_index":581,"title":{"classes/OeQuestion.html":{}},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["oequestion'})@isnotempty",{"_index":582,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["oequestion.name",{"_index":910,"title":{},"body":{"modules/ExamModule.html":{}}}],["oequestioncache",{"_index":1593,"title":{"interfaces/OeQuestionCache.html":{}},"body":{"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["oequestiondocument",{"_index":1391,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"classes/OeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["oequestionmodel",{"_index":1103,"title":{},"body":{"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["oequestionschema",{"_index":895,"title":{},"body":{"modules/ExamModule.html":{},"classes/OeQuestion.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oerecord",{"_index":1406,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["oerecord.foreach(oe",{"_index":1416,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["oetemplate",{"_index":1146,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["offer",{"_index":2091,"title":{},"body":{"index.html":{}}}],["officedocument.spreadsheetml.sheet",{"_index":864,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["officedocument.wordprocessingml.document",{"_index":1150,"title":{},"body":{"injectables/ExamService.html":{}}}],["official",{"_index":2076,"title":{},"body":{"index.html":{}}}],["ojuri",{"_index":2116,"title":{},"body":{"license.html":{}}}],["oluwafemi",{"_index":2115,"title":{},"body":{"license.html":{}}}],["once",{"_index":431,"title":{},"body":{"injectables/CacheService.html":{}}}],["one",{"_index":460,"title":{},"body":{"classes/CreateAdminDto.html":{},"interfaces/IMcqQuestion.html":{},"classes/LoginDto.html":{}}}],["open",{"_index":522,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["openai",{"_index":1627,"title":{},"body":{"injectables/OpenaiService.html":{},"injectables/UpdateOeExamProvider.html":{},"dependencies.html":{}}}],["openai.service",{"_index":1610,"title":{},"body":{"modules/OpenaiModule.html":{}}}],["openai/openai.module",{"_index":256,"title":{},"body":{"modules/AppModule.html":{}}}],["openai/resources/responses/responses",{"_index":1629,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["openaiapiresponse",{"_index":1475,"title":{"interfaces/OpenaiApiResponse.html":{}},"body":{"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{},"coverage.html":{}}}],["openaiapiresponse).output[1].content[0].text.tostring",{"_index":1709,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["openaimodule",{"_index":247,"title":{"modules/OpenaiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules.html":{},"overview.html":{}}}],["openaiservice",{"_index":1378,"title":{"injectables/OpenaiService.html":{}},"body":{"injectables/GradeOeExamProvider.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"overview.html":{}}}],["operation",{"_index":649,"title":{},"body":{"injectables/CreateExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["operations",{"_index":660,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["ops",{"_index":1446,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["ops.length",{"_index":1455,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["option",{"_index":1488,"title":{},"body":{"interfaces/IMcqQuestion.html":{}}}],["optional",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/IResponse.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1275,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["ordered",{"_index":1471,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["otherwise",{"_index":2167,"title":{},"body":{"license.html":{}}}],["out",{"_index":192,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":1342,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{}}}],["overview",{"_index":2172,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p@ssw0rd",{"_index":1568,"title":{},"body":{"classes/LoginDto.html":{}}}],["package",{"_index":1980,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1071,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["page.pdf",{"_index":1081,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["page.setcontent(html",{"_index":1078,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["page.setviewport",{"_index":1074,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["pairs",{"_index":437,"title":{},"body":{"injectables/CacheService.html":{}}}],["param",{"_index":156,"title":{},"body":{"controllers/AdminController.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"controllers/StudentController.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["param('examid",{"_index":851,"title":{},"body":{"controllers/ExamController.html":{}}}],["param.dto",{"_index":807,"title":{},"body":{"controllers/ExamController.html":{}}}],["param.dto.ts",{"_index":1864,"title":{},"body":{"classes/UpdateExamParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:20",{"_index":1867,"title":{},"body":{"classes/UpdateExamParamDto.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["params.dto",{"_index":1786,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["params.dto.ts",{"_index":1304,"title":{},"body":{"classes/FetchQuestionParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:10",{"_index":1306,"title":{},"body":{"classes/FetchQuestionParamsDto.html":{}}}],["params.dto.ts:6",{"_index":1307,"title":{},"body":{"classes/FetchQuestionParamsDto.html":{}}}],["parsed",{"_index":615,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/OpenaiService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["parsed.comment",{"_index":1714,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["parsed.score",{"_index":1713,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["parseint(url.port",{"_index":390,"title":{},"body":{"modules/CacheModule.html":{}}}],["parser",{"_index":1542,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["parser.ts",{"_index":1977,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["parses",{"_index":619,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["parsetemplate",{"_index":1540,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsetemplate(oetemplate",{"_index":1920,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["parsetemplate(template",{"_index":2020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsing",{"_index":1719,"title":{},"body":{"injectables/OpenaiService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["part",{"_index":2085,"title":{},"body":{"index.html":{}}}],["partial",{"_index":1667,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["partially",{"_index":1674,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["particular",{"_index":2156,"title":{},"body":{"license.html":{}}}],["passw0rd",{"_index":464,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["password",{"_index":87,"title":{},"body":{"classes/Admin.html":{},"modules/CacheModule.html":{},"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"injectables/StudentService.html":{}}}],["patch",{"_index":157,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{}}}],["patch('mcq/:examid",{"_index":830,"title":{},"body":{"controllers/ExamController.html":{}}}],["patch('mcq/:examid')@httpcode(httpstatus.ok)@useinterceptors(undefined)@apioperation({summary",{"_index":775,"title":{},"body":{"controllers/ExamController.html":{}}}],["patch('oe/:examid",{"_index":837,"title":{},"body":{"controllers/ExamController.html":{}}}],["patch('oe/:examid')@httpcode(httpstatus.ok)@useinterceptors(undefined)@apioperation({summary",{"_index":786,"title":{},"body":{"controllers/ExamController.html":{}}}],["path",{"_index":1001,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"classes/UpdateExamParamDto.html":{}}}],["payload",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GenerateTokenProvider.html":{},"interfaces/IResponse.html":{}}}],["pdf",{"_index":796,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["pdfbuffer",{"_index":1047,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["pdfs",{"_index":760,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["per",{"_index":1675,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["permission",{"_index":2117,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2137,"title":{},"body":{"license.html":{}}}],["person",{"_index":2122,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2138,"title":{},"body":{"license.html":{}}}],["please",{"_index":1152,"title":{},"body":{"injectables/ExamService.html":{},"index.html":{}}}],["populate",{"_index":1000,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["populate('exam",{"_index":992,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["populate('responses.questionid",{"_index":1004,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["populate('student",{"_index":950,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["port",{"_index":389,"title":{},"body":{"modules/CacheModule.html":{}}}],["portions",{"_index":2148,"title":{},"body":{"license.html":{}}}],["possible",{"_index":527,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"interfaces/IMcqQuestion.html":{}}}],["post",{"_index":158,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["post('auth",{"_index":1789,"title":{},"body":{"controllers/StudentController.html":{}}}],["post('grade",{"_index":845,"title":{},"body":{"controllers/ExamController.html":{}}}],["post('grade')@httpcode(httpstatus.ok",{"_index":770,"title":{},"body":{"controllers/ExamController.html":{}}}],["post('submit/mcq",{"_index":1795,"title":{},"body":{"controllers/StudentController.html":{}}}],["post('submit/oe",{"_index":1798,"title":{},"body":{"controllers/StudentController.html":{}}}],["post()@apibearerauth()@apioperation({summary",{"_index":137,"title":{},"body":{"controllers/AdminController.html":{}}}],["post()@httpcode(httpstatus.created)@useinterceptors(undefined)@apioperation({summary",{"_index":723,"title":{},"body":{"controllers/ExamController.html":{}}}],["prefix",{"_index":132,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["preparedresponses",{"_index":1441,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["preparedresponses.length",{"_index":1443,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["preparelistforbulkwrite",{"_index":1871,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["preparelistforbulkwrite(mcqlist",{"_index":1874,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["prepareresponsesforgrading",{"_index":1376,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["prepareresponsesforgrading(examid",{"_index":1382,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["prepares",{"_index":1876,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["present",{"_index":2027,"title":{},"body":{"miscellaneous/functions.html":{}}}],["printbackground",{"_index":1083,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["private",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["process",{"_index":1269,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/OpenaiService.html":{}}}],["process.env.node_env",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["processed",{"_index":1278,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["processedquestions",{"_index":1270,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["production",{"_index":2052,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":2034,"title":{},"body":{"index.html":{}}}],["project",{"_index":1634,"title":{},"body":{"injectables/OpenaiService.html":{},"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AdminService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["promise((resolve",{"_index":1039,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["promise.all",{"_index":438,"title":{},"body":{"injectables/CacheService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/StudentService.html":{}}}],["promise.all(batchpromises",{"_index":1721,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["promise.all(promises",{"_index":435,"title":{},"body":{"injectables/CacheService.html":{}}}],["promise.all(questionpromises",{"_index":1433,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["promise.resolve",{"_index":363,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["promises",{"_index":432,"title":{},"body":{"injectables/CacheService.html":{}}}],["prop",{"_index":95,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["prop(['undefined",{"_index":1599,"title":{},"body":{"classes/OeExamGrading.html":{}}}],["prop({default",{"_index":683,"title":{},"body":{"classes/Exam.html":{}}}],["prop({enum",{"_index":681,"title":{},"body":{"classes/Exam.html":{}}}],["prop({required",{"_index":89,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/McqQuestion.html":{},"classes/Student.html":{}}}],["prop({type",{"_index":687,"title":{},"body":{"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{}}}],["properties",{"_index":82,"title":{"properties.html":{}},"body":{"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GradeOeExamDto.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"interfaces/StudentResponseData.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"properties.html":{}}}],["provide",{"_index":217,"title":{},"body":{"modules/AdminModule.html":{},"injectables/ExamService.html":{}}}],["provided",{"_index":560,"title":{},"body":{"classes/CreateExamDto.html":{},"injectables/ExamReportProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/OpenaiService.html":{},"license.html":{}}}],["provider",{"_index":599,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["providers",{"_index":185,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"injectables/ExamService.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["providers/admin.service",{"_index":160,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["providers/auth.service",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["providers/create",{"_index":889,"title":{},"body":{"modules/ExamModule.html":{}}}],["providers/exam",{"_index":905,"title":{},"body":{"modules/ExamModule.html":{}}}],["providers/exam.service",{"_index":809,"title":{},"body":{"controllers/ExamController.html":{},"modules/ExamModule.html":{}}}],["providers/fetch",{"_index":897,"title":{},"body":{"modules/ExamModule.html":{}}}],["providers/grade",{"_index":899,"title":{},"body":{"modules/ExamModule.html":{}}}],["providers/insert",{"_index":1806,"title":{},"body":{"modules/StudentModule.html":{}}}],["providers/student.service",{"_index":1784,"title":{},"body":{"controllers/StudentController.html":{},"modules/StudentModule.html":{}}}],["providers/update",{"_index":891,"title":{},"body":{"modules/ExamModule.html":{}}}],["providing",{"_index":1338,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["public",{"_index":133,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/GenerateTokenProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["publish",{"_index":2132,"title":{},"body":{"license.html":{}}}],["puppeteer",{"_index":940,"title":{},"body":{"injectables/ExamReportProvider.html":{},"dependencies.html":{}}}],["puppeteer.launch",{"_index":1055,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["purpose",{"_index":1732,"title":{},"body":{"injectables/OpenaiService.html":{},"license.html":{}}}],["push",{"_index":1413,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["q._id.tostring",{"_index":1273,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["q.options",{"_index":1276,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["q.question",{"_index":1274,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["query",{"_index":1264,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["question",{"_index":558,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"controllers/StudentController.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question._id",{"_index":1286,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["question.answer",{"_index":1842,"title":{},"body":{"injectables/StudentService.html":{}}}],["question.interface",{"_index":1889,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["question.interface.ts",{"_index":1478,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["question.question",{"_index":1437,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["question.schema",{"_index":894,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"classes/OeExamGrading.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["question.schema.ts",{"_index":1585,"title":{},"body":{"classes/McqQuestion.html":{},"classes/OeQuestion.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["question.schema.ts:19",{"_index":1588,"title":{},"body":{"classes/McqQuestion.html":{},"classes/OeQuestion.html":{}}}],["question.schema.ts:22",{"_index":1587,"title":{},"body":{"classes/McqQuestion.html":{}}}],["question.schema.ts:25",{"_index":1586,"title":{},"body":{"classes/McqQuestion.html":{}}}],["questioncount",{"_index":564,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["questiondata",{"_index":1015,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["questiondata?.question",{"_index":1019,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["questionid",{"_index":1217,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"classes/OeExamGrading.html":{},"interfaces/OpenaiApiResponse.html":{},"classes/StudentAnswerDto.html":{},"miscellaneous/functions.html":{}}}],["questionmap",{"_index":1434,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["questionmap.get(request.questionid",{"_index":1440,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["questionmap.set(uniquequestionids[index",{"_index":1436,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["questionnumber",{"_index":1018,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["questionpromises",{"_index":1430,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["questionresponse",{"_index":938,"title":{"interfaces/QuestionResponse.html":{}},"body":{"injectables/ExamReportProvider.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{},"coverage.html":{}}}],["questions",{"_index":584,"title":{},"body":{"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["questions.foreach((question",{"_index":1435,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["questions.length",{"_index":1257,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["questions.map(question",{"_index":1285,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["questions?.length",{"_index":1254,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["questiontext",{"_index":1474,"title":{},"body":{"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{}}}],["queue",{"_index":1930,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["r",{"_index":1459,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["r.aicomment",{"_index":1454,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["r.aiscore",{"_index":1452,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["random",{"_index":1259,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["randomized",{"_index":1206,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["read",{"_index":2103,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["real",{"_index":2082,"title":{},"body":{"index.html":{}}}],["received",{"_index":2025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["receiving",{"_index":534,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["record",{"_index":347,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{}}}],["redis",{"_index":378,"title":{},"body":{"modules/CacheModule.html":{},"dependencies.html":{}}}],["redisstore",{"_index":376,"title":{},"body":{"modules/CacheModule.html":{}}}],["redisurl",{"_index":382,"title":{},"body":{"modules/CacheModule.html":{}}}],["ref",{"_index":696,"title":{},"body":{"classes/ExamAssignment.html":{},"classes/OeExamGrading.html":{}}}],["reflect",{"_index":1999,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":339,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refpath",{"_index":690,"title":{},"body":{"classes/Exam.html":{}}}],["reject",{"_index":1040,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["related",{"_index":709,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["replace(/\\s+/g",{"_index":858,"title":{},"body":{"controllers/ExamController.html":{}}}],["report",{"_index":860,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["report.data.examtitle",{"_index":970,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["report.data.examtitle.split",{"_index":990,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["report.data.students.map(student",{"_index":974,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["report.provider",{"_index":906,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{}}}],["report.provider.ts",{"_index":913,"title":{},"body":{"injectables/ExamReportProvider.html":{},"coverage.html":{}}}],["report.provider.ts:120",{"_index":937,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["report.provider.ts:19",{"_index":920,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["report.provider.ts:191",{"_index":935,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["report.provider.ts:245",{"_index":931,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["report.provider.ts:33",{"_index":923,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["report.provider.ts:73",{"_index":926,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["repository",{"_index":2045,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1479,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/enumerations.html":{}}}],["req.questionid",{"_index":1429,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/OpenaiService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.assignmentid",{"_index":1715,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["request.guidevectorid",{"_index":1703,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["request.headers.authorization?.split",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request.oeexamgradingid",{"_index":1716,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["request.questiontext",{"_index":1439,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["request.questiontext}\\n",{"_index":1636,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["request.responseid",{"_index":1717,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["request.ts",{"_index":1473,"title":{},"body":{"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{},"coverage.html":{}}}],["request.userresponse",{"_index":1637,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["request[request_user_key",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":1258,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["required",{"_index":116,"title":{},"body":{"classes/Admin.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/Student.html":{}}}],["res",{"_index":752,"title":{},"body":{"controllers/ExamController.html":{}}}],["res.answer",{"_index":1398,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["res.questionid",{"_index":1396,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["res.send(buffer",{"_index":872,"title":{},"body":{"controllers/ExamController.html":{}}}],["res.setheader('cache",{"_index":870,"title":{},"body":{"controllers/ExamController.html":{}}}],["res.setheader('content",{"_index":862,"title":{},"body":{"controllers/ExamController.html":{}}}],["reset",{"_index":191,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["resolve(buffer.concat(chunks",{"_index":1045,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["resources",{"_index":2061,"title":{},"body":{"index.html":{}}}],["response",{"_index":629,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["response._id.tostring",{"_index":1426,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["response.aicomment",{"_index":1026,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["response.aiscore",{"_index":1024,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["response.answer",{"_index":1843,"title":{},"body":{"injectables/StudentService.html":{}}}],["response.output",{"_index":1707,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["response.questionid",{"_index":1016,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["response.questionid.tostring",{"_index":1424,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["response.status(status).json",{"_index":1371,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["response.userresponse",{"_index":1022,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["response.userresponse.trim",{"_index":1418,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["responsefilesearchtoolcall",{"_index":1628,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["responseid",{"_index":1425,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{}}}],["responseindex",{"_index":1411,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["responses",{"_index":757,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"classes/OeExamGrading.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"miscellaneous/functions.html":{}}}],["responses.$.aicomment",{"_index":1453,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["responses.$.aiscore",{"_index":1451,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["responses._id",{"_index":1449,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["responses.aicomment",{"_index":1167,"title":{},"body":{"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{}}}],["responses.aiscore",{"_index":1165,"title":{},"body":{"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{}}}],["responses.map((res",{"_index":1395,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["responses.map(r",{"_index":1447,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["responses.reduce>((acc",{"_index":1458,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["responsible",{"_index":600,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["restriction",{"_index":2127,"title":{},"body":{"license.html":{}}}],["result",{"_index":800,"title":{},"body":{"controllers/ExamController.html":{},"interfaces/IResponse.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["results",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.filter(boolean",{"_index":1248,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["results.push(...batchresults",{"_index":1722,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["ret",{"_index":112,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["ret._id",{"_index":114,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["ret.id",{"_index":113,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["retries",{"_index":1932,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["retrieval",{"_index":1198,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["retrieve",{"_index":1216,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["retrieved",{"_index":1132,"title":{},"body":{"injectables/ExamService.html":{},"injectables/StudentService.html":{}}}],["retrieving",{"_index":1295,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["return",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"injectables/OpenaiService.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":1087,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["rights",{"_index":2129,"title":{},"body":{"license.html":{}}}],["rubric",{"_index":1648,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["run",{"_index":1068,"title":{},"body":{"injectables/ExamReportProvider.html":{},"index.html":{}}}],["runvalidators",{"_index":1243,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["rxjs",{"_index":343,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["s._id.tostring",{"_index":1563,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["s['matric",{"_index":1558,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["salt",{"_index":122,"title":{},"body":{"classes/Admin.html":{}}}],["sandbox",{"_index":1058,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["save",{"_index":1900,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["saves",{"_index":1883,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["scalable",{"_index":2039,"title":{},"body":{"index.html":{}}}],["scheduling",{"_index":492,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["schema",{"_index":96,"title":{},"body":{"classes/Admin.html":{},"modules/AdminModule.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"modules/StudentModule.html":{}}}],["schemafactory",{"_index":97,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["schemafactory.createforclass(admin",{"_index":118,"title":{},"body":{"classes/Admin.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(exam",{"_index":691,"title":{},"body":{"classes/Exam.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(examassignment",{"_index":705,"title":{},"body":{"classes/ExamAssignment.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(mcqquestion",{"_index":1589,"title":{},"body":{"classes/McqQuestion.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(oeexamgrading",{"_index":1603,"title":{},"body":{"classes/OeExamGrading.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(oequestion",{"_index":1605,"title":{},"body":{"classes/OeQuestion.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(student",{"_index":1752,"title":{},"body":{"classes/Student.html":{},"miscellaneous/variables.html":{}}}],["schemas/admin.schema",{"_index":199,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{}}}],["schemas/exam",{"_index":640,"title":{},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["schemas/exam.schema",{"_index":634,"title":{},"body":{"injectables/CreateExamProvider.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["schemas/mcq/mcq",{"_index":893,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["schemas/oe",{"_index":902,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{}}}],["schemas/oe/oe",{"_index":896,"title":{},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["schemas/student.schema",{"_index":1539,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{}}}],["science",{"_index":571,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["score",{"_index":695,"title":{},"body":{"classes/ExamAssignment.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{}}}],["scores",{"_index":1839,"title":{},"body":{"injectables/StudentService.html":{}}}],["scores.reduce((sum",{"_index":1844,"title":{},"body":{"injectables/StudentService.html":{}}}],["scripts",{"_index":873,"title":{},"body":{"controllers/ExamController.html":{}}}],["scripts')@httpcode(httpstatus.ok",{"_index":754,"title":{},"body":{"controllers/ExamController.html":{}}}],["seconds",{"_index":1203,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["secret",{"_index":1316,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["section",{"_index":1676,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["select",{"_index":1002,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["select('_id",{"_index":1402,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["selected",{"_index":1260,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["selected.length",{"_index":1268,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["sell",{"_index":2135,"title":{},"body":{"license.html":{}}}],["sending",{"_index":1928,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["sends",{"_index":1351,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["server",{"_index":1365,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"index.html":{}}}],["service",{"_index":1094,"title":{},"body":{"injectables/ExamService.html":{}}}],["session",{"_index":651,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["session(session",{"_index":1561,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["session.aborttransaction",{"_index":672,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["session.committransaction",{"_index":670,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["session.endsession",{"_index":675,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["session.starttransaction",{"_index":653,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["set",{"_index":402,"title":{},"body":{"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["set(gradingrequests.map(req",{"_index":1428,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["set(key",{"_index":418,"title":{},"body":{"injectables/CacheService.html":{}}}],["setmetadata(auth_type_key",{"_index":2196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settimeout(resolve",{"_index":1723,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["setuid",{"_index":1060,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["setup",{"_index":2046,"title":{},"body":{"index.html":{}}}],["shall",{"_index":2145,"title":{},"body":{"license.html":{}}}],["shape",{"_index":1491,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["shm",{"_index":1062,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["showing",{"_index":1652,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["shuffle",{"_index":1222,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["shuffleandselect",{"_index":1189,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["shuffleandselect(array",{"_index":1220,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["side",{"_index":2040,"title":{},"body":{"index.html":{}}}],["signtoken",{"_index":1310,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["signtoken(adminid",{"_index":1312,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["single",{"_index":932,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"interfaces/IResponse.html":{}}}],["software",{"_index":2124,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"modules/CacheModule.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"modules/ExamModule.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"modules/OpenaiModule.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"index.html":{}}}],["special",{"_index":462,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/LoginDto.html":{}}}],["specific",{"_index":924,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{}}}],["sponsors",{"_index":2098,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":2188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../admin.schema.ts",{"_index":2181,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":2008,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":2190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":2189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cache",{"_index":2015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../exam",{"_index":2010,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../exam.schema.ts",{"_index":2183,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../fetch",{"_index":2191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../generate",{"_index":2016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mcq",{"_index":2184,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../oe",{"_index":2185,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../question",{"_index":2182,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../response",{"_index":2018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../student.interface.ts",{"_index":2192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../student.schema.ts",{"_index":2186,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../template",{"_index":2017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/admin/admin.controller.ts",{"_index":131,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:28",{"_index":153,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.module.ts",{"_index":193,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/auth/auth.controller.ts",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/admin/auth/auth.controller.ts:38",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/admin/auth/constants/auth.constants.ts",{"_index":1942,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/admin/auth/decorators/active",{"_index":1945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/admin/auth/decorators/auth.decorator",{"_index":817,"title":{},"body":{"controllers/ExamController.html":{},"controllers/StudentController.html":{}}}],["src/admin/auth/decorators/auth.decorator.ts",{"_index":1948,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/admin/auth/dtos/login.dto.ts",{"_index":1565,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/admin/auth/dtos/login.dto.ts:18",{"_index":1567,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/admin/auth/dtos/login.dto.ts:33",{"_index":1571,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/admin/auth/enums/auth",{"_index":818,"title":{},"body":{"controllers/ExamController.html":{},"controllers/StudentController.html":{},"miscellaneous/enumerations.html":{}}}],["src/admin/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/admin/auth/guards/authentication.guard.ts",{"_index":334,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/admin/auth/guards/authentication.guard.ts:23",{"_index":340,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/admin/auth/guards/authentication.guard.ts:30",{"_index":341,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/admin/auth/interfaces/active",{"_index":79,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"coverage.html":{}}}],["src/admin/auth/providers/auth.service.ts",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/admin/auth/providers/auth.service.ts:13",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/admin/auth/providers/auth.service.ts:20",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/admin/auth/providers/generate",{"_index":1308,"title":{},"body":{"classes/GenerateTokenProvider.html":{},"coverage.html":{}}}],["src/admin/dtos/create",{"_index":444,"title":{},"body":{"classes/CreateAdminDto.html":{},"coverage.html":{}}}],["src/admin/providers/admin.service",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/admin/providers/admin.service.ts",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/providers/admin.service.ts:14",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:23",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/providers/admin.service.ts:8",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/schemas/admin.schema.ts",{"_index":86,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/admin/schemas/admin.schema.ts:22",{"_index":92,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/schemas/admin.schema.ts:25",{"_index":91,"title":{},"body":{"classes/Admin.html":{}}}],["src/admin/schemas/admin.schema.ts:29",{"_index":94,"title":{},"body":{"classes/Admin.html":{}}}],["src/app.controller.ts",{"_index":238,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":277,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":279,"title":{},"body":{"injectables/AppService.html":{}}}],["src/cache/cache.module.ts",{"_index":371,"title":{},"body":{"modules/CacheModule.html":{}}}],["src/cache/cache.service",{"_index":1226,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["src/cache/cache.service.ts",{"_index":398,"title":{},"body":{"injectables/CacheService.html":{},"coverage.html":{}}}],["src/cache/cache.service.ts:11",{"_index":410,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:20",{"_index":421,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:28",{"_index":407,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:37",{"_index":413,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:47",{"_index":416,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/cache/cache.service.ts:6",{"_index":404,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/exam/constants/cache",{"_index":1953,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/exam/dtos/create",{"_index":483,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"coverage.html":{}}}],["src/exam/dtos/grade",{"_index":1372,"title":{},"body":{"classes/GradeOeExamDto.html":{},"coverage.html":{}}}],["src/exam/dtos/mcq.dto.ts",{"_index":1580,"title":{},"body":{"classes/Mcq.html":{},"coverage.html":{}}}],["src/exam/dtos/mcq.dto.ts:2",{"_index":1583,"title":{},"body":{"classes/Mcq.html":{}}}],["src/exam/dtos/mcq.dto.ts:3",{"_index":1582,"title":{},"body":{"classes/Mcq.html":{}}}],["src/exam/dtos/mcq.dto.ts:4",{"_index":1581,"title":{},"body":{"classes/Mcq.html":{}}}],["src/exam/dtos/update",{"_index":1863,"title":{},"body":{"classes/UpdateExamParamDto.html":{},"coverage.html":{}}}],["src/exam/enums/exam",{"_index":2012,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/exam/exam.controller.ts",{"_index":707,"title":{},"body":{"controllers/ExamController.html":{},"coverage.html":{}}}],["src/exam/exam.controller.ts:124",{"_index":782,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:143",{"_index":744,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:179",{"_index":793,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:198",{"_index":749,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:204",{"_index":767,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:210",{"_index":771,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:216",{"_index":803,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:222",{"_index":763,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:247",{"_index":755,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:84",{"_index":731,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.controller.ts:92",{"_index":765,"title":{},"body":{"controllers/ExamController.html":{}}}],["src/exam/exam.module",{"_index":1808,"title":{},"body":{"modules/StudentModule.html":{}}}],["src/exam/exam.module.ts",{"_index":886,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/exam/interfaces/question",{"_index":1591,"title":{},"body":{"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/exam/providers/create",{"_index":597,"title":{},"body":{"injectables/CreateExamProvider.html":{},"coverage.html":{}}}],["src/exam/providers/exam",{"_index":912,"title":{},"body":{"injectables/ExamReportProvider.html":{},"coverage.html":{}}}],["src/exam/providers/exam.service",{"_index":1824,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/exam/providers/exam.service.ts",{"_index":1093,"title":{},"body":{"injectables/ExamService.html":{},"coverage.html":{}}}],["src/exam/providers/exam.service.ts:105",{"_index":1106,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:126",{"_index":1125,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:175",{"_index":1109,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:188",{"_index":1111,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:198",{"_index":1121,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:207",{"_index":1114,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:217",{"_index":1116,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:227",{"_index":1118,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:237",{"_index":1119,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:26",{"_index":1104,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:47",{"_index":1112,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:61",{"_index":1105,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/exam.service.ts:85",{"_index":1123,"title":{},"body":{"injectables/ExamService.html":{}}}],["src/exam/providers/fetch",{"_index":1180,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/exam/providers/grade",{"_index":1374,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"injectables/StudentService.html":{},"coverage.html":{}}}],["src/exam/providers/update",{"_index":1869,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{}}}],["src/exam/schemas/exam",{"_index":692,"title":{},"body":{"classes/ExamAssignment.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/exam/schemas/exam.schema.ts",{"_index":676,"title":{},"body":{"classes/Exam.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/exam/schemas/exam.schema.ts:20",{"_index":679,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:23",{"_index":678,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:26",{"_index":680,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:29",{"_index":682,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:32",{"_index":685,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:35",{"_index":684,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/exam.schema.ts:40",{"_index":688,"title":{},"body":{"classes/Exam.html":{}}}],["src/exam/schemas/mcq/mcq",{"_index":1584,"title":{},"body":{"classes/McqQuestion.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/exam/schemas/oe",{"_index":1594,"title":{},"body":{"classes/OeExamGrading.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/exam/schemas/oe/oe",{"_index":1604,"title":{},"body":{"classes/OeQuestion.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/filters/global",{"_index":1321,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1972,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/openai/openai.module",{"_index":904,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/openai/openai.module.ts",{"_index":1609,"title":{},"body":{"modules/OpenaiModule.html":{}}}],["src/openai/openai.service",{"_index":1390,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["src/openai/openai.service.ts",{"_index":1611,"title":{},"body":{"injectables/OpenaiService.html":{},"coverage.html":{}}}],["src/openai/openai.service.ts:100",{"_index":1625,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["src/openai/openai.service.ts:19",{"_index":1620,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["src/openai/openai.service.ts:23",{"_index":1621,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["src/openai/openai.service.ts:27",{"_index":1623,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["src/openai/openai.service.ts:9",{"_index":1618,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["src/student/dtos/fetch",{"_index":1303,"title":{},"body":{"classes/FetchQuestionParamsDto.html":{},"coverage.html":{}}}],["src/student/dtos/login",{"_index":1574,"title":{},"body":{"classes/LoginStudentDto.html":{},"coverage.html":{}}}],["src/student/dtos/student",{"_index":1754,"title":{},"body":{"classes/StudentAnswerDto.html":{},"coverage.html":{}}}],["src/student/dtos/submit",{"_index":1850,"title":{},"body":{"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"coverage.html":{}}}],["src/student/providers/insert",{"_index":1530,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"coverage.html":{}}}],["src/student/providers/student.service",{"_index":635,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["src/student/providers/student.service.ts",{"_index":1810,"title":{},"body":{"injectables/StudentService.html":{},"coverage.html":{}}}],["src/student/providers/student.service.ts:16",{"_index":1814,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:33",{"_index":1821,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:47",{"_index":1819,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:53",{"_index":1818,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:59",{"_index":1816,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:67",{"_index":1822,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/providers/student.service.ts:86",{"_index":1823,"title":{},"body":{"injectables/StudentService.html":{}}}],["src/student/schemas/student.schema",{"_index":702,"title":{},"body":{"classes/ExamAssignment.html":{}}}],["src/student/schemas/student.schema.ts",{"_index":1748,"title":{},"body":{"classes/Student.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/student/schemas/student.schema.ts:20",{"_index":1749,"title":{},"body":{"classes/Student.html":{}}}],["src/student/schemas/student.schema.ts:23",{"_index":1750,"title":{},"body":{"classes/Student.html":{}}}],["src/student/student.controller.ts",{"_index":1762,"title":{},"body":{"controllers/StudentController.html":{},"coverage.html":{}}}],["src/student/student.controller.ts:19",{"_index":1774,"title":{},"body":{"controllers/StudentController.html":{}}}],["src/student/student.controller.ts:24",{"_index":1768,"title":{},"body":{"controllers/StudentController.html":{}}}],["src/student/student.controller.ts:29",{"_index":1771,"title":{},"body":{"controllers/StudentController.html":{}}}],["src/student/student.controller.ts:35",{"_index":1778,"title":{},"body":{"controllers/StudentController.html":{}}}],["src/student/student.controller.ts:41",{"_index":1781,"title":{},"body":{"controllers/StudentController.html":{}}}],["src/student/student.module",{"_index":888,"title":{},"body":{"modules/ExamModule.html":{}}}],["src/student/student.module.ts",{"_index":1804,"title":{},"body":{"modules/StudentModule.html":{}}}],["src/utils/generate",{"_index":943,"title":{},"body":{"injectables/ExamReportProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/interfaces/grading",{"_index":1472,"title":{},"body":{"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/OpenaiApiResponse.html":{},"coverage.html":{}}}],["src/utils/interfaces/mcq",{"_index":1477,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/interfaces/oe",{"_index":1496,"title":{},"body":{"interfaces/IOeQuestion.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/interfaces/report.interface",{"_index":939,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["src/utils/interfaces/report.interface.ts",{"_index":1747,"title":{},"body":{"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{},"coverage.html":{}}}],["src/utils/interfaces/student.interface",{"_index":1543,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["src/utils/interfaces/student.interface.ts",{"_index":1519,"title":{},"body":{"interfaces/IStudent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/response",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/template",{"_index":1541,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":1336,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{}}}],["standardized",{"_index":2030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["start",{"_index":495,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"index.html":{}}}],["start:dev",{"_index":2051,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2053,"title":{},"body":{"index.html":{}}}],["started",{"_index":2033,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":2044,"title":{},"body":{"index.html":{}}}],["starttime",{"_index":500,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["state",{"_index":1671,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["statements",{"_index":1940,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":336,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":175,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{}}}],["stay",{"_index":2087,"title":{},"body":{"index.html":{}}}],["store",{"_index":379,"title":{},"body":{"modules/CacheModule.html":{},"injectables/OpenaiService.html":{},"dependencies.html":{}}}],["storing",{"_index":1870,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["strictly",{"_index":1646,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["string",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strongly",{"_index":2023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["structure",{"_index":1334,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"miscellaneous/functions.html":{}}}],["structured",{"_index":1526,"title":{},"body":{"interfaces/IStudent.html":{},"injectables/OpenaiService.html":{},"miscellaneous/variables.html":{}}}],["student",{"_index":489,"title":{"classes/Student.html":{}},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/CreateExamProvider.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"classes/Student.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["student's",{"_index":1522,"title":{},"body":{"interfaces/IStudent.html":{}}}],["student.controller",{"_index":1805,"title":{},"body":{"modules/StudentModule.html":{}}}],["student.dto",{"_index":1783,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["student.dto.ts",{"_index":1575,"title":{},"body":{"classes/LoginStudentDto.html":{},"coverage.html":{}}}],["student.dto.ts:12",{"_index":1578,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["student.dto.ts:8",{"_index":1577,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["student.fullname.split",{"_index":1830,"title":{},"body":{"injectables/StudentService.html":{}}}],["student.matricnumber",{"_index":976,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["student.name",{"_index":1809,"title":{},"body":{"modules/StudentModule.html":{}}}],["student.provider",{"_index":1807,"title":{},"body":{"modules/StudentModule.html":{},"injectables/StudentService.html":{}}}],["student.provider.ts",{"_index":1531,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"coverage.html":{}}}],["student.provider.ts:15",{"_index":1537,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["student.provider.ts:9",{"_index":1534,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["student.score",{"_index":977,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["student.studentname",{"_index":975,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["student/dtos/submit",{"_index":1389,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["student/student.module",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["student['fullname",{"_index":1551,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["student['matric",{"_index":1547,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["student_xyz456",{"_index":542,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["student_xyz456'})@isstring()@isnotempty",{"_index":535,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["studentanswerdto",{"_index":1753,"title":{"classes/StudentAnswerDto.html":{}},"body":{"classes/StudentAnswerDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"coverage.html":{}}}],["studentcontroller",{"_index":1761,"title":{"controllers/StudentController.html":{}},"body":{"controllers/StudentController.html":{},"modules/StudentModule.html":{},"coverage.html":{}}}],["studentdata",{"_index":933,"title":{},"body":{"injectables/ExamReportProvider.html":{},"miscellaneous/functions.html":{}}}],["studentdata.matricnumber.replace(/\\//g",{"_index":1049,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["studentdocument",{"_index":1538,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"classes/Student.html":{},"injectables/StudentService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["studentid",{"_index":1208,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"injectables/GradeOeExamProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"miscellaneous/functions.html":{}}}],["studentmodel",{"_index":1535,"title":{},"body":{"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["studentmodule",{"_index":248,"title":{"modules/StudentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExamModule.html":{},"modules/StudentModule.html":{},"modules.html":{},"overview.html":{}}}],["studentname",{"_index":960,"title":{},"body":{"injectables/ExamReportProvider.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{}}}],["studentresponse",{"_index":1021,"title":{},"body":{"injectables/ExamReportProvider.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{}}}],["studentresponsedata",{"_index":929,"title":{"interfaces/StudentResponseData.html":{}},"body":{"injectables/ExamReportProvider.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["studentresponses",{"_index":1005,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["studentresponses.push(studentdata",{"_index":1028,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["students",{"_index":601,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{}}}],["students.length",{"_index":655,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["students.map((s",{"_index":1557,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["students.map((student",{"_index":661,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["studentschema",{"_index":1751,"title":{},"body":{"classes/Student.html":{},"modules/StudentModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["studentservice",{"_index":605,"title":{"injectables/StudentService.html":{}},"body":{"injectables/CreateExamProvider.html":{},"controllers/StudentController.html":{},"modules/StudentModule.html":{},"injectables/StudentService.html":{},"coverage.html":{},"overview.html":{}}}],["style",{"_index":980,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["sub",{"_index":84,"title":{},"body":{"interfaces/ActiveAdminData.html":{},"classes/GenerateTokenProvider.html":{}}}],["subject",{"_index":2140,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2134,"title":{},"body":{"license.html":{}}}],["submitmcqexam",{"_index":1764,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["submitmcqexam(@body",{"_index":1796,"title":{},"body":{"controllers/StudentController.html":{}}}],["submitmcqexam(submitmcqexamdto",{"_index":1775,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["submitmcqexamdto",{"_index":1776,"title":{"classes/SubmitMcqExamDto.html":{}},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"coverage.html":{}}}],["submitmcqexamdto.responses.map(async",{"_index":1840,"title":{},"body":{"injectables/StudentService.html":{}}}],["submitmcqexamdto.studentid",{"_index":1846,"title":{},"body":{"injectables/StudentService.html":{}}}],["submitoeexam",{"_index":1765,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["submitoeexam(@body",{"_index":1799,"title":{},"body":{"controllers/StudentController.html":{}}}],["submitoeexam(submitoeexamdto",{"_index":1779,"title":{},"body":{"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["submitoeexamdto",{"_index":1385,"title":{"classes/SubmitOeExamDto.html":{}},"body":{"injectables/GradeOeExamProvider.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{},"classes/SubmitOeExamDto.html":{},"coverage.html":{}}}],["submitresponses",{"_index":1377,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["submitresponses(submitoeexamdto",{"_index":1384,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["submitted",{"_index":1847,"title":{},"body":{"injectables/StudentService.html":{}}}],["substantial",{"_index":2147,"title":{},"body":{"license.html":{}}}],["success",{"_index":628,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"classes/GlobalHttpExceptionFilter.html":{},"interfaces/IResponse.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["successful",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"interfaces/IResponse.html":{},"injectables/StudentService.html":{},"miscellaneous/functions.html":{}}}],["successful'})@apibadrequestresponse({description",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":141,"title":{},"body":{"controllers/AdminController.html":{},"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["successfully'})@apiresponse({status",{"_index":728,"title":{},"body":{"controllers/ExamController.html":{}}}],["successresponse",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["successresponse(__namedparameters",{"_index":2028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["such",{"_index":494,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["sum",{"_index":1678,"title":{},"body":{"injectables/OpenaiService.html":{},"injectables/StudentService.html":{}}}],["summary",{"_index":173,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["support",{"_index":2069,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supports",{"_index":549,"title":{},"body":{"classes/CreateExamDto.html":{},"controllers/ExamController.html":{}}}],["svg",{"_index":2170,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2002,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":1297,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["t",{"_index":411,"title":{},"body":{"injectables/CacheService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":1979,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1978,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1521,"title":{},"body":{"interfaces/IStudent.html":{}}}],["task",{"_index":1640,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["template",{"_index":777,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["template.mimetype",{"_index":1149,"title":{},"body":{"injectables/ExamService.html":{}}}],["template.ts",{"_index":1974,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["templates",{"_index":785,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["test",{"_index":2056,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":2059,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2058,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2054,"title":{},"body":{"index.html":{}}}],["text",{"_index":1020,"title":{},"body":{"injectables/ExamReportProvider.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{}}}],["thanks",{"_index":2097,"title":{},"body":{"index.html":{}}}],["there’s",{"_index":1508,"title":{},"body":{"interfaces/IResponse.html":{}}}],["this.accesstokenguard",{"_index":348,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.adminmodel(createadmindto",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.adminmodel.findone",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.adminservice.createadmin(createadmindto",{"_index":177,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.finduserbyemail(logindto.email",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.login(logindto",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguidemap[type]).flat",{"_index":357,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.buildgradingprompt(request",{"_index":1699,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["this.cachemanager.del(key",{"_index":429,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cachemanager.get(key",{"_index":426,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cachemanager.set(key",{"_index":427,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.cachemcqquestions(fullquestions",{"_index":1277,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.cacheservice.get(cachekey",{"_index":1252,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.cacheservice.mset(cacheitems",{"_index":1290,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.cacheservice.set(cachekey",{"_index":1280,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.client",{"_index":1631,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["this.client.files.create",{"_index":1731,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["this.client.files.delete(uploadedfileid).catch",{"_index":1746,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["this.client.responses.create",{"_index":1694,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["this.client.vectorstores.create",{"_index":1736,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["this.client.vectorstores.files.create",{"_index":1742,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["this.connection.startsession",{"_index":652,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["this.createexamprovider.createexam(createexamdto",{"_index":1137,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.examassignmentmodel",{"_index":947,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["this.examassignmentmodel.bulkwrite(assignmentops",{"_index":1470,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["this.examassignmentmodel.bulkwrite(operations",{"_index":669,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["this.examassignmentmodel.findone",{"_index":1237,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["this.examassignmentmodel.updateone",{"_index":1242,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.exammodel.create(createexamdto",{"_index":658,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["this.exammodel.find",{"_index":1131,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.exammodel.findbyid(examid",{"_index":1155,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.exammodel.findbyidanddelete(examid",{"_index":1144,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.examreportprovider.generateexamreport(exam",{"_index":1158,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.examreportprovider.generateexcelreport(exam",{"_index":1159,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.examreportprovider.generatestudentresponseszip(exam",{"_index":1162,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.examschema.findbyid(examid",{"_index":1890,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["this.examservice.createexam(createexamdto",{"_index":828,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.deletemcqexam(examid",{"_index":836,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.deleteoeexam(examid",{"_index":842,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.fetchexam(fetchquestionparamsdto.examid",{"_index":1837,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.examservice.fetchexam(submitoeexamdto.examid",{"_index":1848,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.examservice.fetchexams",{"_index":829,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.generateexamreport(examid",{"_index":850,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.generateexcelreport(examid",{"_index":853,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.generatestudentresponseszip(examid",{"_index":874,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.getoeexamsreadyforgrading",{"_index":844,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.gradeoeexam(gradeoeexamdto.examid",{"_index":847,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.updatemcqexam(updateexamparamdto.examid",{"_index":833,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.examservice.updateoeexam(updateparamdto.examid",{"_index":839,"title":{},"body":{"controllers/ExamController.html":{}}}],["this.extractrequestfromheader(request",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.fetchexam(examid",{"_index":1140,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.fetchexamassignmentsprovider.generateandcachequestions(fetchquestionparamsdto.studentid",{"_index":1838,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.fetchexamassignmentsprovider.getassignmentsforstudent(studentid",{"_index":1835,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.fetchexamassignmentsprovider.getcachedmcqquestion(response.questionid",{"_index":1841,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.fetchexamassignmentsprovider.updatestudentmcqscore(submitmcqexamdto.examid",{"_index":1845,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.generateexamreport(exam",{"_index":965,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["this.generatestudentpdf(studentdata",{"_index":1048,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["this.generatetokenprovider.signtoken(user._id.tohexstring",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.get(key",{"_index":434,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.getgradinginstructions",{"_index":1698,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["this.getquestionmodel(exam.examtype",{"_index":1262,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.getstudentresponses(examid",{"_index":1031,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["this.gradeoeexamprovider.gradeoeresponses(examid",{"_index":1157,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.gradeoeexamprovider.submitresponses(submitoeexamdto",{"_index":1849,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.insertstudentprovider.insertstudents(tutoriallist",{"_index":1834,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.ismodified('password",{"_index":121,"title":{},"body":{"classes/Admin.html":{}}}],["this.jwtconfiguration",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":1319,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":1317,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":1315,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.mcqmodel",{"_index":1299,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.mcqquestionmodel.bulkwrite(operations",{"_index":1896,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["this.mcqquestionmodel.deletemany",{"_index":1142,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.oeexamgradingmodel",{"_index":998,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["this.oeexamgradingmodel.aggregate",{"_index":1407,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["this.oeexamgradingmodel.bulkwrite(ops",{"_index":1456,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["this.oeexamgradingmodel.create",{"_index":1394,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["this.oeexamgradingmodel.find",{"_index":1164,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.oemodel",{"_index":1300,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.oequestionmodel.bulkwrite(operations",{"_index":1925,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["this.oequestionmodel.deletemany",{"_index":1154,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.oequestionmodel.findbyid(questionid).select('question').lean",{"_index":1432,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["this.openaiservice.graderequests(preparedresponses",{"_index":1445,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["this.openaiservice.uploadmarkingguide(markingguide",{"_index":1934,"title":{},"body":{"injectables/UpdateOeExamProvider.html":{}}}],["this.password",{"_index":124,"title":{},"body":{"classes/Admin.html":{}}}],["this.preparelistforbulkwrite(mcqlist",{"_index":1895,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["this.prepareresponsesforgrading(examid",{"_index":1442,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":351,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.set(item.key",{"_index":440,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.shuffleandselect(questions",{"_index":1261,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["this.studentmodel",{"_index":1560,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["this.studentmodel.bulkwrite(operations",{"_index":1553,"title":{},"body":{"injectables/InsertStudentProvider.html":{}}}],["this.studentmodel.findone",{"_index":1826,"title":{},"body":{"injectables/StudentService.html":{}}}],["this.studentservice.fetchquestionsforstudent(fetchquestionparamsdto",{"_index":1794,"title":{},"body":{"controllers/StudentController.html":{}}}],["this.studentservice.fetchstudentassignments(studentid",{"_index":1792,"title":{},"body":{"controllers/StudentController.html":{}}}],["this.studentservice.insertstudents(tutoriallist",{"_index":654,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["this.studentservice.loginstudent(loginstudentdto",{"_index":1790,"title":{},"body":{"controllers/StudentController.html":{}}}],["this.studentservice.submitmcqexam(submitmcqexamdto",{"_index":1797,"title":{},"body":{"controllers/StudentController.html":{}}}],["this.studentservice.submitoeexam(submitoeexamdto",{"_index":1800,"title":{},"body":{"controllers/StudentController.html":{}}}],["this.updatemcqexamprovider.updatemcqexam(examid",{"_index":1139,"title":{},"body":{"injectables/ExamService.html":{}}}],["this.updateoeexamprovider.updateoeexam(examid",{"_index":1153,"title":{},"body":{"injectables/ExamService.html":{}}}],["through",{"_index":360,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/IMcqQuestion.html":{},"miscellaneous/functions.html":{}}}],["throw",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["thrown",{"_index":1329,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["throws",{"_index":646,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["time",{"_index":502,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"index.html":{}}}],["time'})@isoptional()@isdate()@type(undefined",{"_index":510,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["times",{"_index":497,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["timestamps",{"_index":107,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["title",{"_index":969,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["tojson",{"_index":108,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["token",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AdminController.html":{}}}],["token'})@apiresponse({status",{"_index":147,"title":{},"body":{"controllers/AdminController.html":{}}}],["token.guard",{"_index":207,"title":{},"body":{"modules/AdminModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:15",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:29",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:53",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":202,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AuthService.html":{}}}],["token.provider.ts",{"_index":1309,"title":{},"body":{"classes/GenerateTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:14",{"_index":1313,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["token.provider.ts:6",{"_index":1311,"title":{},"body":{"classes/GenerateTokenProvider.html":{}}}],["tools",{"_index":1700,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["top",{"_index":1085,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["tort",{"_index":2166,"title":{},"body":{"license.html":{}}}],["total",{"_index":589,"title":{},"body":{"classes/CreateExamDto.html":{}}}],["totalscore",{"_index":1017,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/QuestionResponse.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{}}}],["touch",{"_index":2105,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":622,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["transactional",{"_index":1887,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["transfer",{"_index":486,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{}}}],["transform",{"_index":110,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"classes/LoginStudentDto.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["transformer",{"_index":105,"title":{},"body":{"classes/Admin.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/LoginStudentDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"dependencies.html":{}}}],["trim",{"_index":1050,"title":{},"body":{"injectables/ExamReportProvider.html":{},"injectables/OpenaiService.html":{}}}],["true",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"injectables/InsertStudentProvider.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{}}}],["true})@exclude",{"_index":93,"title":{},"body":{"classes/Admin.html":{}}}],["true})@type(undefined",{"_index":1853,"title":{},"body":{"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{}}}],["try",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/Admin.html":{},"injectables/CacheService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/InsertStudentProvider.html":{},"injectables/OpenaiService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["ttl",{"_index":395,"title":{},"body":{"modules/CacheModule.html":{},"injectables/CacheService.html":{},"injectables/FetchExamAssignmentsProvider.html":{}}}],["tutorial",{"_index":617,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/InsertStudentProvider.html":{}}}],["tutoriallist",{"_index":610,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/InsertStudentProvider.html":{},"injectables/StudentService.html":{}}}],["tutoriallist.mimetype",{"_index":1134,"title":{},"body":{"injectables/ExamService.html":{}}}],["twitter",{"_index":2111,"title":{},"body":{"index.html":{}}}],["two",{"_index":787,"title":{},"body":{"controllers/ExamController.html":{}}}],["type",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveAdminData.html":{},"classes/Admin.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CacheService.html":{},"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"injectables/CreateExamProvider.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"classes/GradeOeExamDto.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IResponse.html":{},"interfaces/IStudent.html":{},"injectables/InsertStudentProvider.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/Mcq.html":{},"classes/McqQuestion.html":{},"interfaces/McqQuestionCache.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"interfaces/OeQuestionCache.html":{},"interfaces/OpenaiApiResponse.html":{},"injectables/OpenaiService.html":{},"interfaces/QuestionResponse.html":{},"classes/Student.html":{},"classes/StudentAnswerDto.html":{},"controllers/StudentController.html":{},"interfaces/StudentResponseData.html":{},"injectables/StudentService.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Exam.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"controllers/StudentController.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["type.enum.ts",{"_index":2009,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type.interface.ts",{"_index":1592,"title":{},"body":{"interfaces/McqQuestionCache.html":{},"interfaces/OeQuestionCache.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":2179,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":2024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typeof",{"_index":1366,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/OpenaiService.html":{}}}],["types",{"_index":100,"title":{},"body":{"classes/Admin.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{}}}],["types.objectid(assignmentid",{"_index":1466,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["types.objectid(examid",{"_index":1401,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["types.objectid(r.oeexamgradingid",{"_index":1448,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["types.objectid(r.responseid",{"_index":1450,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["types.objectid(studentid",{"_index":1244,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["typescript",{"_index":2043,"title":{},"body":{"index.html":{}}}],["ui",{"_index":2003,"title":{},"body":{"dependencies.html":{}}}],["uint8array",{"_index":1725,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["uint8array(markingguide.buffer",{"_index":1726,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["unauthorized",{"_index":143,"title":{},"body":{"controllers/AdminController.html":{},"controllers/ExamController.html":{}}}],["unauthorizedexception",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/StudentService.html":{}}}],["unauthorizedexception('incorrect",{"_index":1833,"title":{},"body":{"injectables/StudentService.html":{}}}],["unauthorizedexception('invalid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["uncaught",{"_index":1326,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["undefined",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/CacheModule.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"injectables/GradeOeExamProvider.html":{},"interfaces/IResponse.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"injectables/OpenaiService.html":{}}}],["undefined})@apiresponse({status",{"_index":726,"title":{},"body":{"controllers/ExamController.html":{}}}],["undefined})@isenum(examtype",{"_index":525,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{}}}],["ungraded",{"_index":1178,"title":{},"body":{"injectables/ExamService.html":{}}}],["unhandled",{"_index":1340,"title":{},"body":{"classes/GlobalHttpExceptionFilter.html":{}}}],["unique",{"_index":90,"title":{},"body":{"classes/Admin.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/Student.html":{},"classes/UpdateExamParamDto.html":{}}}],["uniquely",{"_index":1524,"title":{},"body":{"interfaces/IStudent.html":{}}}],["uniquequestionids",{"_index":1427,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["uniquequestionids.map(questionid",{"_index":1431,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["unit",{"_index":2055,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":154,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{},"classes/GlobalHttpExceptionFilter.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/OpenaiService.html":{},"controllers/StudentController.html":{},"injectables/StudentService.html":{}}}],["unlicensed",{"_index":2178,"title":{},"body":{"properties.html":{}}}],["unwind",{"_index":1409,"title":{},"body":{"injectables/GradeOeExamProvider.html":{}}}],["update",{"_index":665,"title":{},"body":{"injectables/CreateExamProvider.html":{},"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["updated",{"_index":781,"title":{},"body":{"controllers/ExamController.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["updateexamparamdto",{"_index":773,"title":{"classes/UpdateExamParamDto.html":{}},"body":{"controllers/ExamController.html":{},"classes/UpdateExamParamDto.html":{},"coverage.html":{}}}],["updatemcqexam",{"_index":720,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["updatemcqexam(examid",{"_index":1122,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{}}}],["updatemcqexam(updateexamparamdto",{"_index":772,"title":{},"body":{"controllers/ExamController.html":{}}}],["updatemcqexamprovider",{"_index":884,"title":{"injectables/UpdateMcqExamProvider.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updateoeexam",{"_index":721,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["updateoeexam(examid",{"_index":1124,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["updateoeexam(updateparamdto",{"_index":784,"title":{},"body":{"controllers/ExamController.html":{}}}],["updateoeexamprovider",{"_index":885,"title":{"injectables/UpdateOeExamProvider.html":{}},"body":{"modules/ExamModule.html":{},"injectables/ExamService.html":{},"injectables/UpdateOeExamProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updateone",{"_index":662,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["updateparamdto",{"_index":797,"title":{},"body":{"controllers/ExamController.html":{}}}],["updates",{"_index":1097,"title":{},"body":{"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"index.html":{}}}],["updatestudentmcqscore",{"_index":1190,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["updatestudentmcqscore(examid",{"_index":1223,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["updating",{"_index":710,"title":{},"body":{"controllers/ExamController.html":{},"classes/UpdateExamParamDto.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["upload",{"_index":735,"title":{},"body":{"controllers/ExamController.html":{}}}],["upload'})@apiconsumes('multipart/form",{"_index":724,"title":{},"body":{"controllers/ExamController.html":{}}}],["uploaded",{"_index":616,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/ExamService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{},"miscellaneous/functions.html":{}}}],["uploadedfile",{"_index":804,"title":{},"body":{"controllers/ExamController.html":{},"injectables/OpenaiService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["uploadedfile.id",{"_index":1734,"title":{},"body":{"injectables/OpenaiService.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["uploadedfileid",{"_index":1724,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["uploadedfiles",{"_index":805,"title":{},"body":{"controllers/ExamController.html":{}}}],["uploading",{"_index":776,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamService.html":{}}}],["uploadmarkingguide",{"_index":1616,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["uploadmarkingguide(markingguide",{"_index":1624,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["upsert",{"_index":668,"title":{},"body":{"injectables/CreateExamProvider.html":{},"injectables/InsertStudentProvider.html":{}}}],["uri",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":384,"title":{},"body":{"modules/CacheModule.html":{},"classes/UpdateExamParamDto.html":{}}}],["url(redisurl",{"_index":385,"title":{},"body":{"modules/CacheModule.html":{}}}],["url.hostname",{"_index":387,"title":{},"body":{"modules/CacheModule.html":{}}}],["url.password",{"_index":392,"title":{},"body":{"modules/CacheModule.html":{}}}],["url.username",{"_index":394,"title":{},"body":{"modules/CacheModule.html":{}}}],["usage",{"_index":1063,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["use",{"_index":1655,"title":{},"body":{"injectables/OpenaiService.html":{},"license.html":{}}}],["useclass",{"_index":218,"title":{},"body":{"modules/AdminModule.html":{}}}],["used",{"_index":1489,"title":{},"body":{"interfaces/IMcqQuestion.html":{},"interfaces/IResponse.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"modules/CacheModule.html":{}}}],["useful",{"_index":1499,"title":{},"body":{"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["useinterceptors",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ExamController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(fileinterceptor('mcqlist",{"_index":831,"title":{},"body":{"controllers/ExamController.html":{}}}],["useinterceptors(fileinterceptor('tutoriallist",{"_index":821,"title":{},"body":{"controllers/ExamController.html":{}}}],["useinterceptors(filesinterceptor('templates",{"_index":838,"title":{},"body":{"controllers/ExamController.html":{}}}],["user",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"interfaces/IResponse.html":{},"classes/LoginDto.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.[field",{"_index":2195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user@example.com",{"_index":1572,"title":{},"body":{"classes/LoginDto.html":{}}}],["user@example.com'})@isemail()@isnotempty()@isstring",{"_index":1566,"title":{},"body":{"classes/LoginDto.html":{}}}],["user_data",{"_index":1733,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["username",{"_index":393,"title":{},"body":{"modules/CacheModule.html":{}}}],["userresponse",{"_index":1397,"title":{},"body":{"injectables/GradeOeExamProvider.html":{},"interfaces/GradingRequest.html":{},"interfaces/GradingResult.html":{},"classes/OeExamGrading.html":{},"interfaces/OpenaiApiResponse.html":{}}}],["uses",{"_index":621,"title":{},"body":{"injectables/CreateExamProvider.html":{}}}],["using",{"_index":1886,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"index.html":{}}}],["utility",{"_index":2029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["valid",{"_index":1133,"title":{},"body":{"injectables/ExamService.html":{},"interfaces/IMcqQuestion.html":{},"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"injectables/OpenaiService.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":1253,"title":{},"body":{"injectables/FetchExamAssignmentsProvider.html":{}}}],["validatenested",{"_index":1857,"title":{},"body":{"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{}}}],["validates",{"_index":1882,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["validating",{"_index":1500,"title":{},"body":{"interfaces/IOeQuestion.html":{},"interfaces/IStudent.html":{},"miscellaneous/variables.html":{}}}],["validation",{"_index":151,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AuthController.html":{},"classes/CreateExamDto.html":{},"interfaces/IMcqQuestion.html":{},"miscellaneous/variables.html":{}}}],["validationschema",{"_index":271,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":475,"title":{},"body":{"classes/CreateAdminDto.html":{},"classes/CreateExamAssignmentDto.html":{},"classes/CreateExamDto.html":{},"classes/FetchQuestionParamsDto.html":{},"classes/GradeOeExamDto.html":{},"classes/LoginDto.html":{},"classes/LoginStudentDto.html":{},"classes/StudentAnswerDto.html":{},"classes/SubmitMcqExamDto.html":{},"classes/SubmitOeExamDto.html":{},"classes/UpdateExamParamDto.html":{},"dependencies.html":{}}}],["value",{"_index":419,"title":{},"body":{"injectables/CacheService.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/LoginStudentDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value?.touppercase",{"_index":1579,"title":{},"body":{"classes/LoginStudentDto.html":{}}}],["values",{"_index":528,"title":{},"body":{"classes/CreateExamAssignmentDto.html":{}}}],["variable",{"_index":1943,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2187,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vector",{"_index":1641,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["vector_store_ids",{"_index":1702,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["vectorstore",{"_index":1735,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["vectorstore.id",{"_index":1743,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["verifies",{"_index":1880,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["version",{"_index":2176,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2077,"title":{},"body":{"index.html":{}}}],["viewreport",{"_index":722,"title":{},"body":{"controllers/ExamController.html":{}}}],["viewreport(@param('examid",{"_index":849,"title":{},"body":{"controllers/ExamController.html":{}}}],["viewreport(examid",{"_index":801,"title":{},"body":{"controllers/ExamController.html":{}}}],["virtuals",{"_index":109,"title":{},"body":{"classes/Admin.html":{},"classes/Exam.html":{},"classes/ExamAssignment.html":{},"injectables/GradeOeExamProvider.html":{},"classes/McqQuestion.html":{},"classes/OeExamGrading.html":{},"classes/OeQuestion.html":{},"classes/Student.html":{}}}],["visit",{"_index":2066,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2079,"title":{},"body":{"index.html":{}}}],["waituntil",{"_index":1079,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["warranties",{"_index":2153,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2149,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2050,"title":{},"body":{"index.html":{}}}],["website",{"_index":2109,"title":{},"body":{"index.html":{}}}],["well",{"_index":1673,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["whether",{"_index":1516,"title":{},"body":{"interfaces/IResponse.html":{},"license.html":{}}}],["width",{"_index":983,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["without",{"_index":2126,"title":{},"body":{"license.html":{}}}],["workbook",{"_index":966,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["working",{"_index":2064,"title":{},"body":{"index.html":{}}}],["worksheet",{"_index":978,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["worksheet['!cols",{"_index":982,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["world",{"_index":281,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":1877,"title":{},"body":{"injectables/UpdateMcqExamProvider.html":{}}}],["writer",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateExamProvider.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"injectables/GradeOeExamProvider.html":{},"injectables/StudentService.html":{},"injectables/UpdateMcqExamProvider.html":{},"injectables/UpdateOeExamProvider.html":{}}}],["writer.ts",{"_index":1504,"title":{},"body":{"interfaces/IResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["written",{"_index":1498,"title":{},"body":{"interfaces/IOeQuestion.html":{}}}],["wrote",{"_index":1656,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["x",{"_index":1657,"title":{},"body":{"injectables/OpenaiService.html":{},"index.html":{}}}],["xlsx",{"_index":733,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{},"dependencies.html":{}}}],["xlsx.utils.aoa_to_sheet(exceldata",{"_index":979,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["xlsx.utils.book_append_sheet(workbook",{"_index":986,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["xlsx.utils.book_new",{"_index":967,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["xlsx.write(workbook",{"_index":987,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["xyz",{"_index":1682,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["y",{"_index":1659,"title":{},"body":{"injectables/OpenaiService.html":{}}}],["yes",{"_index":422,"title":{},"body":{"injectables/CacheService.html":{},"controllers/ExamController.html":{},"injectables/FetchExamAssignmentsProvider.html":{},"classes/GenerateTokenProvider.html":{}}}],["you'd",{"_index":2101,"title":{},"body":{"index.html":{}}}],["z0",{"_index":856,"title":{},"body":{"controllers/ExamController.html":{}}}],["z\\d@$!%*#?&.]{8",{"_index":1570,"title":{},"body":{"classes/LoginDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":468,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&.])[a",{"_index":1569,"title":{},"body":{"classes/LoginDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":467,"title":{},"body":{"classes/CreateAdminDto.html":{}}}],["za",{"_index":466,"title":{},"body":{"classes/CreateAdminDto.html":{},"controllers/ExamController.html":{},"classes/LoginDto.html":{}}}],["zip",{"_index":758,"title":{},"body":{"controllers/ExamController.html":{},"injectables/ExamReportProvider.html":{},"injectables/ExamService.html":{}}}],["zippromise",{"_index":1038,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["zlib",{"_index":1034,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}],["zoom",{"_index":190,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CacheModule.html":{},"modules/ExamModule.html":{},"modules/OpenaiModule.html":{},"modules/StudentModule.html":{},"overview.html":{}}}],["zygote",{"_index":1069,"title":{},"body":{"injectables/ExamReportProvider.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/admin/auth/guards/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/admin/auth/guards/access-token.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/guards/access-token.guard.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/guards/access-token.guard.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    // Extract the token from the header\n    const token = this.extractRequestFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    \n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration,\n      );\n      request[REQUEST_USER_KEY] = payload;\n      \n    } catch (error) {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveAdminData.html":{"url":"interfaces/ActiveAdminData.html","title":"interface - ActiveAdminData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveAdminData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/interfaces/active-admin-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveAdminData {\n    sub: string;\n    name: string;\n    email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/schemas/admin.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/schemas/admin.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/schemas/admin.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/schemas/admin.schema.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport * as bcrypt from 'bcrypt';\nimport { InternalServerErrorException } from '@nestjs/common';\nimport { Exclude } from 'class-transformer';\n\nexport type AdminDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class Admin {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop({ required: true })\n  @Exclude()\n  password: string;\n}\n\nexport const AdminSchema = SchemaFactory.createForClass(Admin);\n\nAdminSchema.pre('save', async function () {\n  if (!this.isModified('password')) {\n    return;\n  }\n\n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n  } catch (error) {\n    throw new InternalServerErrorException('Error hashing password');\n  }\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAdmin(createAdminDto: CreateAdminDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@ApiOperation({summary: 'Create a new admin account'})@ApiCreatedResponse({description: 'Admin account successfully created'})@ApiUnauthorizedResponse({description: 'Unauthorized - Missing or invalid Bearer token'})@ApiResponse({status: 400, description: 'Bad Request - Validation failed'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/admin.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAdminDto\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Param, Patch, Post } from '@nestjs/common';\nimport { AdminService } from './providers/admin.service';\nimport { CreateAdminDto } from './dtos/create-admin.dto';\nimport {\n  ApiTags,\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiCreatedResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\n\n@ApiTags('admin')\n@Controller('admin')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Create a new admin account' })\n  @ApiCreatedResponse({\n    description: 'Admin account successfully created'\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Unauthorized - Missing or invalid Bearer token',\n  })\n  @ApiResponse({ status: 400, description: 'Bad Request - Validation failed' })\n  public async createAdmin(@Body() createAdminDto: CreateAdminDto) {\n    return this.adminService.createAdmin(createAdminDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nAdminService\n\nAdminService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAdminModule -->\n\nAuthService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminController } from './admin.controller';\nimport { AuthController } from './auth/auth.controller';\nimport { AuthService } from './auth/providers/auth.service';\nimport { AdminService } from './providers/admin.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Admin, AdminSchema } from './schemas/admin.schema';\nimport { GenerateTokenProvider } from './auth/providers/generate-token.provider';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from './auth/config/jwt.config';\nimport { ConfigModule } from '@nestjs/config';\nimport { AccessTokenGuard } from './auth/guards/access-token.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthenticationGuard } from './auth/guards/authentication.guard';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Admin.name,\n        schema: AdminSchema,\n      },\n    ]),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AdminController, AuthController],\n  providers: [\n    AuthService,\n    AdminService,\n    GenerateTokenProvider,\n    AccessTokenGuard,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n  ],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/providers/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAdmin\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(adminModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/admin/providers/admin.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAdmin(createAdminDto: CreateAdminDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAdminDto\n                                            \n                                                            CreateAdminDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/providers/admin.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Admin, AdminDocument } from '../schemas/admin.schema';\nimport { Model } from 'mongoose';\nimport { CreateAdminDto } from '../dtos/create-admin.dto';\n\n@Injectable()\nexport class AdminService {\n  constructor(\n    @InjectModel(Admin.name)\n    private readonly adminModel: Model,\n  ) {}\n\n  public async findUserByEmail(email: string): Promise {\n    let user = await this.adminModel.findOne({ email });\n    if (!user) {\n      return null;\n    }\n\n    return user;\n  }\n\n  public async createAdmin(createAdminDto: CreateAdminDto): Promise {\n    const newAdmin = new this.adminModel(createAdminDto);\n    return await newAdmin.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nCacheModule\n\nCacheModule\n\nAppModule -->\n\nCacheModule->AppModule\n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nOpenaiModule\n\nOpenaiModule\n\nAppModule -->\n\nOpenaiModule->AppModule\n\n\n\n\n\nStudentModule\n\nStudentModule\n\nAppModule -->\n\nStudentModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            CacheModule\n                        \n                        \n                            ExamModule\n                        \n                        \n                            OpenaiModule\n                        \n                        \n                            StudentModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AdminModule } from './admin/admin.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ExamModule } from './exam/exam.module';\nimport { StudentModule } from './student/student.module';\nimport { CacheModule } from './cache/cache.module';\nimport { OpenaiModule } from './openai/openai.module';\nimport environmentValidation from './config/environment.validation';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport cacheConfig from './config/cache.config';\n\n@Module({\n  imports: [\n    AdminModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !process.env.NODE_ENV ? '.env' : `.env.${process.env.NODE_ENV}`,\n      validationSchema: environmentValidation,\n      load: [appConfig, databaseConfig, cacheConfig],\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        uri: configService.get('database.uri'),\n      }),\n    }),\n    ExamModule,\n    StudentModule,\n    CacheModule,\n    OpenaiModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post()@Auth(AuthType.None)@UseInterceptors(ClassSerializerInterceptor)@ApiOperation({summary: 'Admin login'})@ApiResponse({description: 'Login successful'})@ApiBadRequestResponse({description: 'Invalid credentials or validation failed'})\n                \n            \n\n                    \n                        \n                            Defined in src/admin/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseInterceptors,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiCreatedResponse,\n  ApiBadRequestResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './providers/auth.service';\nimport { LoginDto } from './dtos/login.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\n\n@ApiTags('admin')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @HttpCode(HttpStatus.OK)\n  @Post()\n  @Auth(AuthType.None)\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiOperation({ summary: 'Admin login' })\n  @ApiResponse({\n    description: 'Login successful'\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid credentials or validation failed',\n  })\n  public async login(@Body() loginDto: LoginDto) {\n    return await this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(adminService: AdminService, generateTokenProvider: GenerateTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/admin/auth/providers/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        adminService\n                                                  \n                                                        \n                                                                        AdminService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { successResponse } from 'src/utils/response-writer';\nimport * as bcrypt from 'bcrypt';\nimport { AdminService } from 'src/admin/providers/admin.service';\nimport { GenerateTokenProvider } from './generate-token.provider';\nimport { LoginDto } from '../dtos/login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly adminService: AdminService,\n\n    private readonly generateTokenProvider: GenerateTokenProvider,\n  ) {}\n\n  public async login(loginDto: LoginDto): Promise {\n    let user = await this.adminService.findUserByEmail(loginDto.email);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    let isPasswordValid = await bcrypt.compare(\n      loginDto.password,\n      user.password,\n    );\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const accessToken = await this.generateTokenProvider.signToken(user._id.toHexString(), {\n      email: user.email,\n      name: user.name,\n    });\n\n    return successResponse({\n      message: 'Login successful',\n      data: { accessToken },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/admin/auth/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuideMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/admin/auth/guards/authentication.guard.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/guards/authentication.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { AuthType } from '../enums/auth-type.enum';\nimport { AccessTokenGuard } from './access-token.guard';\nimport { Reflector } from '@nestjs/core';\nimport { AUTH_TYPE_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuideMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    // get authTypes from reflector\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    // create array of all the guards\n    const guards = authTypes.map((type) => this.authTypeGuideMap[type]).flat();\n\n    // Default error\n    const error = new UnauthorizedException();\n\n    // loop through guards, fire canActivate\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context),\n      ).catch((err) => {\n        err;\n      });\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CacheModule.html":{"url":"modules/CacheModule.html","title":"module - CacheModule","body":"\n                   \n\n\n\n\n    Modules\n    CacheModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CacheModule\n\n\n\ncluster_CacheModule_providers\n\n\n\ncluster_CacheModule_exports\n\n\n\n\nCacheService \n\nCacheService \n\n\n\nCacheModule\n\nCacheModule\n\nCacheService  -->\n\nCacheModule->CacheService \n\n\n\n\n\nCacheService\n\nCacheService\n\nCacheModule -->\n\nCacheService->CacheModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cache/cache.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CacheService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CacheService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\nimport { CacheModule as NestCacheModule } from '@nestjs/cache-manager';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { CacheService } from './cache.service';\n\n@Global()\n@Module({\n  imports: [\n    NestCacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        const redisUrl = configService.get('cacheConfig.redisUrl');\n        if (redisUrl) {\n          const url = new URL(redisUrl);\n\n          return {\n            store: redisStore,\n            host: url.hostname || 'localhost',\n            port: parseInt(url.port) || 6379,\n            password: url.password || undefined,\n            username: url.username || undefined,\n            ttl: configService.get('CACHE_TTL', 3600),\n          };\n        }\n\n        return {\n          ttl: configService.get('CACHE_TTL', 3600)\n        }\n      },\n    }),\n  ],\n  providers: [CacheService],\n  exports: [NestCacheModule, CacheService],\n})\nexport class CacheModule { }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheService.html":{"url":"injectables/CacheService.html","title":"injectable - CacheService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cache/cache.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                del\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                mget\n                            \n                            \n                                    Async\n                                mset\n                            \n                            \n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/cache/cache.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:11\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        mget\n                        \n                    \n                \n            \n            \n                \n                        \n                    mget(keys: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:37\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                keys\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        mset\n                        \n                    \n                \n            \n            \n                \n                        \n                    mset(items: Array)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:47\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(key: string, value: T, ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cache/cache.service.ts:20\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport class CacheService {\n  constructor(\n    @Inject(CACHE_MANAGER) private readonly cacheManager: Cache,\n  ) {}\n\n  async get(key: string): Promise {\n    try {\n      const cached = await this.cacheManager.get(key);\n      return cached;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async set(key: string, value: T, ttl?: number): Promise {\n    try {\n      await this.cacheManager.set(key, value, ttl);\n    } catch (error) {\n      console.error(`Cache set error for key ${key}:`, error);\n    }\n  }\n\n  async del(key: string): Promise {\n    try {\n      await this.cacheManager.del(key);\n    } catch (error) {\n      console.error(`Cache delete error for key ${key}:`, error);\n    }\n  }\n\n  // Get multiple keys at once\n  async mget(keys: string[]): Promise {\n    try {\n      const promises = keys.map(key => this.get(key));\n      return await Promise.all(promises);\n    } catch (error) {\n      return keys.map(() => null);\n    }\n  }\n\n  // Set multiple key-value pairs\n  async mset(items: Array): Promise {\n    try {\n      await Promise.all(\n        items.map(item => this.set(item.key, item.value, item.ttl))\n      );\n    } catch (error) {\n      console.error('Cache mset error:', error);\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAdminDto.html":{"url":"classes/CreateAdminDto.html","title":"class - CreateAdminDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAdminDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/dtos/create-admin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the admin', example: 'admin@example.com'})@IsEmail()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dtos/create-admin.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Full name of the admin', example: 'John Doe', minLength: 3})@IsString()@IsNotEmpty()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dtos/create-admin.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password (Minimum eight characters, at least one letter, one number, and one special character)', example: 'Passw0rd!', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/dtos/create-admin.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateAdminDto {\n  @ApiProperty({\n    description: 'Full name of the admin',\n    example: 'John Doe',\n    minLength: 3,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  name: string;\n\n  @ApiProperty({\n    description: 'Email address of the admin',\n    example: 'admin@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({\n    description:\n      'Password (Minimum eight characters, at least one letter, one number, and one special character)',\n    example: 'Passw0rd!',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamAssignmentDto.html":{"url":"classes/CreateExamAssignmentDto.html","title":"class - CreateExamAssignmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamAssignmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam-assignment.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for assigning an exam to a student.\nContains identifiers for the exam and student, exam type,\nand optional scheduling details such as start and end times.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                endTime\n                            \n                            \n                                    \n                                    \n                                    \n                                exam\n                            \n                            \n                                    \n                                    \n                                examSchema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                startTime\n                            \n                            \n                                    \n                                    \n                                    \n                                student\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        endTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exam end time in ISO 8601 date-time format', example: '2025-06-04T10:00:00Z', required: false, type: String, format: 'date-time'})@IsOptional()@IsDate()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:91\n                        \n                    \n\n            \n                \n                    Optional end time of the exam in ISO 8601 date-time format.\nDefines when the exam will no longer be accessible.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        exam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the exam to assign', example: 'exam_abc123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:24\n                        \n                    \n\n            \n                \n                    Unique identifier of the exam to assign.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        examSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         examType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of the exam (MCQ or Open Ended)', enum: examType, example: undefined})@IsEnum(examType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:53\n                        \n                    \n\n            \n                \n                    The type of the exam.\nPossible values are defined in the examType enum,\ne.g., MCQ or Open Ended.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exam start time in ISO 8601 date-time format', example: '2025-06-04T09:00:00Z', required: false, type: String, format: 'date-time'})@IsOptional()@IsDate()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:72\n                        \n                    \n\n            \n                \n                    Optional start time of the exam in ISO 8601 date-time format.\nDefines when the exam becomes available to the student.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        student\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the student receiving the exam', example: 'student_xyz456'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam-assignment.dto.ts:37\n                        \n                    \n\n            \n                \n                    Unique identifier of the student receiving the exam.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { examType } from '../enums/exam-type.enum';\nimport { Type } from 'class-transformer';\n\n/**\n * Data Transfer Object for assigning an exam to a student.\n * \n * Contains identifiers for the exam and student, exam type,\n * and optional scheduling details such as start and end times.\n */\nexport class CreateExamAssignmentDto {\n  /**\n   * Unique identifier of the exam to assign.\n   * \n   * @example 'exam_abc123'\n   */\n  @ApiProperty({\n    description: 'ID of the exam to assign',\n    example: 'exam_abc123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  exam: string;\n\n  /**\n   * Unique identifier of the student receiving the exam.\n   * \n   * @example 'student_xyz456'\n   */\n  @ApiProperty({\n    description: 'ID of the student receiving the exam',\n    example: 'student_xyz456',\n  })\n  @IsString()\n  @IsNotEmpty()\n  student: string;\n\n  /**\n   * The type of the exam.\n   * \n   * Possible values are defined in the examType enum,\n   * e.g., MCQ or Open Ended.\n   * \n   * @example examType.MCQ\n   */\n  @ApiProperty({\n    description: 'Type of the exam (MCQ or Open Ended)',\n    enum: examType,\n    example: examType.MCQ,\n  })\n  @IsEnum(examType)\n  examSchema: examType;\n\n  /**\n   * Optional start time of the exam in ISO 8601 date-time format.\n   * \n   * Defines when the exam becomes available to the student.\n   * \n   * @example '2025-06-04T09:00:00Z'\n   */\n  @ApiProperty({\n    description: 'Exam start time in ISO 8601 date-time format',\n    example: '2025-06-04T09:00:00Z',\n    required: false,\n    type: String,\n    format: 'date-time',\n  })\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  startTime?: Date;\n\n  /**\n   * Optional end time of the exam in ISO 8601 date-time format.\n   * \n   * Defines when the exam will no longer be accessible.\n   * \n   * @example '2025-06-04T10:00:00Z'\n   */\n  @ApiProperty({\n    description: 'Exam end time in ISO 8601 date-time format',\n    example: '2025-06-04T10:00:00Z',\n    required: false,\n    type: String,\n    format: 'date-time',\n  })\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  endTime?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExamDto.html":{"url":"classes/CreateExamDto.html","title":"class - CreateExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/create-exam.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new exam.\nThis DTO supports both multiple choice (MCQ) and open-ended exams. It ensures\nthat all required fields like course name, course code, duration, question count,\nand exam type are provided with appropriate validation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                courseCode\n                            \n                            \n                                    \n                                    \n                                    \n                                courseName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                    \n                                    \n                                examType\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                questionCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        courseCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique course code (minimum 6 characters)', example: 'CS101A', minLength: 6})@IsString()@IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:46\n                        \n                    \n\n            \n                \n                    Unique course code (minimum 6 characters).\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        courseName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the course for which the exam is being created', example: 'Computer Science 101'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:31\n                        \n                    \n\n            \n                \n                    Name of the course for which the exam is being created.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Exam duration in minutes (minimum 10)', example: 60, minimum: 10})@IsInt()@IsNotEmpty()@Min(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:61\n                        \n                    \n\n            \n                \n                    Duration of the exam in minutes. Must be at least 10.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        examType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         examType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of exam: McqQuestion for MCQs or OeQuestion for Open-Ended', enum: examType, example: undefined})@IsEnum(examType, {message: 'examType must be either McqQuestion or OeQuestion'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:92\n                        \n                    \n\n            \n                \n                    Type of exam: McqQuestion for MCQs or OeQuestion for Open-Ended.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        questionCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of questions in the exam (minimum 1)', example: 20, minimum: 1})@IsInt()@IsNotEmpty()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/create-exam.dto.ts:76\n                        \n                    \n\n            \n                \n                    Total number of questions in the exam. Must be at least 1.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsString,\n  Min,\n  MinLength,\n} from 'class-validator';\nimport { examType } from '../enums/exam-type.enum';\n\n/**\n * Data Transfer Object for creating a new exam.\n * \n * This DTO supports both multiple choice (MCQ) and open-ended exams. It ensures\n * that all required fields like course name, course code, duration, question count,\n * and exam type are provided with appropriate validation.\n */\nexport class CreateExamDto {\n  /**\n   * Name of the course for which the exam is being created.\n   * \n   * @example 'Computer Science 101'\n   */\n  @ApiProperty({\n    description: 'Name of the course for which the exam is being created',\n    example: 'Computer Science 101',\n  })\n  @IsString()\n  @IsNotEmpty()\n  courseName: string;\n\n  /**\n   * Unique course code (minimum 6 characters).\n   * \n   * @example 'CS101A'\n   */\n  @ApiProperty({\n    description: 'Unique course code (minimum 6 characters)',\n    example: 'CS101A',\n    minLength: 6,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(6)\n  courseCode: string;\n\n  /**\n   * Duration of the exam in minutes. Must be at least 10.\n   * \n   * @example 60\n   */\n  @ApiProperty({\n    description: 'Exam duration in minutes (minimum 10)',\n    example: 60,\n    minimum: 10,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  @Min(10)\n  duration: number;\n\n  /**\n   * Total number of questions in the exam. Must be at least 1.\n   * \n   * @example 20\n   */\n  @ApiProperty({\n    description: 'Number of questions in the exam (minimum 1)',\n    example: 20,\n    minimum: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  @Min(1)\n  questionCount: number;\n\n  /**\n   * Type of exam: McqQuestion for MCQs or OeQuestion for Open-Ended.\n   * \n   * @example 'McqQuestion'\n   */\n  @ApiProperty({\n    description: 'Type of exam: McqQuestion for MCQs or OeQuestion for Open-Ended',\n    enum: examType,\n    example: examType.MCQ,\n  })\n  @IsEnum(examType, {\n    message: 'examType must be either McqQuestion or OeQuestion',\n  })\n  @IsNotEmpty()\n  examType: examType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateExamProvider.html":{"url":"injectables/CreateExamProvider.html","title":"injectable - CreateExamProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateExamProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/create-exam.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider responsible for creating exams and assigning them to students.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection, studentService: StudentService, examModel: Model, examAssignmentModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/create-exam.provider.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        studentService\n                                                  \n                                                        \n                                                                        StudentService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examAssignmentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExam(createExamDto: CreateExamDto, tutorialList: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/create-exam.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        Creates a new exam and assigns it to students parsed from the uploaded tutorial list.\n\nParses student data from file\nCreates an exam record\nAssigns exam to each student\nUses a transaction to ensure atomicity\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createExamDto\n                                            \n                                                            CreateExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExam creation data\n\n\n                                            \n                                        \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUploaded file containing student information\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Success response with created exam details\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { StudentService } from 'src/student/providers/student.service';\nimport { Connection, Model } from 'mongoose';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport { CreateExamAssignmentDto } from '../dtos/create-exam-assignment.dto';\nimport {\n  ExamAssignment,\n  ExamAssignmentDocument,\n} from '../schemas/exam-assigment.schema';\nimport { IResponse, successResponse } from 'src/utils/response-writer';\n\n/**\n * Provider responsible for creating exams and assigning them to students.\n */\n@Injectable()\nexport class CreateExamProvider {\n  constructor(\n    @InjectConnection()\n    private readonly connection: Connection,\n\n    @Inject(forwardRef(() => StudentService))\n    private readonly studentService: StudentService,\n\n    @InjectModel(Exam.name)\n    private readonly examModel: Model,\n\n    @InjectModel(ExamAssignment.name)\n    private readonly examAssignmentModel: Model,\n  ) {}\n\n  /**\n   * Creates a new exam and assigns it to students parsed from the uploaded tutorial list.\n   *\n   * - Parses student data from file\n   * - Creates an exam record\n   * - Assigns exam to each student\n   * - Uses a transaction to ensure atomicity\n   *\n   * @param createExamDto - Exam creation data\n   * @param tutorialList - Uploaded file containing student information\n   * @returns Success response with created exam details\n   *\n   * @throws {BadRequestException} If student list is empty or any DB operation fails\n   */\n  public async createExam(\n    createExamDto: CreateExamDto,\n    tutorialList: Express.Multer.File,\n  ): Promise {\n    const session = await this.connection.startSession();\n    session.startTransaction();\n\n    const students = await this.studentService.insertStudents(tutorialList);\n\n    if (!students || students.length === 0) {\n      throw new BadRequestException('No students found in the tutorial list');\n    }\n\n    try {\n      const exam = await this.examModel.create(createExamDto);\n      await exam.save({ session });\n\n      const operations = students.map((student) => ({\n        updateOne: {\n          filter: { exam: exam._id, student: student },\n          update: {\n            $set: {\n              exam: exam._id.toString(),\n              student: student,\n              examSchema: exam.examType,\n            } as CreateExamAssignmentDto,\n          },\n          upsert: true,\n        },\n      }));\n\n      await this.examAssignmentModel.bulkWrite(operations, { session });\n      await session.commitTransaction();\n\n      return successResponse({\n        message: 'Exam created successfully',\n        data: { exam },\n      });\n    } catch (error) {\n      console.error(error);\n      await session.abortTransaction();\n      throw new BadRequestException('Error creating exam');\n    } finally {\n      session.endSession();\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Exam.html":{"url":"classes/Exam.html","title":"class - Exam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Exam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/exam.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                courseCode\n                            \n                            \n                                    \n                                courseName\n                            \n                            \n                                    \n                                duration\n                            \n                            \n                                    \n                                examType\n                            \n                            \n                                    \n                                    Optional\n                                guideVectorStoreId\n                            \n                            \n                                    \n                                questionCount\n                            \n                            \n                                    \n                                    Optional\n                                questions\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        courseCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        courseName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        examType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         examType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({enum: examType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        guideVectorStoreId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        questionCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam.schema.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { examType } from '../enums/exam-type.enum';\n\nexport type ExamDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class Exam {\n  @Prop({ required: true })\n  courseName: string;\n\n  @Prop({ required: true })\n  courseCode: string;\n\n  @Prop({ required: true })\n  duration: number;\n\n  @Prop({ enum: examType })\n  examType: examType;\n\n  @Prop({ required: true })\n  questionCount: number;\n\n  @Prop({ default: null })\n  guideVectorStoreId?: string;\n\n  @Prop({\n    type: [{ type: mongoose.Schema.Types.ObjectId, refPath: 'examType' }],\n  })\n  questions?: mongoose.Types.ObjectId[];\n}\n\nexport const ExamSchema = SchemaFactory.createForClass(Exam);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExamAssignment.html":{"url":"classes/ExamAssignment.html","title":"class - ExamAssignment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExamAssignment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/exam-assigment.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                exam\n                            \n                            \n                                    \n                                isCompleted\n                            \n                            \n                                    \n                                    Optional\n                                score\n                            \n                            \n                                    \n                                student\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        exam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Exam\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Exam', index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam-assigment.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isCompleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Boolean, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam-assigment.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Number, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam-assigment.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        student\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Student\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Student', index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/exam-assigment.schema.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { Student } from 'src/student/schemas/student.schema';\nimport { Exam } from './exam.schema';\n\nexport type ExamAssignmentDocument = HydratedDocument;\n\n@Schema({\n  timestamps: false,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class ExamAssignment {\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Exam', index: true })\n  exam: Exam;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'Student', index: true })\n  student: Student;\n\n  @Prop({ type: Boolean, default: false })\n  isCompleted: Boolean;\n\n  @Prop({ type: Number, default: null })\n  score?: Number\n}\n\nexport const ExamAssignmentSchema = SchemaFactory.createForClass(ExamAssignment)\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExamController.html":{"url":"controllers/ExamController.html","title":"controller - ExamController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExamController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/exam.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exam\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling exam-related operations.\nSupports creating, updating, and deleting MCQ and open-ended (OE) exams.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createExam\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteMcqExam\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteOeExam\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                downloadAllStudentResponses\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                downloadExamReport\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                fetchExams\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getOeExamsReadyForGrading\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                gradeExam\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateMcqExam\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                updateOeExam\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                viewReport\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExam(createExamDto: CreateExamDto, tutorialList?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(undefined)@ApiOperation({summary: 'Create a new exam with an optional tutorial file upload'})@ApiConsumes('multipart/form-data')@ApiBody({description: 'Exam details and optional tutorial file', schema: undefined})@ApiResponse({status: 201, description: 'Exam created successfully'})@ApiResponse({status: 400, description: 'Invalid exam data'})@ApiResponse({status: 401, description: 'Unauthorized'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Create a new exam.\nAccepts a tutorial list in .xlsx format and exam metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createExamDto\n                                            \n                                                            CreateExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing exam metadata\n\n\n                                            \n                                        \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nXLSX file upload with tutorial data\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Success response containing the created exam object\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMcqExam(examId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('mcq/:examId')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete an MCQ exam by ID'})@ApiParam({name: 'examId', type: 'string', description: 'ID of the MCQ exam'})@ApiResponse({status: 200, description: 'Exam deleted successfully'})@ApiResponse({status: 404, description: 'Exam not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:143\n                        \n                    \n\n\n            \n                \n                        Delete an MCQ exam and its associated questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the MCQ exam\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Deletion success message\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOeExam(examId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('oe/:examId')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete an OE exam by ID'})@ApiParam({name: 'examId', type: 'string', description: 'ID of the OE exam'})@ApiResponse({status: 200, description: 'Exam deleted successfully'})@ApiResponse({status: 404, description: 'Exam not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:198\n                        \n                    \n\n\n            \n                \n                        Delete an OE exam and its associated questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the OE exam\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Deletion confirmation\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        downloadAllStudentResponses\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadAllStudentResponses(examId: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':examId/report/download-scripts')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:247\n                        \n                    \n\n\n            \n                \n                        Download all student responses as a ZIP file containing individual PDFs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the exam\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExpress response object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        downloadExamReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    downloadExamReport(examId: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':examId/report/download')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:222\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        fetchExams\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchExams()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:92\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        getOeExamsReadyForGrading\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOeExamsReadyForGrading()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('ugr')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:204\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        gradeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    gradeExam(gradeOeExamDto: GradeOeExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('grade')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gradeOeExamDto\n                                            \n                                                            GradeOeExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMcqExam(updateExamParamDto: UpdateExamParamDto, mcqTemplate: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('mcq/:examId')@HttpCode(HttpStatus.OK)@UseInterceptors(undefined)@ApiOperation({summary: 'Update MCQ exam by uploading a new template file'})@ApiConsumes('multipart/form-data')@ApiParam({name: 'examId', type: 'string', description: 'ID of the MCQ exam'})@ApiBody({description: 'MCQ template file', schema: undefined})@ApiResponse({status: 200, description: 'MCQ exam updated successfully'})@ApiResponse({status: 400, description: 'Invalid file or parameters'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:124\n                        \n                    \n\n\n            \n                \n                        Upload a new MCQ template to update an existing exam.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updateExamParamDto\n                                            \n                                                            UpdateExamParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO with the exam ID\n\n\n                                            \n                                        \n                                        \n                                                mcqTemplate\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nXLSX file with updated MCQ questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Successful response containing the updated exam details\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        updateOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOeExam(updateParamDto: UpdateExamParamDto, templates: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('oe/:examId')@HttpCode(HttpStatus.OK)@UseInterceptors(undefined)@ApiOperation({summary: 'Update Open-ended exam with two required templates (e.g. mark guide and answers)'})@ApiConsumes('multipart/form-data')@ApiParam({name: 'examId', type: 'string', description: 'ID of the OE exam'})@ApiBody({description: 'Two template files: mark guide and answers', schema: undefined})@ApiResponse({status: 200, description: 'Open-ended exam updated successfully'})@ApiResponse({status: 400, description: 'Invalid template files'})\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:179\n                        \n                    \n\n\n            \n                \n                        Update an OE exam with new marking guide and question templates.\nAccepts a .docx or .pdf marking guide and a .xlsx question file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updateParamDto\n                                            \n                                                            UpdateExamParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                templates\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of files (max 2): [marking guide, questions]\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Update result\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        viewReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    viewReport(examId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':examId/report')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/exam/exam.controller.ts:216\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Patch,\n  Delete,\n  Param,\n  UseInterceptors,\n  UploadedFile,\n  UploadedFiles,\n  Body,\n  HttpStatus,\n  HttpCode,\n  Get,\n  Res,\n} from '@nestjs/common';\nimport { CreateExamDto } from './dtos/create-exam.dto';\nimport { UpdateExamParamDto } from './dtos/update-exam-param.dto';\nimport { ExamService } from './providers/exam.service';\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiConsumes,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { GradeOeExamDto } from './dtos/grade-oe-exam.dto';\nimport { Auth } from 'src/admin/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/admin/auth/enums/auth-type.enum';\nimport { Response } from 'express';\n\n/**\n * Controller for handling exam-related operations.\n * Supports creating, updating, and deleting MCQ and open-ended (OE) exams.\n */\n@ApiBearerAuth()\n@ApiTags('admin')\n@Controller('exam')\nexport class ExamController {\n  constructor(private readonly examService: ExamService) { }\n\n  /**\n   * Create a new exam.\n   *\n   * Accepts a tutorial list in `.xlsx` format and exam metadata.\n   *\n   * @param createExamDto - DTO containing exam metadata\n   * @param tutorialList - XLSX file upload with tutorial data\n   * @returns Success response containing the created exam object\n   */\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @UseInterceptors(FileInterceptor('tutorialList'))\n  @ApiOperation({ summary: 'Create a new exam with an optional tutorial file upload' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Exam details and optional tutorial file',\n    schema: {\n      type: 'object',\n      properties: {\n        courseName: { type: 'string', example: 'Introduction to Computing' },\n        courseCode: { type: 'string', example: 'CSC101' },\n        duration: { type: 'integer', example: 60 },\n        questionCount: { type: 'integer', example: 20 },\n        examType: {\n          type: 'string',\n          enum: ['McqQuestion', 'OeQuestion'],\n          example: 'McqQuestion',\n        },\n        tutorialList: {\n          type: 'string',\n          format: 'binary',\n          description: 'Tutorial file upload',\n        },\n      },\n      required: ['courseName', 'courseCode', 'duration', 'questionCount', 'examType', 'tutorialList'],\n    },\n  })\n  @ApiResponse({ status: 201, description: 'Exam created successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid exam data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  public async createExam(\n    @Body() createExamDto: CreateExamDto,\n    @UploadedFile() tutorialList?: Express.Multer.File,\n  ) {\n    return this.examService.createExam(createExamDto, tutorialList);\n  }\n\n  @Get('/all')\n  public async fetchExams() {\n    return await this.examService.fetchExams();\n  }\n\n  /**\n   * Upload a new MCQ template to update an existing exam.\n   *\n   * @param updateExamParamDto - DTO with the exam ID\n   * @param mcqTemplate - XLSX file with updated MCQ questions\n   * @returns Successful response containing the updated exam details\n   */\n  @Patch('mcq/:examId')\n  @HttpCode(HttpStatus.OK)\n  @UseInterceptors(FileInterceptor('mcqList'))\n  @ApiOperation({ summary: 'Update MCQ exam by uploading a new template file' })\n  @ApiConsumes('multipart/form-data')\n  @ApiParam({ name: 'examId', type: 'string', description: 'ID of the MCQ exam' })\n  @ApiBody({\n    description: 'MCQ template file',\n    schema: {\n      type: 'object',\n      properties: {\n        mcqList: {\n          type: 'string',\n          format: 'binary',\n          description: 'New MCQ template file',\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 200, description: 'MCQ exam updated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid file or parameters' })\n  public async updateMcqExam(\n    @Param() updateExamParamDto: UpdateExamParamDto,\n    @UploadedFile() mcqTemplate: Express.Multer.File,\n  ) {\n    return this.examService.updateMcqExam(updateExamParamDto.examId, mcqTemplate);\n  }\n\n  /**\n   * Delete an MCQ exam and its associated questions.\n   *\n   * @param examId - ID of the MCQ exam\n   * @returns Deletion success message\n   */\n  @Delete('mcq/:examId')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Delete an MCQ exam by ID' })\n  @ApiParam({ name: 'examId', type: 'string', description: 'ID of the MCQ exam' })\n  @ApiResponse({ status: 200, description: 'Exam deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Exam not found' })\n  public async deleteMcqExam(@Param('examId') examId: string) {\n    return this.examService.deleteMcqExam(examId);\n  }\n\n  /**\n   * Update an OE exam with new marking guide and question templates.\n   *\n   * Accepts a `.docx` or `.pdf` marking guide and a `.xlsx` question file.\n   *\n   * @param updateExamParamDto - DTO with the exam ID\n   * @param templates - Array of files (max 2): [marking guide, questions]\n   * @returns Update result\n   */\n  @Patch('oe/:examId')\n  @HttpCode(HttpStatus.OK)\n  @UseInterceptors(FilesInterceptor('templates', 2))\n  @ApiOperation({ summary: 'Update Open-ended exam with two required templates (e.g. mark guide and answers)' })\n  @ApiConsumes('multipart/form-data')\n  @ApiParam({ name: 'examId', type: 'string', description: 'ID of the OE exam' })\n  @ApiBody({\n    description: 'Two template files: mark guide and answers',\n    schema: {\n      type: 'object',\n      properties: {\n        templates: {\n          type: 'array',\n          items: {\n            type: 'string',\n            format: 'binary',\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 200, description: 'Open-ended exam updated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid template files' })\n  public async updateOeExam(\n    @Param() updateParamDto: UpdateExamParamDto,\n    @UploadedFiles() templates: Express.Multer.File[],\n  ) {\n    return this.examService.updateOeExam(updateParamDto.examId, templates);\n  }\n\n  /**\n   * Delete an OE exam and its associated questions.\n   *\n   * @param examId - ID of the OE exam\n   * @returns Deletion confirmation\n   */\n  @Delete('oe/:examId')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Delete an OE exam by ID' })\n  @ApiParam({ name: 'examId', type: 'string', description: 'ID of the OE exam' })\n  @ApiResponse({ status: 200, description: 'Exam deleted successfully' })\n  @ApiResponse({ status: 404, description: 'Exam not found' })\n  public async deleteOeExam(@Param('examId') examId: string) {\n    return this.examService.deleteOeExam(examId);\n  }\n\n  @Get('ugr')\n  @HttpCode(HttpStatus.OK)\n  public async getOeExamsReadyForGrading() {\n    return this.examService.getOeExamsReadyForGrading()\n  }\n\n  @Post('grade')\n  @HttpCode(HttpStatus.OK)\n  public async gradeExam(@Body() gradeOeExamDto: GradeOeExamDto) {\n    return this.examService.gradeOeExam(gradeOeExamDto.examId);\n  }\n\n  @Get(':examId/report')\n  @HttpCode(HttpStatus.OK)\n  public async viewReport(@Param('examId') examId: string) {\n    return this.examService.generateExamReport(examId)\n  }\n\n  @Get(':examId/report/download')\n  @HttpCode(HttpStatus.OK)\n  public async downloadExamReport(\n    @Param('examId') examId: string,\n    @Res() res: Response,\n  ): Promise {\n    const { buffer, courseName } = await this.examService.generateExcelReport(examId);\n\n    const cleanCourseName = courseName.replace(/[^a-zA-Z0-9\\s]/g, '').replace(/\\s+/g, '_');\n    const filename = `report-${cleanCourseName}.xlsx`;\n\n    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    res.setHeader('Content-Length', buffer.length);\n    res.setHeader('Cache-Control', 'no-cache');\n\n    res.send(buffer);\n\n  }\n\n  /**\n * Download all student responses as a ZIP file containing individual PDFs\n * @param examId - The ID of the exam\n * @param res - Express response object\n */\n  @Get(':examId/report/download-scripts')\n  @HttpCode(HttpStatus.OK)\n  public async downloadAllStudentResponses(\n    @Param('examId') examId: string,\n    @Res() res: Response,\n  ): Promise {\n    const { buffer, courseCode } = await this.examService.generateStudentResponsesZip(examId);\n\n    const filename = `scripts-${courseCode}.zip`;\n\n    res.setHeader('Content-Type', 'application/zip');\n    res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n    res.setHeader('Content-Length', buffer.length);\n    res.setHeader('Cache-Control', 'no-cache');\n\n    res.send(buffer);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExamModule.html":{"url":"modules/ExamModule.html","title":"module - ExamModule","body":"\n                   \n\n\n\n\n    Modules\n    ExamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_ExamModule_imports\n\n\n\n\nOpenaiModule\n\nOpenaiModule\n\n\n\nExamModule\n\nExamModule\n\nExamModule -->\n\nOpenaiModule->ExamModule\n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nFetchExamAssignmentsProvider \n\nFetchExamAssignmentsProvider \n\nFetchExamAssignmentsProvider  -->\n\nExamModule->FetchExamAssignmentsProvider \n\n\n\n\n\nGradeOeExamProvider \n\nGradeOeExamProvider \n\nGradeOeExamProvider  -->\n\nExamModule->GradeOeExamProvider \n\n\n\n\n\nCreateExamProvider\n\nCreateExamProvider\n\nExamModule -->\n\nCreateExamProvider->ExamModule\n\n\n\n\n\nExamReportProvider\n\nExamReportProvider\n\nExamModule -->\n\nExamReportProvider->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nFetchExamAssignmentsProvider\n\nFetchExamAssignmentsProvider\n\nExamModule -->\n\nFetchExamAssignmentsProvider->ExamModule\n\n\n\n\n\nGradeOeExamProvider\n\nGradeOeExamProvider\n\nExamModule -->\n\nGradeOeExamProvider->ExamModule\n\n\n\n\n\nUpdateMcqExamProvider\n\nUpdateMcqExamProvider\n\nExamModule -->\n\nUpdateMcqExamProvider->ExamModule\n\n\n\n\n\nUpdateOeExamProvider\n\nUpdateOeExamProvider\n\nExamModule -->\n\nUpdateOeExamProvider->ExamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exam/exam.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateExamProvider\n                        \n                        \n                            ExamReportProvider\n                        \n                        \n                            ExamService\n                        \n                        \n                            FetchExamAssignmentsProvider\n                        \n                        \n                            GradeOeExamProvider\n                        \n                        \n                            UpdateMcqExamProvider\n                        \n                        \n                            UpdateOeExamProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExamController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenaiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExamService\n                        \n                        \n                            FetchExamAssignmentsProvider\n                        \n                        \n                            GradeOeExamProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ExamController } from './exam.controller';\nimport { ExamService } from './providers/exam.service';\nimport { StudentModule } from 'src/student/student.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Exam, ExamSchema } from './schemas/exam.schema';\nimport { ExamAssignment, ExamAssignmentSchema } from './schemas/exam-assigment.schema';\nimport { CreateExamProvider } from './providers/create-exam.provider';\nimport { UpdateMcqExamProvider } from './providers/update-mcq-exam.provider';\nimport { McqQuestion, McqQuestionSchema } from './schemas/mcq/mcq-question.schema';\nimport { UpdateOeExamProvider } from './providers/update-oe-exam.provider';\nimport { OeQuestion, OeQuestionSchema } from './schemas/oe/oe-question.schema';\nimport { FetchExamAssignmentsProvider } from './providers/fetch-exam-assignments.provider';\nimport { GradeOeExamProvider } from './providers/grade-oe-exam.provider';\nimport { OeExamGrading, OeExamGradingSchema } from './schemas/oe-exam-grading.schema';\nimport { OpenaiModule } from 'src/openai/openai.module';\nimport { ExamReportProvider } from './providers/exam-report.provider';\n\n@Module({\n  controllers: [ExamController],\n  providers: [ExamService, CreateExamProvider, UpdateMcqExamProvider, UpdateOeExamProvider, FetchExamAssignmentsProvider, GradeOeExamProvider, ExamReportProvider],\n  imports: [\n    forwardRef(() => StudentModule),\n    OpenaiModule,\n\n    MongooseModule.forFeature([\n      {\n        name: Exam.name,\n        schema: ExamSchema,\n      },\n      {\n        name: ExamAssignment.name,\n        schema: ExamAssignmentSchema,\n      },\n      {\n        name: McqQuestion.name,\n        schema: McqQuestionSchema\n      },\n      {\n        name: OeQuestion.name,\n        schema: OeQuestionSchema\n      },\n      {\n        name: OeExamGrading.name,\n        schema: OeExamGradingSchema\n      }\n    ]),\n  ],\n  exports: [FetchExamAssignmentsProvider, ExamService, GradeOeExamProvider]\n})\nexport class ExamModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamReportProvider.html":{"url":"injectables/ExamReportProvider.html","title":"injectable - ExamReportProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExamReportProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/exam-report.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateExamReport\n                            \n                            \n                                    Async\n                                generateExcelReport\n                            \n                            \n                                    Async\n                                generateStudentPDF\n                            \n                            \n                                    Async\n                                generateStudentResponsesZip\n                            \n                            \n                                    Async\n                                getStudentResponses\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oeExamGradingModel: Model, examAssignmentModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/exam-report.provider.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oeExamGradingModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examAssignmentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateExamReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateExamReport(exam: ExamDocument)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam-report.provider.ts:33\n                        \n                    \n\n\n            \n                \n                        Generate report for a specific exam\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exam\n                                            \n                                                            ExamDocument\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateExcelReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateExcelReport(exam: ExamDocument)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam-report.provider.ts:73\n                        \n                    \n\n\n            \n                \n                        Generate Excel buffer for exam report\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exam\n                                            \n                                                            ExamDocument\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateStudentPDF\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateStudentPDF(studentData: StudentResponseData, courseInfo: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam-report.provider.ts:245\n                        \n                    \n\n\n            \n                \n                        Generate PDF for a single student\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                studentData\n                                            \n                                                            StudentResponseData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStudent response data\n\n\n                                            \n                                        \n                                        \n                                                courseInfo\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCourse information\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise - PDF buffer\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateStudentResponsesZip\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateStudentResponsesZip(exam: ExamDocument)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam-report.provider.ts:191\n                        \n                    \n\n\n            \n                \n                        Generate ZIP file containing all student PDFs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exam\n                                            \n                                                            ExamDocument\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStudentResponses\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStudentResponses(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam-report.provider.ts:120\n                        \n                    \n\n\n            \n                \n                        Get all student responses for an exam\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the exam\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n} from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { successResponse } from 'src/utils/response-writer';\nimport { ExamAssignment, ExamAssignmentDocument } from '../schemas/exam-assigment.schema';\nimport * as XLSX from 'xlsx';\nimport { QuestionResponse, StudentResponseData } from 'src/utils/interfaces/report.interface';\nimport * as puppeteer from 'puppeteer';\nimport * as archiver from 'archiver';\nimport { generateHTMLTemplate } from 'src/utils/generate-html-template';\nimport { OeExamGrading } from '../schemas/oe-exam-grading.schema';\nimport { examType } from '../enums/exam-type.enum';\nimport { ExamDocument } from '../schemas/exam.schema';\n\n@Injectable()\nexport class ExamReportProvider {\n    constructor(\n        @InjectModel(OeExamGrading.name)\n        private readonly oeExamGradingModel: Model,\n\n        @InjectModel(ExamAssignment.name)\n        private readonly examAssignmentModel: Model,\n    ) { }\n\n    /**\n      * Generate report for a specific exam\n      * @param examId - The ID of the exam\n      * @returns \n      */\n    async generateExamReport(exam: ExamDocument) {\n\n        const assignments = await this.examAssignmentModel\n            .find({ exam: exam._id, isCompleted: true, score: { $ne: null } })\n            .populate('student', 'fullName matricNo')\n            .exec();\n\n        const examTitle = `${exam.courseCode} - ${exam.courseName}`;\n\n        if (assignments.length === 0) {\n            return successResponse({\n                message: \"Report generated successfully\", data: {\n                    examTitle,\n                    examId: exam._id,\n                    students: []\n                }\n            })\n        }\n\n\n        const students = assignments.map(assignment => ({\n            studentName: assignment.student.fullName,\n            matricNumber: assignment.student.matricNo,\n            score: assignment.score\n        }));\n\n        return successResponse({\n            message: \"Report generated successfully\", data: {\n                examTitle,\n                examId: exam._id,\n                students,\n            }\n        });\n    }\n\n    /**\n       * Generate Excel buffer for exam report\n       * @param examId - The ID of the exam\n       * @returns Promise\n       */\n    async generateExcelReport(exam: ExamDocument): Promise {\n        const report = await this.generateExamReport(exam);\n\n        const workbook = XLSX.utils.book_new();\n\n        const excelData = [\n            // Header information\n            ['Exam Report'],\n            ['Exam Title:', report.data.examTitle],\n            [],\n            // Column headers\n            ['Student Name', 'Matric Number', 'Score'],\n            // Student data\n            ...report.data.students.map(student => [\n                student.studentName,\n                student.matricNumber,\n                student.score\n            ])\n        ];\n\n        const worksheet = XLSX.utils.aoa_to_sheet(excelData);\n\n        // Style the columns\n        worksheet['!cols'] = [\n            { width: 25 },\n            { width: 15 },\n            { width: 10 }\n        ];\n\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Exam Report');\n\n        const buffer = XLSX.write(workbook, {\n            type: 'buffer',\n            bookType: 'xlsx',\n            compression: true\n        });\n\n        const courseName = report.data.examTitle.split(' (')[0] || 'Report';\n\n        return { buffer: Buffer.from(buffer), courseName };\n    }\n\n    /**\n     * Get all student responses for an exam\n     * @param examId - The ID of the exam\n     * @returns Promise\n     */\n    async getStudentResponses(examId: string): Promise {\n        const assignments = await this.examAssignmentModel\n            .find({ exam: examId, isCompleted: true })\n            .populate('student', 'fullName matricNo')\n            .populate('exam', 'courseName courseCode')\n            .exec();\n\n        if (assignments.length === 0) {\n            throw new Error('No completed assignments found for this exam');\n        }\n\n        const assignmentIds = assignments.map(assignment => assignment._id);\n\n        const examGradings = await this.oeExamGradingModel\n            .find({ assignment: { $in: assignmentIds } })\n            .populate({\n                path: 'assignment',\n                select: '_id student exam isCompleted score',\n                populate: [\n                    { path: 'student', select: 'fullName matricNo' },\n                    { path: 'exam', select: 'courseName courseCode' }\n                ]\n            })\n            .populate('responses.questionId', 'question')\n            .exec();\n\n        const studentResponses: StudentResponseData[] = [];\n\n        for (const assignment of assignments) {\n            const assignmentId = assignment._id.toString();\n\n            const grading = examGradings.find(g =>\n                (g.assignment as ExamAssignmentDocument)._id.toString() === assignmentId\n            );\n\n            let responses: QuestionResponse[] = [];\n\n            if (grading && grading.responses && grading.responses.length > 0) {\n\n                responses = grading.responses.map((response, index) => {\n                    const questionData = response.questionId as any;\n\n                    return {\n                        totalScore: assignment.score,\n                        questionNumber: index + 1,\n                        question: questionData?.question || 'Question text not available',\n                        studentResponse: response.userResponse || 'No response provided',\n                        aiScore: response.aiScore || null,\n                        aiComment: response.aiComment || null,\n                    };\n                });\n            }\n\n            const studentData = {\n                totalScore: assignment.score.toString(),\n                studentName: assignment.student.fullName,\n                matricNumber: assignment.student.matricNo,\n                responses: responses,\n            };\n\n            studentResponses.push(studentData);\n        }\n\n        return studentResponses;\n    }\n\n    /**\n       * Generate ZIP file containing all student PDFs\n       * @param examId - The ID of the exam\n       * @returns Promise\n       */\n    async generateStudentResponsesZip(exam: ExamDocument): Promise {\n\n        const examId = exam._id.toString()\n\n        const assignments = await this.examAssignmentModel\n            .find({ exam: examId, isCompleted: true })\n            .populate('student', 'fullName matricNo')\n            .populate('exam', 'courseName courseCode examType')\n            .exec();\n\n        if (assignments.length === 0) {\n            throw new Error('No completed assignments found for this exam');\n        }\n\n        const courseInfo = assignments[0].exam;\n        const courseCode = courseInfo?.courseCode;\n\n        const studentResponses = await this.getStudentResponses(examId);\n\n        const archive = archiver('zip', {\n            zlib: { level: 9 }\n        });\n\n        const chunks: Buffer[] = [];\n\n        const zipPromise = new Promise((resolve, reject) => {\n            archive.on('data', (chunk) => chunks.push(chunk));\n            archive.on('end', () => resolve(Buffer.concat(chunks)));\n            archive.on('error', reject);\n        });\n\n        for (const studentData of studentResponses) {\n            try {\n                const pdfBuffer = await this.generateStudentPDF(studentData, courseInfo);\n                const matric = studentData.matricNumber.replace(/\\//g, \"\").trim()\n                const fileName = `${matric}.pdf`;\n                archive.append(pdfBuffer, { name: fileName });\n            } catch (error) {\n            }\n        }\n\n        await archive.finalize();\n\n        const buffer = await zipPromise;\n\n        return { buffer, courseCode };\n    }\n\n    /**\n     * Generate PDF for a single student\n     * @param studentData - Student response data\n     * @param courseInfo - Course information\n     * @returns Promise - PDF buffer\n     */\n    async generateStudentPDF(studentData: StudentResponseData, courseInfo: any): Promise {\n        const browser = await puppeteer.launch({\n            headless: true,\n            args: [\n                '--no-sandbox',\n                '--disable-setuid-sandbox',\n                '--disable-dev-shm-usage',\n                '--disable-accelerated-2d-canvas',\n                '--no-first-run',\n                '--no-zygote',\n                '--disable-gpu'\n            ]\n        });\n\n        try {\n            const page = await browser.newPage();\n            const html = generateHTMLTemplate(studentData, courseInfo);\n\n            await page.setViewport({ width: 800, height: 600 });\n            await page.setContent(html, { waitUntil: 'networkidle0' });\n\n            const pdfBuffer = await page.pdf({\n                format: 'A4',\n                printBackground: true,\n                margin: {\n                    top: '20mm',\n                    right: '15mm',\n                    bottom: '20mm',\n                    left: '15mm'\n                }\n            });\n\n            return Buffer.from(pdfBuffer);\n        } finally {\n            await browser.close();\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExamService.html":{"url":"injectables/ExamService.html","title":"injectable - ExamService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/exam.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing exams and their related operations.\nDelegates creation and updates to appropriate providers based on exam type.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createExam\n                            \n                            \n                                    Public\n                                    Async\n                                deleteMcqExam\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOeExam\n                            \n                            \n                                    Public\n                                    Async\n                                fetchExam\n                            \n                            \n                                    Public\n                                    Async\n                                fetchExams\n                            \n                            \n                                    Async\n                                generateExamReport\n                            \n                            \n                                    Async\n                                generateExcelReport\n                            \n                            \n                                    Async\n                                generateStudentResponsesZip\n                            \n                            \n                                    Async\n                                getOeExamsReadyForGrading\n                            \n                            \n                                    Public\n                                    Async\n                                gradeOeExam\n                            \n                            \n                                    Public\n                                    Async\n                                updateMcqExam\n                            \n                            \n                                    Public\n                                    Async\n                                updateOeExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createExamProvider: CreateExamProvider, updateMcqExamProvider: UpdateMcqExamProvider, updateOeExamProvider: UpdateOeExamProvider, gradeOeExamProvider: GradeOeExamProvider, examReportProvider: ExamReportProvider, examModel: Model, mcqQuestionModel: Model, oeQuestionModel: Model, oeExamGradingModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/exam.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createExamProvider\n                                                  \n                                                        \n                                                                        CreateExamProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateMcqExamProvider\n                                                  \n                                                        \n                                                                        UpdateMcqExamProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateOeExamProvider\n                                                  \n                                                        \n                                                                        UpdateOeExamProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gradeOeExamProvider\n                                                  \n                                                        \n                                                                        GradeOeExamProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examReportProvider\n                                                  \n                                                        \n                                                                        ExamReportProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mcqQuestionModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oeQuestionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oeExamGradingModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExam(createExamDto: CreateExamDto, tutorialList: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Creates a new exam and assigns it to students from the uploaded list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createExamDto\n                                            \n                                                            CreateExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExam creation data\n\n\n                                            \n                                        \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nXLSX file containing student list\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response object with created exam\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMcqExam(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Deletes an MCQ exam and all its associated questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to delete\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response confirming deletion\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteOeExam(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Deletes an open-ended (OE) exam and all its associated questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to delete\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response confirming deletion\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fetchExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchExam(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fetchExams\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchExams()\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateExamReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateExamReport(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Generate report for a specific exam\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the exam\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateExcelReport\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateExcelReport(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:217\n                        \n                    \n\n\n            \n                \n                        Generate Excel buffer for exam report\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the exam\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateStudentResponsesZip\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateStudentResponsesZip(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:227\n                        \n                    \n\n\n            \n                \n                        Generate ZIP file containing all student PDFs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the exam\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOeExamsReadyForGrading\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOeExamsReadyForGrading()\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:237\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        gradeOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    gradeOeExam(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMcqExam(examId: string, mcqTemplate: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Updates an existing MCQ exam by uploading new question templates.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to update\n\n\n                                            \n                                        \n                                        \n                                                mcqTemplate\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nXLSX file containing MCQ questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response on successful update\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOeExam(examId: string, templates: Express.Multer.File[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/exam.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Updates an open-ended (OE) exam with new questions and marking guide.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to update\n\n\n                                            \n                                        \n                                        \n                                                templates\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of files including XLSX for questions and DOCX/PDF for marking guide\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Response on successful update\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateExamDto } from '../dtos/create-exam.dto';\nimport { CreateExamProvider } from './create-exam.provider';\nimport { UpdateMcqExamProvider } from './update-mcq-exam.provider';\nimport { Model } from 'mongoose';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { successResponse } from 'src/utils/response-writer';\nimport { McqQuestion } from '../schemas/mcq/mcq-question.schema';\nimport { UpdateOeExamProvider } from './update-oe-exam.provider';\nimport { OeQuestion } from '../schemas/oe/oe-question.schema';\nimport { GradeOeExamProvider } from './grade-oe-exam.provider';\nimport { examType } from '../enums/exam-type.enum';\nimport { ExamReportProvider } from './exam-report.provider';\nimport { OeExamGrading } from '../schemas/oe-exam-grading.schema';\n\n/**\n * Service responsible for managing exams and their related operations.\n * Delegates creation and updates to appropriate providers based on exam type.\n */\n@Injectable()\nexport class ExamService {\n  constructor(\n    private readonly createExamProvider: CreateExamProvider,\n    private readonly updateMcqExamProvider: UpdateMcqExamProvider,\n    private readonly updateOeExamProvider: UpdateOeExamProvider,\n    private readonly gradeOeExamProvider: GradeOeExamProvider,\n    private readonly examReportProvider: ExamReportProvider,\n\n    @InjectModel(Exam.name)\n    private readonly examModel: Model,\n\n    @InjectModel(McqQuestion.name)\n    private readonly mcqQuestionModel: Model,\n\n    @InjectModel(OeQuestion.name)\n    private readonly oeQuestionModel: Model,\n\n    @InjectModel(OeExamGrading.name)\n    private readonly oeExamGradingModel: Model\n  ) { }\n\n  public async fetchExams() {\n    const exams = await this.examModel.find();\n    return successResponse({ message: \"Exams retrieved successfully\", data: exams });\n  }\n\n  /**\n   * Creates a new exam and assigns it to students from the uploaded list.\n   *\n   * @param createExamDto - Exam creation data\n   * @param tutorialList - XLSX file containing student list\n   * @returns Response object with created exam\n   *\n   * @throws {BadRequestException} If file is not a valid .xlsx format\n   */\n  public async createExam(\n    createExamDto: CreateExamDto,\n    tutorialList: Express.Multer.File,\n  ) {\n    if (\n      !tutorialList ||\n      tutorialList.mimetype !==\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ) {\n      throw new BadRequestException('Only .xlsx files are allowed');\n    }\n\n    return this.createExamProvider.createExam(createExamDto, tutorialList);\n  }\n\n  /**\n   * Updates an existing MCQ exam by uploading new question templates.\n   *\n   * @param examId - ID of the exam to update\n   * @param mcqTemplate - XLSX file containing MCQ questions\n   * @returns Response on successful update\n   *\n   * @throws {BadRequestException} If file is not a valid .xlsx format\n   */\n  public async updateMcqExam(examId: string, mcqTemplate: Express.Multer.File) {\n    if (\n      !mcqTemplate ||\n      mcqTemplate.mimetype !==\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ) {\n      throw new BadRequestException('Only .xlsx files are allowed');\n    }\n\n    return this.updateMcqExamProvider.updateMcqExam(examId, mcqTemplate);\n  }\n\n  /**\n   * Deletes an MCQ exam and all its associated questions.\n   *\n   * @param examId - ID of the exam to delete\n   * @returns Response confirming deletion\n   *\n   * @throws {NotFoundException} If exam is not found\n   */\n  public async deleteMcqExam(examId: string) {\n    const exam = await this.fetchExam(examId)\n\n    if (exam.questions?.length) {\n      await this.mcqQuestionModel.deleteMany({ _id: { $in: exam.questions } });\n    }\n\n    await this.examModel.findByIdAndDelete(examId);\n\n    return successResponse({ message: 'Exam and related questions deleted' });\n  }\n\n  /**\n   * Updates an open-ended (OE) exam with new questions and marking guide.\n   *\n   * @param examId - ID of the exam to update\n   * @param templates - Array of files including XLSX for questions and DOCX/PDF for marking guide\n   * @returns Response on successful update\n   *\n   * @throws {BadRequestException} If required files are missing or invalid\n   */\n  public async updateOeExam(examId: string, templates: Express.Multer.File[]) {\n    let mGuide: Express.Multer.File;\n    let oeTemplate: Express.Multer.File;\n\n    if (!templates) {\n      throw new BadRequestException(\n        'You need to provide the templates to update exam',\n      );\n    }\n\n    for (const template of templates) {\n      console.log(template.mimetype)\n      if (\n        template.mimetype ===\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||\n        template.mimetype === 'application/pdf'\n      ) {\n        mGuide = template;\n      } else if (\n        template.mimetype ===\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      ) {\n        oeTemplate = template;\n      }\n    }\n\n    if (!mGuide) {\n      throw new BadRequestException(\n        'Please provide the marking guide in .docx or .pdf format',\n      );\n    }\n\n    if (!oeTemplate) {\n      throw new BadRequestException(\n        'Please provide the questions in .xlsx format',\n      );\n    }\n\n    return this.updateOeExamProvider.updateOeExam(examId, mGuide, oeTemplate);\n  }\n\n  /**\n   * Deletes an open-ended (OE) exam and all its associated questions.\n   *\n   * @param examId - ID of the exam to delete\n   * @returns Response confirming deletion\n   *\n   * @throws {NotFoundException} If exam is not found\n   */\n  public async deleteOeExam(examId: string) {\n    const exam = await this.fetchExam(examId)\n\n    if (exam.questions?.length) {\n      await this.oeQuestionModel.deleteMany({ _id: { $in: exam.questions } });\n    }\n\n    await this.examModel.findByIdAndDelete(examId);\n\n    return successResponse({ message: 'Exam and related questions deleted' });\n  }\n\n\n  public async fetchExam(examId: string) {\n    const exam = await this.examModel.findById(examId);\n\n    if (!exam) {\n      throw new NotFoundException('Exam not found');\n    }\n\n    return exam\n  }\n\n  public async gradeOeExam(examId: string) {\n    return this.gradeOeExamProvider.gradeOeResponses(examId)\n  }\n\n  /**\n    * Generate report for a specific exam\n    * @param examId - The ID of the exam\n    * @returns \n    */\n  async generateExamReport(examId: string) {\n    const exam = await this.fetchExam(examId)\n    return this.examReportProvider.generateExamReport(exam);\n  }\n\n  /**\n     * Generate Excel buffer for exam report\n     * @param examId - The ID of the exam\n     * @returns Promise\n     */\n  async generateExcelReport(examId: string): Promise {\n    const exam = await this.fetchExam(examId)\n    return this.examReportProvider.generateExcelReport(exam)\n  }\n\n  /**\n     * Generate ZIP file containing all student PDFs\n     * @param examId - The ID of the exam\n     * @returns Promise\n     */\n  async generateStudentResponsesZip(examId: string): Promise {\n\n    const exam = await this.fetchExam(examId);\n    if (exam.examType != examType.OE) {\n      throw new BadRequestException(\"Scripts can only be generated for open ended exams\")\n    }\n\n    return this.examReportProvider.generateStudentResponsesZip(exam);\n  }\n\n  async getOeExamsReadyForGrading() {\n    const gradings = await this.oeExamGradingModel.find({\n      $or: [\n        { 'responses.aiScore': null },\n        { 'responses.aiScore': { $exists: false } },\n        { 'responses.aiComment': null },\n        { 'responses.aiComment': { $exists: false } },\n        { 'responses.aiComment': '' }\n      ]\n    })\n      .populate({\n        path: 'assignment',\n        select: '_id student exam isCompleted score',\n        populate: [\n          { path: 'student', select: 'fullName matricNo' },\n          { path: 'exam', select: '_id courseName courseCode title' }\n        ]\n      })\n      .exec();\n    const examGroups = new Map();\n\n    for (const grading of gradings) {\n      const examId = (grading.assignment.exam as ExamDocument)._id.toString();\n      const examInfo = grading.assignment.exam;\n\n      if (!examGroups.has(examId)) {\n        examGroups.set(examId, {\n          examId: examId,\n          courseName: examInfo.courseName,\n          courseCode: examInfo.courseCode\n        });\n      }\n    }\n\n    return successResponse({ message: \"Examinations with ungraded responses\", data: Array.from(examGroups.values()) });\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FetchExamAssignmentsProvider.html":{"url":"injectables/FetchExamAssignmentsProvider.html","title":"injectable - FetchExamAssignmentsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FetchExamAssignmentsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/fetch-exam-assignments.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider class to generate and/or fetch assignment for each student\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cacheMcqQuestions\n                            \n                            \n                                    Async\n                                generateAndCacheQuestions\n                            \n                            \n                                    Async\n                                getAssignmentsForStudent\n                            \n                            \n                                    Async\n                                getCachedMcqQuestion\n                            \n                            \n                                    Private\n                                getQuestionModel\n                            \n                            \n                                    Private\n                                shuffleAndSelect\n                            \n                            \n                                    Async\n                                updateStudentMcqScore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(examAssignmentModel: Model, mcqModel: Model, oeModel: Model, cacheService: CacheService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/fetch-exam-assignments.provider.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        examAssignmentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mcqModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oeModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheService\n                                                  \n                                                        \n                                                                        CacheService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cacheMcqQuestions\n                        \n                    \n                \n            \n            \n                \n                        \n                    cacheMcqQuestions(questions: T[], ttl?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:188\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Cache individual MCQ questions for faster retrieval\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                questions\n                                            \n                                                        T[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nArray of question objects (lean or full documents)\n\n\n                                            \n                                        \n                                        \n                                                ttl\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nTime to live in seconds (optional)\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateAndCacheQuestions\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAndCacheQuestions(studentId: string, exam: ExamDocument)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:104\n                        \n                    \n\n\n            \n                \n                        Generate and cache a list of randomized questions for a student-exam combo\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                exam\n                                            \n                                                            ExamDocument\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAssignmentsForStudent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAssignmentsForStudent(studentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:64\n                        \n                    \n\n\n            \n                \n                        Get all exam assignments for a given student and include cached/randomized questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCachedMcqQuestion\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCachedMcqQuestion(questionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:216\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Retrieve a single MCQ question from cache\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                questionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the question to retrieve\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The cached question or null if not found\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getQuestionModel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQuestionModel(type: examType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:244\n                        \n                    \n\n\n            \n                \n                        Get Mongoose model based on examType enum\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            examType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Model\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shuffleAndSelect\n                        \n                    \n                \n            \n            \n                \n                        \n                    shuffleAndSelect(array: T[], count: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:232\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Shuffle the array and return count number of items\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                array\n                                            \n                                                        T[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     T[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStudentMcqScore\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStudentMcqScore(examId: string, studentId: string, score: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/fetch-exam-assignments.provider.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                score\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    Injectable,\n    NotFoundException,\n    InternalServerErrorException,\n    ForbiddenException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { ExamAssignment, ExamAssignmentDocument } from '../schemas/exam-assigment.schema';\nimport { ExamDocument } from '../schemas/exam.schema';\nimport { examType } from '../enums/exam-type.enum';\nimport { Types } from 'mongoose';\nimport { CacheService } from 'src/cache/cache.service';\nimport { McqQuestion, McqQuestionDocument } from '../schemas/mcq/mcq-question.schema';\nimport { generateExamQuestionsCacheKey, generateMcqQuestionCacheKey } from '../constants/cache-keys';\n\n/**\n * Cache for just 1 day\n */\nconst CACHE_TTL = 1000 * 60 * 60 * 24;\n\n/**\n * Provider class to generate and/or fetch assignment for each student\n */\n@Injectable()\nexport class FetchExamAssignmentsProvider {\n    constructor(\n        @InjectModel(ExamAssignment.name)\n        private readonly examAssignmentModel: Model,\n\n        @InjectModel('McqQuestion')\n        private readonly mcqModel: Model,\n\n        @InjectModel('OeQuestion')\n        private readonly oeModel: Model,\n\n        private readonly cacheService: CacheService,\n    ) { }\n\n    async updateStudentMcqScore(examId: string, studentId: string, score: number) {\n        const assignment = await this.examAssignmentModel.findOne({ exam: examId, student: studentId });\n\n        if (!assignment) {\n            throw new NotFoundException(\"Assignment not found for student.\");\n        }\n\n        if (assignment.score !== undefined && assignment.score !== null) {\n            throw new ForbiddenException(\"Exam has already been graded.\");\n        }\n\n        await this.examAssignmentModel.updateOne(\n            { _id: assignment._id },\n            {\n                score: score,\n                isCompleted: true\n            },\n            { runValidators: true }\n        );\n    }\n\n    /**\n     * Get all exam assignments for a given student and include cached/randomized questions.\n     */\n    async getAssignmentsForStudent(studentId: string) {\n        const assignments = await this.examAssignmentModel\n            .find({ student: new Types.ObjectId(studentId), isCompleted: false })\n            .populate({\n                path: 'exam',\n                select: 'courseName courseCode duration examType questionCount questions',\n            })\n            .lean()\n            .exec();\n\n        if (!assignments.length) {\n            return [];\n        }\n\n        const results = await Promise.all(\n            assignments.map(async (assignment) => {\n                const exam = assignment.exam as ExamDocument;\n\n                if (!exam || !exam.questions?.length) return null;\n\n                const examId = exam._id.toString();\n\n                return {\n                    assignmentId: assignment._id,\n                    examId,\n                    courseName: exam.courseName,\n                    courseCode: exam.courseCode,\n                    duration: exam.duration,\n                    examType: exam.examType\n                };\n            }),\n        );\n\n        return results.filter(Boolean);\n    }\n\n\n    /**\n     * Generate and cache a list of randomized questions for a student-exam combo\n     */\n    async generateAndCacheQuestions(\n        studentId: string,\n        exam: ExamDocument\n    ): Promise {\n        const examId = exam._id.toString();\n        const cacheKey = generateExamQuestionsCacheKey(studentId, examId);\n\n        try {\n            // Check if questions are already cached\n            const cached = await this.cacheService.get(cacheKey);\n            if (cached) {\n                return cached;\n            }\n\n            // Validate exam questions\n            const questions = exam.questions;\n            if (!questions?.length) {\n                throw new Error(`No questions available for exam ${examId}`);\n            }\n\n            if (exam.questionCount > questions.length) {\n                throw new Error(\n                    `Exam ${examId} requests ${exam.questionCount} questions but only ${questions.length} are available`\n                );\n            }\n\n            // Select random questions\n            const selected = this.shuffleAndSelect(questions, exam.questionCount);\n\n            // Get the appropriate model based on exam type\n            const model = this.getQuestionModel(exam.examType);\n\n            // Bulk fetch all questions in a single query\n            const fullQuestions = await model\n                .find({ _id: { $in: selected } })\n                .lean()\n                .exec();\n\n            // Validate that we got the expected number of questions\n            if (fullQuestions.length !== selected.length) {\n                throw new Error(\n                    `Expected ${selected.length} questions but found ${fullQuestions.length} for exam ${examId}`\n                );\n            }\n\n            // Process questions based on exam type\n            let processedQuestions: CachedQuestion[];\n\n            if (exam.examType === 'OeQuestion') {\n                // For Open-Ended questions, only id and question\n                processedQuestions = fullQuestions.map(q => ({\n                    id: q._id.toString(),\n                    question: q.question\n                }));\n            } else {\n                // For MCQ questions, id, question, and options\n                processedQuestions = fullQuestions.map(q => ({\n                    id: q._id.toString(),\n                    question: q.question,\n                    options: q.options\n                }));\n\n                // Cache individual MCQ questions\n                await this.cacheMcqQuestions(fullQuestions, CACHE_TTL);\n            }\n\n            // Cache the processed questions for this student-exam combination\n            await this.cacheService.set(cacheKey, processedQuestions, CACHE_TTL);\n\n            return processedQuestions;\n\n        } catch (error) {\n            console.error('Error in generateAndCacheQuestions:', error);\n            throw new InternalServerErrorException(\n                `Error fetching questions for exam ${examId}: ${error.message}`\n            );\n        }\n    }\n\n    /**\n     * Cache individual MCQ questions for faster retrieval\n     * @param questions - Array of question objects (lean or full documents)\n     * @param ttl - Time to live in seconds (optional)\n     */\n    async cacheMcqQuestions(\n        questions: T[],\n        ttl?: number\n    ): Promise {\n        try {\n            const cacheItems = questions.map(question => {\n                if (!question._id) {\n                    throw new Error('Question missing _id field');\n                }\n\n                return {\n                    key: generateMcqQuestionCacheKey(question._id.toString()),\n                    value: question,\n                    ttl\n                };\n            });\n\n            await this.cacheService.mset(cacheItems);\n        } catch (error) {\n            throw new Error(`Failed to cache individual MCQ questions: ${error.message}`);\n        }\n    }\n\n    /**\n     * Retrieve a single MCQ question from cache\n     * @param questionId - The ID of the question to retrieve\n     * @returns The cached question or null if not found\n     */\n    async getCachedMcqQuestion(questionId: string): Promise {\n        try {\n            const cacheKey = generateMcqQuestionCacheKey(questionId);\n\n            const cacheQuestion = await this.cacheService.get(cacheKey);\n\n            return cacheQuestion\n        } catch (error) {\n            console.error(`Error retrieving cached MCQ question ${questionId}:`, error);\n            return null;\n        }\n    }\n\n    /**\n     * Shuffle the array and return `count` number of items\n     */\n    private shuffleAndSelect(array: T[], count: number): T[] {\n        const copy = [...array];\n        for (let i = 0; i  {\n        switch (type) {\n            case examType.MCQ:\n                return this.mcqModel;\n            case examType.OE:\n                return this.oeModel;\n            default:\n                throw new InternalServerErrorException(`Unknown exam type: ${type}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FetchQuestionParamsDto.html":{"url":"classes/FetchQuestionParamsDto.html","title":"class - FetchQuestionParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FetchQuestionParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/dtos/fetch-question-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                examId\n                            \n                            \n                                    \n                                    \n                                studentId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/fetch-question-params.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        studentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/fetch-question-params.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class FetchQuestionParamsDto {\n    @IsString()\n    @IsNotEmpty()\n    studentId: string;\n\n    @IsString()\n    @IsNotEmpty()\n    examId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateTokenProvider.html":{"url":"classes/GenerateTokenProvider.html","title":"class - GenerateTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/providers/generate-token.provider.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/admin/auth/providers/generate-token.provider.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(adminId: string, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/admin/auth/providers/generate-token.provider.ts:14\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adminId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { Inject } from '@nestjs/common';\n\nexport class GenerateTokenProvider {\n  constructor(\n    private readonly jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(adminId: string, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: adminId,\n        ...payload,\n      },\n      {\n        secret: this.jwtConfiguration.secret,\n        expiresIn: this.jwtConfiguration.accessTokenTtl,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalHttpExceptionFilter.html":{"url":"classes/GlobalHttpExceptionFilter.html","title":"class - GlobalHttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalHttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/global-http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Global HTTP exception filter to handle all uncaught exceptions.\nThis filter catches all exceptions thrown during request handling and\nformats the response into a consistent JSON structure. It extracts the\nHTTP status code and message from either standard HttpException or\nother unknown exceptions, providing a default 500 status for unhandled errors.\nExample output:\nExample :{\n  \"success\": false,\n  \"message\": \"Invalid input provided\"\n}\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/global-http-exception.filter.ts:35\n                        \n                    \n\n\n            \n                \n                        Method that handles caught exceptions and sends a formatted error response.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thrown exception object.\n\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current execution context.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Global HTTP exception filter to handle all uncaught exceptions.\n *\n * This filter catches all exceptions thrown during request handling and\n * formats the response into a consistent JSON structure. It extracts the\n * HTTP status code and message from either standard `HttpException` or\n * other unknown exceptions, providing a default 500 status for unhandled errors.\n *\n * Example output:\n * ```json\n * {\n *   \"success\": false,\n *   \"message\": \"Invalid input provided\"\n * }\n * ```\n */\n@Catch()\nexport class GlobalHttpExceptionFilter implements ExceptionFilter {\n\n  /**\n   * Method that handles caught exceptions and sends a formatted error response.\n   *\n   * @param exception - The thrown exception object.\n   * @param host - The current execution context.\n   */\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const exceptionResponse: any =\n      exception instanceof HttpException\n        ? exception.getResponse()\n        : { message: exception.message || 'Internal server error' };\n\n    const message =\n      typeof exceptionResponse === 'string'\n        ? exceptionResponse\n        : Array.isArray(exceptionResponse?.message)\n          ? exceptionResponse.message[0]\n          : exceptionResponse?.message || 'An error occurred';\n\n    return response.status(status).json({ success: false, message: message });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GradeOeExamDto.html":{"url":"classes/GradeOeExamDto.html","title":"class - GradeOeExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GradeOeExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/grade-oe-exam.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                examId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/grade-oe-exam.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class GradeOeExamDto {\n    @IsString()\n    @IsNotEmpty()\n    examId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GradeOeExamProvider.html":{"url":"injectables/GradeOeExamProvider.html","title":"injectable - GradeOeExamProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GradeOeExamProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/grade-oe-exam.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                gradeOeResponses\n                            \n                            \n                                    Async\n                                prepareResponsesForGrading\n                            \n                            \n                                    Async\n                                submitResponses\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oeExamGradingModel: Model, examAssignmentModel: Model, oeQuestionModel: Model, openAIService: OpenaiService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/grade-oe-exam.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oeExamGradingModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examAssignmentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oeQuestionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        openAIService\n                                                  \n                                                        \n                                                                        OpenaiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        gradeOeResponses\n                        \n                    \n                \n            \n            \n                \n                        \n                    gradeOeResponses(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/grade-oe-exam.provider.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        prepareResponsesForGrading\n                        \n                    \n                \n            \n            \n                \n                        \n                    prepareResponsesForGrading(examId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/grade-oe-exam.provider.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        submitResponses\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitResponses(submitOeExamDto: SubmitOeExamDto, guideVectorId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/grade-oe-exam.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                submitOeExamDto\n                                            \n                                                            SubmitOeExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guideVectorId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Model, Types } from 'mongoose';\nimport { OeExamGrading, OeExamGradingDocument } from '../schemas/oe-exam-grading.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { SubmitOeExamDto } from '../../student/dtos/submit-oe-exam.dto';\nimport { ExamAssignment, ExamAssignmentDocument } from '../schemas/exam-assigment.schema';\nimport { OpenaiService } from 'src/openai/openai.service';\nimport { OeQuestion, OeQuestionDocument } from '../schemas/oe/oe-question.schema';\nimport { successResponse } from 'src/utils/response-writer';\n\n@Injectable()\nexport class GradeOeExamProvider {\n\n    constructor(\n        @InjectModel(OeExamGrading.name)\n        private readonly oeExamGradingModel: Model,\n\n        @InjectModel(ExamAssignment.name)\n        private readonly examAssignmentModel: Model,\n\n        @InjectModel(OeQuestion.name)\n        private readonly oeQuestionModel: Model,\n\n        private readonly openAIService: OpenaiService\n    ) { }\n\n    async submitResponses(submitOeExamDto: SubmitOeExamDto, guideVectorId: string): Promise {\n        const { examId, studentId, responses } = submitOeExamDto;\n\n        const assignment = await this.examAssignmentModel.findOne({ exam: examId, student: studentId });\n        if (!assignment) {\n            throw new NotFoundException('Exam assignment not found.');\n        }\n\n        if (assignment.isCompleted) {\n            throw new Error('Student has already completed this exam.');\n        }\n\n        await this.oeExamGradingModel.create({\n            assignment: assignment._id,\n            guideVectorStoreId: guideVectorId,\n            responses: responses.map((res) => ({\n                questionId: res.questionId,\n                userResponse: res.answer,\n                aiComment: null,\n                aiScore: null,\n            })),\n        });\n\n        assignment.isCompleted = true;\n        await assignment.save();\n    }\n\n    async prepareResponsesForGrading(examId: string): Promise {\n        const completedAssignments = await this.examAssignmentModel\n            .find({\n                exam: new Types.ObjectId(examId),\n                isCompleted: true,\n            })\n            .select('_id')\n            .lean();\n\n        if (completedAssignments.length === 0) {\n            return [];\n        }\n\n        const assignmentIds = completedAssignments.map(a => a._id);\n\n        const oeRecord = await this.oeExamGradingModel.aggregate([\n            { $match: { assignment: { $in: assignmentIds } } },\n            { $unwind: { path: '$responses', includeArrayIndex: 'responseIndex' } },\n            {\n                $match: {\n                    $or: [\n                        { 'responses.aiScore': null },\n                        { 'responses.aiComment': null }\n                    ]\n                }\n            },\n            {\n                $group: {\n                    _id: '$_id',\n                    assignment: { $first: '$assignment' },\n                    guideVectorStoreId: { $first: '$guideVectorStoreId' },\n                    responses: { $push: '$responses' }\n                }\n            }\n        ]);\n\n\n\n        const gradingRequests: GradingRequest[] = [];\n\n        oeRecord.forEach(oe => {\n            oe.responses.forEach(response => {\n                if (response.userResponse && response.userResponse.trim()) {\n                    gradingRequests.push({\n                        assignmentId: oe.assignment.toString(),\n                        guideVectorId: oe.guideVectorStoreId,\n                        oeExamGradingId: oe._id.toString(),\n                        questionId: response.questionId.toString(),\n                        responseId: response._id.toString(),\n                        userResponse: response.userResponse,\n                    });\n                }\n            });\n        });\n\n        const uniqueQuestionIds = [...new Set(gradingRequests.map(req => req.questionId))];\n\n        const questionPromises = uniqueQuestionIds.map(questionId =>\n            this.oeQuestionModel.findById(questionId).select('question').lean({ virtuals: true })\n        );\n\n        const questions = await Promise.all(questionPromises);\n\n        const questionMap = new Map();\n        questions.forEach((question, index) => {\n            if (question) {\n                questionMap.set(uniqueQuestionIds[index], question.question);\n            }\n        });\n\n        gradingRequests.forEach(request => {\n            request.questionText = questionMap.get(request.questionId) || undefined;\n        });\n\n        return gradingRequests;\n    }\n\n    async gradeOeResponses(examId: string) {\n        const preparedResponses: GradingRequest[] = await this.prepareResponsesForGrading(examId);\n\n        if (preparedResponses.length === 0) {\n            return successResponse({ message: \"Exam Successfully Graded\" });\n        }\n\n        const responses: GradingResult[] = await this.openAIService.gradeRequests(preparedResponses);\n\n        const ops = responses.map(r => ({\n            updateOne: {\n                filter: {\n                    _id: new Types.ObjectId(r.oeExamGradingId),\n                    'responses._id': new Types.ObjectId(r.responseId),\n                },\n                update: {\n                    $set: {\n                        'responses.$.aiScore': r.aiScore,\n                        'responses.$.aiComment': r.aiComment,\n                    },\n                },\n            },\n        }));\n\n        if (ops.length > 0) {\n            await this.oeExamGradingModel.bulkWrite(ops);\n        }\n\n        const assignmentTotals = responses.reduce>((acc, r) => {\n            acc[r.assignmentId] = (acc[r.assignmentId] || 0) + r.aiScore;\n            return acc;\n        }, {});\n\n        const assignmentOps = Object.entries(assignmentTotals)\n            .filter(([_, totalScore]) => typeof totalScore === 'number')\n            .map(([assignmentId, totalScore]) => ({\n                updateOne: {\n                    filter: { _id: new Types.ObjectId(assignmentId) },\n                    update: [\n                        {\n                            $set: {\n                                score: {\n                                    $cond: {\n                                        if: { $ne: [\"$score\", null] },\n                                        then: { $add: [\"$score\", totalScore] },\n                                        else: totalScore\n                                    }\n                                }\n                            }\n                        }\n                    ],\n                },\n            }));\n\n        if (assignmentOps.length > 0) {\n            await this.examAssignmentModel.bulkWrite(assignmentOps, { ordered: false });\n        }\n\n        return successResponse({ message: \"Exam Successfully Graded\" });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GradingRequest.html":{"url":"interfaces/GradingRequest.html","title":"interface - GradingRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GradingRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/grading-request.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            assignmentId\n                                        \n                                \n                                \n                                        \n                                            guideVectorId\n                                        \n                                \n                                \n                                        \n                                            oeExamGradingId\n                                        \n                                \n                                \n                                        \n                                            questionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            questionText\n                                        \n                                \n                                \n                                        \n                                            responseId\n                                        \n                                \n                                \n                                        \n                                            userResponse\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assignmentId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignmentId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guideVectorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        guideVectorId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oeExamGradingId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oeExamGradingId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        questionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        questionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        questionText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        questionText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userResponse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userResponse:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface GradingRequest {\n  assignmentId: string;\n  guideVectorId: string;\n  oeExamGradingId: string;\n  questionId: string;\n  responseId: string;\n  userResponse: string;\n  questionText?: string;\n}\n\ninterface GradingResult {\n  assignmentId: string;\n  oeExamGradingId: string;\n  responseId: string;\n  aiScore: number;\n  aiComment: string;\n}\n\ninterface OpenaiApiResponse {\n  output: Array;\n  }>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GradingResult.html":{"url":"interfaces/GradingResult.html","title":"interface - GradingResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GradingResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/grading-request.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aiComment\n                                        \n                                \n                                \n                                        \n                                            aiScore\n                                        \n                                \n                                \n                                        \n                                            assignmentId\n                                        \n                                \n                                \n                                        \n                                            oeExamGradingId\n                                        \n                                \n                                \n                                        \n                                            responseId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aiComment\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aiComment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aiScore\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aiScore:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        assignmentId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignmentId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oeExamGradingId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oeExamGradingId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responseId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface GradingRequest {\n  assignmentId: string;\n  guideVectorId: string;\n  oeExamGradingId: string;\n  questionId: string;\n  responseId: string;\n  userResponse: string;\n  questionText?: string;\n}\n\ninterface GradingResult {\n  assignmentId: string;\n  oeExamGradingId: string;\n  responseId: string;\n  aiScore: number;\n  aiComment: string;\n}\n\ninterface OpenaiApiResponse {\n  output: Array;\n  }>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMcqQuestion.html":{"url":"interfaces/IMcqQuestion.html","title":"interface - IMcqQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMcqQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/mcq-question.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the structure of a Multiple Choice Question (MCQ).\nEach MCQ includes a question, four possible answers labeled A through D,\nand the correct answer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            A\n                                        \n                                \n                                \n                                        \n                                            B\n                                        \n                                \n                                \n                                        \n                                            C\n                                        \n                                \n                                \n                                        \n                                            Correct Answer\n                                        \n                                \n                                \n                                        \n                                            D\n                                        \n                                \n                                \n                                        \n                                            Question\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        A\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        A:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Option A.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        B\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        B:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Option B.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        C\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        C:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Option C.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Correct Answer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Correct Answer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The correct answer (should match one of A, B, C, or D).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        D\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        D:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Option D.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Question\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Question:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text of the question.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IMcqQuestion {\n  /**\n   * The text of the question.\n   */\n  Question: string;\n\n  /**\n   * Option A.\n   */\n  A: string;\n\n  /**\n   * Option B.\n   */\n  B: string;\n\n  /**\n   * Option C.\n   */\n  C: string;\n\n  /**\n   * Option D.\n   */\n  D: string;\n\n  /**\n   * The correct answer (should match one of A, B, C, or D).\n   */\n  'Correct Answer': string;\n}\n\n/**\n * An array of the expected keys for a valid MCQ question object.\n *\n * This can be used for validation or checking the shape of imported data.\n */\nexport const iMcqQuestionExpectedKeys: (keyof IMcqQuestion)[] = [\n  'Question',\n  'A',\n  'B',\n  'C',\n  'D',\n  'Correct Answer',\n];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IOeQuestion.html":{"url":"interfaces/IOeQuestion.html","title":"interface - IOeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IOeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/oe-question.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the structure of an Open-Ended (OE) question.\nThis type of question contains only the question text and expects a written response from the student.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Question\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Question\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Question:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The text of the open-ended question.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IOeQuestion {\n  /**\n   * The text of the open-ended question.\n   */\n  Question: string;\n}\n\n/**\n * An array of the expected keys for a valid open-ended question object.\n *\n * Useful for validating imported data or ensuring consistency.\n */\nexport const iOeExpectedKeys: (keyof IOeQuestion)[] = ['Question'];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IResponse.html":{"url":"interfaces/IResponse.html","title":"interface - IResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/response-writer.ts\n        \n\n\n            \n                Description\n            \n            \n                Standard interface for API responses.\nThis structure is used to return a consistent response format across all endpoints.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The actual response payload.\n\nCan be null or undefined if there’s no data to return.\nThe structure depends on the specific endpoint.\n\nExamples:\n\nA created user object.\nAn array of exams.\nA single exam result.\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A descriptive message providing additional context about the result of the operation.\nFor example:\n\n\"Exam created successfully\" for successful actions.\n\"Invalid exam ID\" for errors.\n\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether the operation was successful.\n\ntrue if the request was handled successfully.\nfalse if an error occurred.\n\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export function successResponse({\n  message,\n  data,\n}: {\n  message: string;\n  data?: any;\n}): IResponse {\n  return {\n    success: true,\n    message,\n    data,\n  };\n}\n\n\n/**\n * Standard interface for API responses.\n * \n * This structure is used to return a consistent response format across all endpoints.\n */\nexport interface IResponse {\n  /**\n   * Indicates whether the operation was successful.\n   * - `true` if the request was handled successfully.\n   * - `false` if an error occurred.\n   */\n  success: boolean;\n\n  /**\n   * A descriptive message providing additional context about the result of the operation.\n   * \n   * For example:\n   * - `\"Exam created successfully\"` for successful actions.\n   * - `\"Invalid exam ID\"` for errors.\n   */\n  message: string;\n\n  /**\n   * The actual response payload.\n   * \n   * - Can be `null` or `undefined` if there’s no data to return.\n   * - The structure depends on the specific endpoint.\n   * \n   * Examples:\n   * - A created user object.\n   * - An array of exams.\n   * - A single exam result.\n   */\n  data?: any;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStudent.html":{"url":"interfaces/IStudent.html","title":"interface - IStudent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStudent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/student.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a student assigned to take an exam.\nThis includes the student's full name and matriculation number.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            FullName\n                                        \n                                \n                                \n                                        \n                                            Matric No\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        FullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        FullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The full name of the student.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Matric No\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Matric No:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The matriculation number uniquely identifying the student.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IStudent {\n  /**\n   * The full name of the student.\n   */\n  'FullName': string;\n\n  /**\n   * The matriculation number uniquely identifying the student.\n   */\n  'Matric No': string;\n}\n\n/**\n * List of expected keys in a valid student object.\n *\n * This is useful for validating structured data such as CSV or Excel file imports.\n */\nexport const iStudentExpectedKeys: (keyof IStudent)[] = [\n  'FullName',\n  'Matric No',\n];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsertStudentProvider.html":{"url":"injectables/InsertStudentProvider.html","title":"injectable - InsertStudentProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsertStudentProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/providers/insert-student.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                insertStudents\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(studentModel: Model, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/student/providers/insert-student.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        studentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        insertStudents\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertStudents(tutorialList: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/insert-student.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport { Student, StudentDocument } from '../schemas/student.schema';\nimport { Connection, Model } from 'mongoose';\nimport { parseTemplate } from 'src/utils/template-parser';\nimport { IStudent, iStudentExpectedKeys } from 'src/utils/interfaces/student.interface';\n\n@Injectable()\nexport class InsertStudentProvider {\n    constructor(@InjectModel(Student.name)\n    private readonly studentModel: Model,\n        @InjectConnection()\n        private readonly connection: Connection,) { }\n\n    public async insertStudents(\n        tutorialList: Express.Multer.File,\n    ): Promise {\n        let insertedStudentIds: string[] = [];\n\n        // Extract student data from the tutorial list template\n        const students = parseTemplate(\n            tutorialList,\n            iStudentExpectedKeys,\n        );\n\n        const session = await this.connection.startSession();\n        session.startTransaction();\n\n        try {\n\n            const operations = students\n                .filter((student) => student['Matric No'])\n                .map((student) => {\n                    const mappedStudent = {\n                        matricNo: student['Matric No'].toUpperCase(),\n                        fullName: student['FullName'],\n                    };\n\n                    return {\n                        updateOne: {\n                            filter: { matricNo: mappedStudent.matricNo },\n                            update: { $set: mappedStudent },\n                            upsert: true,\n                        },\n                    };\n                });\n\n            await this.studentModel.bulkWrite(operations, { session });\n\n            // Fetch all affected student IDs\n            const affectedMatricNos = students.map((s) => s['Matric No']);\n            const affectedStudents = await this.studentModel\n                .find({ matricNo: { $in: affectedMatricNos } }, '_id')\n                .session(session);\n\n            insertedStudentIds = affectedStudents.map((s) => s._id.toString());\n\n            await session.commitTransaction();\n\n            return insertedStudentIds;\n        } catch (error) {\n            await session.abortTransaction();\n            throw new InternalServerErrorException(\n                error.message || 'Failed to insert students',\n            );\n        } finally {\n            await session.endSession();\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the user', example: 'user@example.com'})@IsEmail()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/auth/dtos/login.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password (minimum eight characters, at least one letter, one number, and one special character)', example: 'P@ssw0rd!', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&.])[A-Za-z\\d@$!%*#?&.]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/admin/auth/dtos/login.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email address of the user',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({\n    description:\n      'Password (minimum eight characters, at least one letter, one number, and one special character)',\n    example: 'P@ssw0rd!',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&.])[A-Za-z\\d@$!%*#?&.]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginStudentDto.html":{"url":"classes/LoginStudentDto.html","title":"class - LoginStudentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginStudentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/dtos/login-student.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                matricNo\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        matricNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/login-student.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/login-student.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from \"class-transformer\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class LoginStudentDto {\n    @IsString()\n    @IsNotEmpty()\n    @Transform(({ value }) => value?.toUpperCase())\n    matricNo: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mcq.html":{"url":"classes/Mcq.html","title":"class - Mcq","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mcq\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/mcq.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answer\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/mcq.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/mcq.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/mcq.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Mcq {\n  question: string;\n  options: string[];\n  answer: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/McqQuestion.html":{"url":"classes/McqQuestion.html","title":"class - McqQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  McqQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/mcq/mcq-question.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                            \n                                    \n                                options\n                            \n                            \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/mcq/mcq-question.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/mcq/mcq-question.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/mcq/mcq-question.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\nexport type McqQuestionDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class McqQuestion {\n  @Prop({ required: true })\n  question: string;\n\n  @Prop({ type: [String], required: true  })\n  options: string[];\n\n  @Prop({ required: true })\n  answer: string;\n}\n\nexport const McqQuestionSchema = SchemaFactory.createForClass(McqQuestion);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/McqQuestionCache.html":{"url":"interfaces/McqQuestionCache.html","title":"interface - McqQuestionCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  McqQuestionCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/question-cache-type.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                        \n                                            question\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        question:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface McqQuestionCache {\n    id: string;\n    question: string;\n    options: string[];\n}\ninterface OeQuestionCache {\n    id: string;\n    question: string;\n}\n\ntype CachedQuestion = McqQuestionCache | OeQuestionCache;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OeExamGrading.html":{"url":"classes/OeExamGrading.html","title":"class - OeExamGrading","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OeExamGrading\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/oe-exam-grading.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                assignment\n                            \n                            \n                                    \n                                guideVectorStoreId\n                            \n                            \n                                    \n                                responses\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        assignment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExamAssignment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'ExamAssignment', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/oe-exam-grading.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guideVectorStoreId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/oe-exam-grading.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        responses\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/oe-exam-grading.schema.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { ExamAssignment } from './exam-assigment.schema';\nimport { OeQuestion } from './oe/oe-question.schema';\nimport { ref } from 'joi';\n\nexport type OeExamGradingDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class OeExamGrading {\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'ExamAssignment', required: true })\n  assignment: ExamAssignment;\n\n  @Prop({})\n  guideVectorStoreId: string;\n\n  @Prop([\n    {\n      questionId: { type: mongoose.Schema.Types.ObjectId, ref: 'OeQuestion', required: true },\n      userResponse: { type: String, required: true },\n      aiComment: { type: String, default: null },\n      aiScore: { type: Number, default: null },\n    }\n  ])\n  responses: {\n    questionId: OeQuestion;\n    userResponse: string;\n    aiComment?: string;\n    aiScore?: number;\n  }[];\n}\n\nexport const OeExamGradingSchema = SchemaFactory.createForClass(OeExamGrading);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OeQuestion.html":{"url":"classes/OeQuestion.html","title":"class - OeQuestion","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OeQuestion\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/schemas/oe/oe-question.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/schemas/oe/oe-question.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\nexport type OeQuestionDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class OeQuestion {\n    @Prop()\n    question: string\n}\n\nexport const OeQuestionSchema = SchemaFactory.createForClass(OeQuestion)\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OeQuestionCache.html":{"url":"interfaces/OeQuestionCache.html","title":"interface - OeQuestionCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OeQuestionCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/interfaces/question-cache-type.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            question\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        question:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface McqQuestionCache {\n    id: string;\n    question: string;\n    options: string[];\n}\ninterface OeQuestionCache {\n    id: string;\n    question: string;\n}\n\ntype CachedQuestion = McqQuestionCache | OeQuestionCache;\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpenaiApiResponse.html":{"url":"interfaces/OpenaiApiResponse.html","title":"interface - OpenaiApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OpenaiApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/grading-request.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            output\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        output\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        output:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface GradingRequest {\n  assignmentId: string;\n  guideVectorId: string;\n  oeExamGradingId: string;\n  questionId: string;\n  responseId: string;\n  userResponse: string;\n  questionText?: string;\n}\n\ninterface GradingResult {\n  assignmentId: string;\n  oeExamGradingId: string;\n  responseId: string;\n  aiScore: number;\n  aiComment: string;\n}\n\ninterface OpenaiApiResponse {\n  output: Array;\n  }>;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenaiModule.html":{"url":"modules/OpenaiModule.html","title":"module - OpenaiModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenaiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OpenaiModule\n\n\n\ncluster_OpenaiModule_exports\n\n\n\ncluster_OpenaiModule_providers\n\n\n\n\nOpenaiService \n\nOpenaiService \n\n\n\nOpenaiModule\n\nOpenaiModule\n\nOpenaiService  -->\n\nOpenaiModule->OpenaiService \n\n\n\n\n\nOpenaiService\n\nOpenaiService\n\nOpenaiModule -->\n\nOpenaiService->OpenaiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/openai/openai.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenaiService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OpenaiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OpenaiService } from './openai.service';\n\n@Module({\n  providers: [OpenaiService],\n  exports: [OpenaiService]\n})\nexport class OpenaiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpenaiService.html":{"url":"injectables/OpenaiService.html","title":"injectable - OpenaiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenaiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/openai/openai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildGradingPrompt\n                            \n                            \n                                    Private\n                                getGradingInstructions\n                            \n                            \n                                    Public\n                                    Async\n                                gradeRequests\n                            \n                            \n                                    Public\n                                    Async\n                                uploadMarkingGuide\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/openai/openai.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildGradingPrompt\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildGradingPrompt(request: GradingRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/openai/openai.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            GradingRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getGradingInstructions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGradingInstructions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/openai/openai.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        gradeRequests\n                        \n                    \n                \n            \n            \n                \n                        \n                    gradeRequests(gradingRequests: GradingRequest[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/openai/openai.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gradingRequests\n                                            \n                                                            GradingRequest[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadMarkingGuide\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMarkingGuide(markingGuide: Express.Multer.File, courseCode: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/openai/openai.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                markingGuide\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                courseCode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OpenAI\n\n                    \n                \n                    \n                        \n                                Defined in src/openai/openai.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport OpenAI from 'openai';\nimport { ResponseFileSearchToolCall } from 'openai/resources/responses/responses';\nimport { config } from 'process';\n\n@Injectable()\nexport class OpenaiService {\n    private readonly client: OpenAI;\n    constructor(\n        private readonly configService: ConfigService\n    ) {\n        this.client = new OpenAI({\n            apiKey: configService.get('appConfig.openAiKey'),\n            project: configService.get('appConfig.openAiProjId')\n        })\n    }\n\n    private buildGradingPrompt(request: GradingRequest): string {\n        return `Question: ${request.questionText}\\n Student Response: ${request.userResponse}`;\n    }\n\n    private getGradingInstructions(): string {\n        return `You are an expert exam grader. Your task is to grade student responses based on the grading guide provided in the vector store. Always return a valid JSON string that follows the type { score: number, comment: string }. Guidelines: 1) Strictly follow the marking guide in the vector store (contains question + rubric). 2) Always break down your comment into rubric components, showing how marks were allotted. Use the format: \"The student wrote X which corresponds to Y in the guide (m/total).\" 3) Keep comments concise, structured, and objective. 4) Award partial credit when applicable. 5) Always state what was done well, what was partially correct, and what was missing, with marks per section. 6) The score must equal the sum of marks given in the breakdown. Example response: { \"score\": 7, \"comment\": \"The student explained xyz which matches abc in the guide (3/3). They partially mentioned def but missed key detail (2/4). No attempt on ghi (0/3).\" }`;\n    }\n\n    public async gradeRequests(gradingRequests: GradingRequest[]): Promise {\n        const results: GradingResult[] = [];\n        const batchSize = 5;\n\n        for (let i = 0; i  {\n                try {\n                    const response = await this.client.responses.create({\n                        model: \"gpt-4o\",\n                        instructions: this.getGradingInstructions(),\n                        input: this.buildGradingPrompt(request),\n                        tools: [\n                            {\n                                type: \"file_search\",\n                                vector_store_ids: [request.guideVectorId],\n                                max_num_results: 1\n                            }\n                        ],\n                        max_output_tokens: 300,\n                    });\n\n                    if (response.output) {\n                        const aiResponse = (response as OpenaiApiResponse).output[1].content[0].text.toString()\n                        const cleanedResponse = aiResponse.replace(/```json\\s*|```/g, \"\").trim();\n\n                        try {\n                            const parsed = JSON.parse(cleanedResponse);\n                            if (typeof parsed.score === \"number\" && typeof parsed.comment === \"string\") {\n                                return {\n                                    assignmentId: request.assignmentId,\n                                    oeExamGradingId: request.oeExamGradingId,\n                                    responseId: request.responseId,\n                                    aiScore: parsed.score,\n                                    aiComment: parsed.comment\n                                };\n                            }\n                        } catch (err) {\n                            console.error(`JSON parsing error for request ${request.responseId}:`, err);\n                        }\n                    }\n\n                    return {\n                        assignmentId: request.assignmentId,\n                        oeExamGradingId: request.oeExamGradingId,\n                        responseId: request.responseId,\n                        aiScore: null,\n                        aiComment: null\n                    };\n                } catch (error) {\n                    console.error(`Error with Responses API for request ${request.responseId}:`, error);\n                    return {\n                        assignmentId: request.assignmentId,\n                        oeExamGradingId: request.oeExamGradingId,\n                        responseId: request.responseId,\n                        aiScore: null,\n                        aiComment: null\n                    };\n                }\n            });\n\n            const batchResults = await Promise.all(batchPromises);\n            results.push(...batchResults);\n\n            if (i + batchSize  setTimeout(resolve, 1000));\n            }\n        }\n\n        return results;\n    }\n\n    public async uploadMarkingGuide(markingGuide: Express.Multer.File, courseCode: string) {\n        let uploadedFileId = undefined\n        try {\n            const uint8Array = new Uint8Array(markingGuide.buffer);\n            const file = new File([uint8Array], `${markingGuide.originalname}`, {\n                type: markingGuide.mimetype,\n            });\n            console.log(markingGuide.originalname)\n\n            const uploadedFile = await this.client.files.create({\n                file: file,\n                purpose: \"user_data\",\n            });\n\n            uploadedFileId = uploadedFile.id\n\n            const vectorStore = await this.client.vectorStores.create({\n                name: `${courseCode}-mg`,\n                expires_after: {\n                    anchor: \"last_active_at\",\n                    days: 2\n                }\n            });\n\n            await this.client.vectorStores.files.create(\n                vectorStore.id,\n                {\n                    file_id: uploadedFile.id,\n                }\n            );\n\n            return vectorStore;\n        } catch (error) {\n            console.log(error)\n            if (uploadedFileId) {\n                await this.client.files.delete(uploadedFileId).catch(() => { });\n            }\n            throw error;\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuestionResponse.html":{"url":"interfaces/QuestionResponse.html","title":"interface - QuestionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuestionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/report.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            aiComment\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            aiScore\n                                        \n                                \n                                \n                                        \n                                            question\n                                        \n                                \n                                \n                                        \n                                            studentResponse\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aiComment\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aiComment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aiScore\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aiScore:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        question:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        studentResponse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        studentResponse:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionResponse {\n  question: string;\n  studentResponse: string;\n  aiScore?: number;\n  aiComment?: string;\n}\n\nexport interface StudentResponseData {\n  totalScore: string,\n  studentName: string;\n  matricNumber: string;\n  responses: QuestionResponse[];\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Student.html":{"url":"classes/Student.html","title":"class - Student","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Student\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/schemas/student.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                fullName\n                            \n                            \n                                    \n                                matricNo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/schemas/student.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        matricNo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, index: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/schemas/student.schema.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\n\nexport type StudentDocument = HydratedDocument;\n\n@Schema({\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: (doc, ret) => {\n      ret.id = ret._id;\n      delete ret._id;\n      return ret;\n    },\n  },\n})\nexport class Student {\n  @Prop({ required: true })\n  fullName: string;\n\n  @Prop({ required: true, index: true, unique: true })\n  matricNo: string;\n}\n\nexport const StudentSchema = SchemaFactory.createForClass(Student);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StudentAnswerDto.html":{"url":"classes/StudentAnswerDto.html","title":"class - StudentAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StudentAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/dtos/student-answer.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                answer\n                            \n                            \n                                    \n                                    \n                                questionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(2000)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/student-answer.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        questionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/student-answer.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, MaxLength } from \"class-validator\";\n\nexport class StudentAnswerDto {\n    @IsString()\n    @IsNotEmpty()\n    questionId: string;\n\n    @IsString()\n    @MaxLength(2000)\n    answer: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StudentController.html":{"url":"controllers/StudentController.html","title":"controller - StudentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StudentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/student.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                student\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                fetchExams\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                fetchQuestions\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                submitMcqExam\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                submitOeExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        fetchExams\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchExams(studentId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':studentId/assignments')\n                \n            \n\n                    \n                        \n                            Defined in src/student/student.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        fetchQuestions\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchQuestions(fetchQuestionparamsDto: FetchQuestionParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':studentId/assignments/:examId')\n                \n            \n\n                    \n                        \n                            Defined in src/student/student.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fetchQuestionparamsDto\n                                            \n                                                            FetchQuestionParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginStudentDto: LoginStudentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('auth')\n                \n            \n\n                    \n                        \n                            Defined in src/student/student.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginStudentDto\n                                            \n                                                            LoginStudentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        submitMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitMcqExam(submitMcqExamDto: SubmitMcqExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('submit/mcq')\n                \n            \n\n                    \n                        \n                            Defined in src/student/student.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                submitMcqExamDto\n                                            \n                                                            SubmitMcqExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        submitOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitOeExam(submitOeExamDto: SubmitOeExamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('submit/oe')\n                \n            \n\n                    \n                        \n                            Defined in src/student/student.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                submitOeExamDto\n                                            \n                                                            SubmitOeExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Param, Post } from '@nestjs/common';\nimport { LoginStudentDto } from './dtos/login-student.dto';\nimport { StudentService } from './providers/student.service';\nimport { Auth } from 'src/admin/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/admin/auth/enums/auth-type.enum';\nimport { FetchQuestionParamsDto } from './dtos/fetch-question-params.dto';\nimport { SubmitMcqExamDto } from './dtos/submit-mcq-exam.dto';\nimport { SubmitOeExamDto } from './dtos/submit-oe-exam.dto';\n\n@Auth(AuthType.None)\n@Controller('student')\nexport class StudentController {\n    constructor(\n        private readonly studentService: StudentService\n    ) { }\n\n    @HttpCode(HttpStatus.OK)\n    @Post('auth')\n    public async login(@Body() loginStudentDto: LoginStudentDto) {\n        return this.studentService.loginStudent(loginStudentDto)\n    }\n\n    @Get(':studentId/assignments')\n    public async fetchExams(@Param('studentId') studentId: string) {\n        return this.studentService.fetchStudentAssignments(studentId)\n    }\n\n    @Get(':studentId/assignments/:examId')\n    public async fetchQuestions(@Param() fetchQuestionparamsDto: FetchQuestionParamsDto) {\n        return this.studentService.fetchQuestionsForStudent(fetchQuestionparamsDto)\n    }\n\n    @HttpCode(HttpStatus.OK)\n    @Post('submit/mcq')\n    public async submitMcqExam(@Body() submitMcqExamDto: SubmitMcqExamDto) {\n        return this.studentService.submitMcqExam(submitMcqExamDto)\n    }\n\n    @HttpCode(HttpStatus.OK)\n    @Post('submit/oe')\n    public async submitOeExam(@Body() submitOeExamDto: SubmitOeExamDto) {\n        return this.studentService.submitOeExam(submitOeExamDto)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StudentModule.html":{"url":"modules/StudentModule.html","title":"module - StudentModule","body":"\n                   \n\n\n\n\n    Modules\n    StudentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StudentModule\n\n\n\ncluster_StudentModule_exports\n\n\n\ncluster_StudentModule_providers\n\n\n\n\nStudentService \n\nStudentService \n\n\n\nStudentModule\n\nStudentModule\n\nStudentService  -->\n\nStudentModule->StudentService \n\n\n\n\n\nInsertStudentProvider\n\nInsertStudentProvider\n\nStudentModule -->\n\nInsertStudentProvider->StudentModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nStudentModule -->\n\nStudentService->StudentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/student/student.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsertStudentProvider\n                        \n                        \n                            StudentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StudentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StudentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { StudentController } from './student.controller';\nimport { StudentService } from './providers/student.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Student, StudentSchema } from './schemas/student.schema';\nimport { InsertStudentProvider } from './providers/insert-student.provider';\nimport { ExamModule } from 'src/exam/exam.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: Student.name,\n        schema: StudentSchema,\n      },\n    ]),\n\n    forwardRef(() => ExamModule),\n  ],\n  controllers: [StudentController],\n  providers: [StudentService, InsertStudentProvider],\n  exports: [StudentService]\n})\nexport class StudentModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StudentResponseData.html":{"url":"interfaces/StudentResponseData.html","title":"interface - StudentResponseData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StudentResponseData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interfaces/report.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            matricNumber\n                                        \n                                \n                                \n                                        \n                                            responses\n                                        \n                                \n                                \n                                        \n                                            studentName\n                                        \n                                \n                                \n                                        \n                                            totalScore\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        matricNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        matricNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responses\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        responses:         QuestionResponse[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuestionResponse[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        studentName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        studentName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalScore\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalScore:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface QuestionResponse {\n  question: string;\n  studentResponse: string;\n  aiScore?: number;\n  aiComment?: string;\n}\n\nexport interface StudentResponseData {\n  totalScore: string,\n  studentName: string;\n  matricNumber: string;\n  responses: QuestionResponse[];\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StudentService.html":{"url":"injectables/StudentService.html","title":"injectable - StudentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StudentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/providers/student.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fetchQuestionsForStudent\n                            \n                            \n                                    Public\n                                    Async\n                                fetchStudentAssignments\n                            \n                            \n                                    Public\n                                    Async\n                                insertStudents\n                            \n                            \n                                    Public\n                                    Async\n                                loginStudent\n                            \n                            \n                                    Public\n                                    Async\n                                submitMcqExam\n                            \n                            \n                                    Public\n                                    Async\n                                submitOeExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(studentModel: Model, insertStudentProvider: InsertStudentProvider, fetchExamAssignmentsProvider: FetchExamAssignmentsProvider, examService: ExamService, gradeOeExamProvider: GradeOeExamProvider)\n                    \n                \n                        \n                            \n                                Defined in src/student/providers/student.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        studentModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insertStudentProvider\n                                                  \n                                                        \n                                                                        InsertStudentProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fetchExamAssignmentsProvider\n                                                  \n                                                        \n                                                                        FetchExamAssignmentsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examService\n                                                  \n                                                        \n                                                                        ExamService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        gradeOeExamProvider\n                                                  \n                                                        \n                                                                        GradeOeExamProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fetchQuestionsForStudent\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchQuestionsForStudent(fetchQuestionParamsDto: FetchQuestionParamsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fetchQuestionParamsDto\n                                            \n                                                            FetchQuestionParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fetchStudentAssignments\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchStudentAssignments(studentId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        insertStudents\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertStudents(tutorialList: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tutorialList\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        loginStudent\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginStudent(loginStudentDto: LoginStudentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginStudentDto\n                                            \n                                                            LoginStudentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        submitMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitMcqExam(submitMcqExamDto: SubmitMcqExamDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                submitMcqExamDto\n                                            \n                                                            SubmitMcqExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        submitOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    submitOeExam(submitOeExamDto: SubmitOeExamDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/student/providers/student.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                submitOeExamDto\n                                            \n                                                            SubmitOeExamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Student, StudentDocument } from '../schemas/student.schema';\nimport { Model } from 'mongoose';\nimport { InsertStudentProvider } from './insert-student.provider';\nimport { LoginStudentDto } from '../dtos/login-student.dto';\nimport { successResponse } from 'src/utils/response-writer';\nimport { ExamService } from 'src/exam/providers/exam.service';\nimport { FetchExamAssignmentsProvider } from 'src/exam/providers/fetch-exam-assignments.provider';\nimport { FetchQuestionParamsDto } from '../dtos/fetch-question-params.dto';\nimport { SubmitMcqExamDto } from '../dtos/submit-mcq-exam.dto';\nimport { SubmitOeExamDto } from '../dtos/submit-oe-exam.dto';\nimport { GradeOeExamProvider } from 'src/exam/providers/grade-oe-exam.provider';\n\n@Injectable()\nexport class StudentService {\n  constructor(\n    @InjectModel(Student.name)\n    private readonly studentModel: Model,\n\n    private readonly insertStudentProvider: InsertStudentProvider,\n\n    @Inject(forwardRef(() => FetchExamAssignmentsProvider))\n    private readonly fetchExamAssignmentsProvider: FetchExamAssignmentsProvider,\n\n    @Inject(forwardRef(() => ExamService))\n    private readonly examService: ExamService,\n\n    private readonly gradeOeExamProvider: GradeOeExamProvider,\n\n  ) { }\n\n  public async loginStudent(loginStudentDto: LoginStudentDto) {\n\n    let student = await this.studentModel.findOne({ matricNo: loginStudentDto.matricNo })\n    if (!student) {\n      throw new NotFoundException('Student with matric number does not exist.')\n    }\n\n    if (student.fullName.split(' ')[0].toLowerCase() != loginStudentDto.password.toLowerCase()) {\n      throw new UnauthorizedException('Incorrect password')\n    }\n\n    return successResponse({ message: 'Login Successful', data: student })\n  }\n\n  public async insertStudents(\n    tutorialList: Express.Multer.File,\n  ): Promise {\n    return this.insertStudentProvider.insertStudents(tutorialList)\n  }\n\n  public async fetchStudentAssignments(studentId: string) {\n    const result = await this.fetchExamAssignmentsProvider.getAssignmentsForStudent(studentId)\n\n    return successResponse({ message: 'Exam Assignments for Student fetched', data: result })\n  }\n\n  public async fetchQuestionsForStudent(fetchQuestionParamsDto: FetchQuestionParamsDto) {\n    const exam = await this.examService.fetchExam(fetchQuestionParamsDto.examId);\n\n    const questions = await this.fetchExamAssignmentsProvider.generateAndCacheQuestions(fetchQuestionParamsDto.studentId, exam)\n\n    return successResponse({ message: \"Questions retrieved successfully\", data: questions })\n  }\n\n  public async submitMcqExam(submitMcqExamDto: SubmitMcqExamDto) {\n    const scores = await Promise.all(\n      submitMcqExamDto.responses.map(async (response) => {\n        const question = await this.fetchExamAssignmentsProvider.getCachedMcqQuestion(response.questionId);\n\n        if (question && question.answer === response.answer) {\n          return 1;\n        }\n        return 0;\n      })\n    );\n\n    const totalScore = scores.reduce((sum, score) => sum + score, 0);\n\n    await this.fetchExamAssignmentsProvider.updateStudentMcqScore(submitMcqExamDto.examId, submitMcqExamDto.studentId, totalScore);\n\n    return successResponse({ message: \"Exam Successfully Submitted.\" })\n  }\n\n  public async submitOeExam(submitOeExamDto: SubmitOeExamDto) {\n    const { guideVectorStoreId } = await this.examService.fetchExam(submitOeExamDto.examId)\n\n    await this.gradeOeExamProvider.submitResponses(submitOeExamDto, guideVectorStoreId)\n    return successResponse({ message: \"Exam Successfully Submitted.\" })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubmitMcqExamDto.html":{"url":"classes/SubmitMcqExamDto.html","title":"class - SubmitMcqExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubmitMcqExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/dtos/submit-mcq-exam.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                examId\n                            \n                            \n                                    \n                                    \n                                    \n                                responses\n                            \n                            \n                                    \n                                    \n                                studentId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/submit-mcq-exam.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        responses\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StudentAnswerDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/submit-mcq-exam.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        studentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/submit-mcq-exam.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsString, ValidateNested, ArrayMinSize } from \"class-validator\";\nimport { Type } from \"class-transformer\";\nimport { StudentAnswerDto } from \"./student-answer.dto\";\n\nexport class SubmitMcqExamDto {\n    @IsString()\n    @IsNotEmpty()\n    studentId: string;\n\n    @IsString()\n    @IsNotEmpty()\n    examId: string;\n    \n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => StudentAnswerDto)\n    responses: StudentAnswerDto[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubmitOeExamDto.html":{"url":"classes/SubmitOeExamDto.html","title":"class - SubmitOeExamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubmitOeExamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/student/dtos/submit-oe-exam.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                examId\n                            \n                            \n                                    \n                                    \n                                    \n                                responses\n                            \n                            \n                                    \n                                    \n                                studentId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/submit-oe-exam.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        responses\n                        \n                    \n                \n            \n                \n                    \n                        Type :     StudentAnswerDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/submit-oe-exam.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        studentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/student/dtos/submit-oe-exam.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsString, ValidateNested } from \"class-validator\";\nimport { StudentAnswerDto } from \"./student-answer.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class SubmitOeExamDto {\n\n    @IsString()\n    @IsNotEmpty()\n    studentId: string;\n\n    @IsString()\n    @IsNotEmpty()\n    examId: string;\n    \n\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => StudentAnswerDto)\n    responses: StudentAnswerDto[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExamParamDto.html":{"url":"classes/UpdateExamParamDto.html","title":"class - UpdateExamParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExamParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/dtos/update-exam-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for extracting the examId from the URL path\nwhen updating or deleting an exam (MCQ or OE).\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                examId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        examId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier of the exam to update or delete', example: 'exam_123abc'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exam/dtos/update-exam-param.dto.ts:20\n                        \n                    \n\n            \n                \n                    Unique identifier of the exam to update or delete.\nExample: exam_123abc\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNotEmpty } from 'class-validator';\n\n/**\n * DTO for extracting the `examId` from the URL path\n * when updating or deleting an exam (MCQ or OE).\n */\nexport class UpdateExamParamDto {\n  /**\n   * Unique identifier of the exam to update or delete.\n   * \n   * Example: `exam_123abc`\n   */\n  @ApiProperty({\n    description: 'Unique identifier of the exam to update or delete',\n    example: 'exam_123abc',\n  })\n  @IsString()\n  @IsNotEmpty()\n  examId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateMcqExamProvider.html":{"url":"injectables/UpdateMcqExamProvider.html","title":"injectable - UpdateMcqExamProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateMcqExamProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/update-mcq-exam.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider responsible for updating MCQ exams by parsing a template file and storing the questions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prepareListForBulkWrite\n                            \n                            \n                                    Public\n                                    Async\n                                updateMcqExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mcqQuestionModel: Model, examSchema: Model, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/update-mcq-exam.provider.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mcqQuestionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examSchema\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prepareListForBulkWrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    prepareListForBulkWrite(mcqList: IMcqQuestion[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/update-mcq-exam.provider.ts:109\n                        \n                    \n\n\n            \n                \n                        Prepares a bulk write operation list from an array of parsed MCQ questions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mcqList\n                                            \n                                                            IMcqQuestion[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParsed MCQ questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                List of MongoDB bulk write operations\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateMcqExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateMcqExam(examId: string, mcqTemplate: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/update-mcq-exam.provider.ts:53\n                        \n                    \n\n\n            \n                \n                        Updates an MCQ exam with questions from an uploaded template file.\n\nVerifies exam existence and type\nParses and validates the MCQ template\nSaves new or updated MCQ questions to the database\nLinks questions to the exam using a transactional operation\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to update\n\n\n                                            \n                                        \n                                        \n                                                mcqTemplate\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile containing MCQ questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Success response if operation completes\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport {\n  IMcqQuestion,\n  iMcqQuestionExpectedKeys,\n} from 'src/utils/interfaces/mcq-question.interface';\nimport { parseTemplate } from 'src/utils/template-parser';\nimport { Connection, Model } from 'mongoose';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport {\n  McqQuestion,\n  McqQuestionDocument,\n} from '../schemas/mcq/mcq-question.schema';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { IResponse, successResponse } from 'src/utils/response-writer';\nimport { examType } from '../enums/exam-type.enum';\n\n/**\n * Provider responsible for updating MCQ exams by parsing a template file and storing the questions.\n */\n@Injectable()\nexport class UpdateMcqExamProvider {\n  constructor(\n    @InjectModel(McqQuestion.name)\n    private readonly mcqQuestionModel: Model,\n\n    @InjectModel(Exam.name)\n    private readonly examSchema: Model,\n\n    @InjectConnection()\n    private readonly connection: Connection,\n  ) { }\n\n  /**\n   * Updates an MCQ exam with questions from an uploaded template file.\n   *\n   * - Verifies exam existence and type\n   * - Parses and validates the MCQ template\n   * - Saves new or updated MCQ questions to the database\n   * - Links questions to the exam using a transactional operation\n   *\n   * @param examId - ID of the exam to update\n   * @param mcqTemplate - File containing MCQ questions\n   * @returns Success response if operation completes\n   *\n   * @throws {NotFoundException} If exam is not found\n   * @throws {BadRequestException} If exam type is not MCQ or template is invalid\n   */\n  public async updateMcqExam(\n    examId: string,\n    mcqTemplate: Express.Multer.File,\n  ): Promise {\n    const exam = await this.examSchema.findById(examId);\n\n    if (!exam) {\n      throw new NotFoundException('Exam not found');\n    }\n\n    if (exam.examType !== examType.MCQ) {\n      throw new BadRequestException('Exam mode is not MCQ');\n    }\n\n    const mcqList = parseTemplate(\n      mcqTemplate,\n      iMcqQuestionExpectedKeys,\n    );\n\n    if (mcqList.length === 0) {\n      throw new BadRequestException('Questions template is empty');\n    }\n\n    const session = await this.connection.startSession();\n    session.startTransaction();\n\n    try {\n      const operations = this.prepareListForBulkWrite(mcqList);\n\n      const result = await this.mcqQuestionModel.bulkWrite(operations, {\n        session,\n      });\n\n      const insertedQuestionIds = Object.values(result.insertedIds || {});\n      exam.questions.push(...insertedQuestionIds);\n      await exam.save({ session });\n\n      await session.commitTransaction();\n\n      return successResponse({ message: 'Exam updated successfully.' });\n    } catch (error) {\n      await session.abortTransaction();\n      throw new BadRequestException(\n        error.message || 'Failed to save exam questions',\n      );\n    } finally {\n      await session.endSession();\n    }\n  }\n\n  /**\n   * Prepares a bulk write operation list from an array of parsed MCQ questions.\n   *\n   * @param mcqList - Parsed MCQ questions\n   * @returns List of MongoDB bulk write operations\n   */\n  private prepareListForBulkWrite(mcqList: IMcqQuestion[]) {\n    const collapseMcqList = mcqList.map((mcq) => ({\n      question: mcq.Question,\n      options: [mcq.A, mcq.B, mcq.C, mcq.D],\n      answer: mcq['Correct Answer'],\n    }));\n\n    const operations = collapseMcqList.map((item) => ({\n      insertOne: {\n        document: item,\n      },\n    }));\n    return operations;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateOeExamProvider.html":{"url":"injectables/UpdateOeExamProvider.html","title":"injectable - UpdateOeExamProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateOeExamProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exam/providers/update-oe-exam.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Provider responsible for updating open-ended (OE) exams.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateOeExam\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oeQuestionModel: Model, examSchema: Model, connection: Connection, openAIService: OpenaiService)\n                    \n                \n                        \n                            \n                                Defined in src/exam/providers/update-oe-exam.provider.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oeQuestionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        examSchema\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        openAIService\n                                                  \n                                                        \n                                                                        OpenaiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateOeExam\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOeExam(examId: string, markingGuide: Express.Multer.File, oeTemplate: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/exam/providers/update-oe-exam.provider.ts:57\n                        \n                    \n\n\n            \n                \n                        Updates an OE exam by inserting parsed questions from an uploaded template.\n\nVerifies exam existence and type\nParses OE questions template\nInserts questions and links them to the exam\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the exam to update\n\n\n                                            \n                                        \n                                        \n                                                markingGuide\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile containing marking guide (not yet processed)\n\n\n                                            \n                                        \n                                        \n                                                oeTemplate\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFile containing open-ended questions\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Success response if update completes\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Exam, ExamDocument } from '../schemas/exam.schema';\nimport { InjectConnection, InjectModel } from '@nestjs/mongoose';\nimport {\n  OeQuestion,\n  OeQuestionDocument,\n} from '../schemas/oe/oe-question.schema';\nimport { Connection, Model } from 'mongoose';\nimport { parseTemplate } from 'src/utils/template-parser';\nimport {\n  iOeExpectedKeys,\n  IOeQuestion,\n} from 'src/utils/interfaces/oe-question.interface';\nimport { IResponse, successResponse } from 'src/utils/response-writer';\nimport { examType } from '../enums/exam-type.enum';\nimport { OpenaiService } from 'src/openai/openai.service';\nimport { InternalServerError } from 'openai';\n\n/**\n * Provider responsible for updating open-ended (OE) exams.\n */\n@Injectable()\nexport class UpdateOeExamProvider {\n  constructor(\n    @InjectModel(OeQuestion.name)\n    private readonly oeQuestionModel: Model,\n\n    @InjectModel(Exam.name)\n    private readonly examSchema: Model,\n\n    @InjectConnection()\n    private readonly connection: Connection,\n\n    private readonly openAIService: OpenaiService\n  ) { }\n\n  /**\n   * Updates an OE exam by inserting parsed questions from an uploaded template.\n   *\n   * - Verifies exam existence and type\n   * - Parses OE questions template\n   * - Inserts questions and links them to the exam\n   *\n   * @param examId - ID of the exam to update\n   * @param markingGuide - File containing marking guide (not yet processed)\n   * @param oeTemplate - File containing open-ended questions\n   * @returns Success response if update completes\n   *\n   * @throws {NotFoundException} If exam is not found\n   * @throws {BadRequestException} If exam type is not OE or questions are invalid\n   */\n  public async updateOeExam(\n    examId: string,\n    markingGuide: Express.Multer.File,\n    oeTemplate: Express.Multer.File,\n  ): Promise {\n    const exam = await this.examSchema.findById(examId);\n\n    if (!exam) {\n      throw new NotFoundException('Exam not found');\n    }\n\n    if (exam.examType !== examType.OE) {\n      throw new BadRequestException('Exam mode is not OE');\n    }\n\n    const oeqList = parseTemplate(oeTemplate, iOeExpectedKeys);\n\n    if (oeqList.length === 0) {\n      throw new BadRequestException('Question template is empty');\n    }\n\n    const session = await this.connection.startSession();\n    session.startTransaction();\n\n    try {\n      const operations = oeqList.map((oeq) => ({\n        insertOne: { document: { question: oeq.Question } },\n      }));\n\n      const result = await this.oeQuestionModel.bulkWrite(operations, {\n        session,\n      });\n\n      const insertedQuestionIds = Object.values(result.insertedIds || {});\n\n      // Improve later, by sending an event to a queue. Implement retries and debouncing.\n      const uploadedFile = await this.openAIService.uploadMarkingGuide(markingGuide, exam.courseCode);\n      if(!uploadedFile) {\n        throw new InternalServerErrorException(\"Couldn't save marking guide\")\n      } \n\n      exam.guideVectorStoreId = uploadedFile.id\n\n      exam.questions.push(...insertedQuestionIds);\n      await exam.save({ session });\n\n      await session.commitTransaction();\n\n      return successResponse({ message: 'Exam updated successfully' });\n    } catch (error) {\n      await session.abortTransaction();\n      throw new BadRequestException(\n        error.message || 'Failed to save exam questions',\n      );\n    } finally {\n      await session.endSession();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/admin/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/admin/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/auth/decorators/active-admin.decorator.ts\n            \n            variable\n            ActiveAdmin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/admin/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/admin/auth/guards/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/auth/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/admin/auth/interfaces/active-admin-data.interface.ts\n            \n            interface\n            ActiveAdminData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/admin/auth/providers/generate-token.provider.ts\n            \n            class\n            GenerateTokenProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/admin/dtos/create-admin.dto.ts\n            \n            class\n            CreateAdminDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/providers/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/admin/schemas/admin.schema.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/admin/schemas/admin.schema.ts\n            \n            variable\n            AdminSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/admin/schemas/admin.schema.ts\n            \n            type alias\n            AdminDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cache/cache.service.ts\n            \n            injectable\n            CacheService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/exam/constants/cache-keys.ts\n            \n            function\n            generateExamQuestionsCacheKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/constants/cache-keys.ts\n            \n            function\n            generateMcqQuestionCacheKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam-assignment.dto.ts\n            \n            class\n            CreateExamAssignmentDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/exam/dtos/create-exam.dto.ts\n            \n            class\n            CreateExamDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/exam/dtos/grade-oe-exam.dto.ts\n            \n            class\n            GradeOeExamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exam/dtos/mcq.dto.ts\n            \n            class\n            Mcq\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/dtos/update-exam-param.dto.ts\n            \n            class\n            UpdateExamParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/exam/exam.controller.ts\n            \n            controller\n            ExamController\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                src/exam/interfaces/question-cache-type.interface.ts\n            \n            interface\n            McqQuestionCache\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/exam/interfaces/question-cache-type.interface.ts\n            \n            interface\n            OeQuestionCache\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/exam/interfaces/question-cache-type.interface.ts\n            \n            type alias\n            CachedQuestion\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/providers/create-exam.provider.ts\n            \n            injectable\n            CreateExamProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/exam/providers/exam-report.provider.ts\n            \n            injectable\n            ExamReportProvider\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/exam/providers/exam.service.ts\n            \n            injectable\n            ExamService\n            \n                64 %\n                (9/14)\n            \n        \n        \n            \n                \n                src/exam/providers/fetch-exam-assignments.provider.ts\n            \n            injectable\n            FetchExamAssignmentsProvider\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                        src/exam/providers/fetch-exam-assignments.provider.ts\n            \n            variable\n            CACHE_TTL\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/exam/providers/grade-oe-exam.provider.ts\n            \n            injectable\n            GradeOeExamProvider\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/exam/providers/update-mcq-exam.provider.ts\n            \n            injectable\n            UpdateMcqExamProvider\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/exam/providers/update-oe-exam.provider.ts\n            \n            injectable\n            UpdateOeExamProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/exam/schemas/exam-assigment.schema.ts\n            \n            class\n            ExamAssignment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/exam/schemas/exam-assigment.schema.ts\n            \n            variable\n            ExamAssignmentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/exam-assigment.schema.ts\n            \n            type alias\n            ExamAssignmentDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/schemas/exam.schema.ts\n            \n            class\n            Exam\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/exam/schemas/exam.schema.ts\n            \n            variable\n            ExamSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/exam.schema.ts\n            \n            type alias\n            ExamDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/schemas/mcq/mcq-question.schema.ts\n            \n            class\n            McqQuestion\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/exam/schemas/mcq/mcq-question.schema.ts\n            \n            variable\n            McqQuestionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/mcq/mcq-question.schema.ts\n            \n            type alias\n            McqQuestionDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/schemas/oe-exam-grading.schema.ts\n            \n            class\n            OeExamGrading\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/exam/schemas/oe-exam-grading.schema.ts\n            \n            variable\n            OeExamGradingSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/oe-exam-grading.schema.ts\n            \n            type alias\n            OeExamGradingDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/exam/schemas/oe/oe-question.schema.ts\n            \n            class\n            OeQuestion\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/exam/schemas/oe/oe-question.schema.ts\n            \n            variable\n            OeQuestionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/exam/schemas/oe/oe-question.schema.ts\n            \n            type alias\n            OeQuestionDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/global-http-exception.filter.ts\n            \n            class\n            GlobalHttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/openai/openai.service.ts\n            \n            injectable\n            OpenaiService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/student/dtos/fetch-question-params.dto.ts\n            \n            class\n            FetchQuestionParamsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/student/dtos/login-student.dto.ts\n            \n            class\n            LoginStudentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/student/dtos/student-answer.dto.ts\n            \n            class\n            StudentAnswerDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/student/dtos/submit-mcq-exam.dto.ts\n            \n            class\n            SubmitMcqExamDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/student/dtos/submit-oe-exam.dto.ts\n            \n            class\n            SubmitOeExamDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/student/providers/insert-student.provider.ts\n            \n            injectable\n            InsertStudentProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/student/providers/student.service.ts\n            \n            injectable\n            StudentService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/student/schemas/student.schema.ts\n            \n            class\n            Student\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/student/schemas/student.schema.ts\n            \n            variable\n            StudentSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/student/schemas/student.schema.ts\n            \n            type alias\n            StudentDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/student/student.controller.ts\n            \n            controller\n            StudentController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/utils/generate-html-template.ts\n            \n            function\n            generateHTMLTemplate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/interfaces/grading-request.ts\n            \n            interface\n            GradingRequest\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/utils/interfaces/grading-request.ts\n            \n            interface\n            GradingResult\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/interfaces/grading-request.ts\n            \n            interface\n            OpenaiApiResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/interfaces/mcq-question.interface.ts\n            \n            interface\n            IMcqQuestion\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        src/utils/interfaces/mcq-question.interface.ts\n            \n            variable\n            iMcqQuestionExpectedKeys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/interfaces/oe-question.interface.ts\n            \n            interface\n            IOeQuestion\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/utils/interfaces/oe-question.interface.ts\n            \n            variable\n            iOeExpectedKeys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/interfaces/report.interface.ts\n            \n            interface\n            QuestionResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/interfaces/report.interface.ts\n            \n            interface\n            StudentResponseData\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/interfaces/student.interface.ts\n            \n            interface\n            IStudent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/interfaces/student.interface.ts\n            \n            variable\n            iStudentExpectedKeys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/response-writer.ts\n            \n            interface\n            IResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/utils/response-writer.ts\n            \n            function\n            successResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/template-parser.ts\n            \n            function\n            parseTemplate\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^3.0.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mongoose : ^11.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            archiver : ^7.0.1\n        \n            bcrypt : ^5.1.1\n        \n            cache-manager : ^6.4.3\n        \n            cache-manager-redis-store : ^3.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            helmet : ^8.1.0\n        \n            joi : ^17.13.3\n        \n            mongoose : ^8.13.2\n        \n            openai : ^5.12.2\n        \n            puppeteer : ^24.16.1\n        \n            redis : ^5.5.6\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            xlsx : ^0.18.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            examType   (src/.../exam-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/admin/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/exam/enums/exam-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        examType\n                    \n                \n                    \n                        \n                            Enum representing the type of an exam.\n\nMCQ: Multiple Choice Questions.\nOE: Open-Ended Questions.\n\n\n                        \n                    \n                        \n                            \n                                 MCQ\n                            \n                        \n                        \n                            \n                                Value : McqQuestion\n                            \n                        \n                        \n                            \n                                 OE\n                            \n                        \n                        \n                            \n                                Value : OeQuestion\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateExamQuestionsCacheKey   (src/.../cache-keys.ts)\n                        \n                        \n                            generateHTMLTemplate   (src/.../generate-html-template.ts)\n                        \n                        \n                            generateMcqQuestionCacheKey   (src/.../cache-keys.ts)\n                        \n                        \n                            parseTemplate   (src/.../template-parser.ts)\n                        \n                        \n                            successResponse   (src/.../response-writer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/exam/constants/cache-keys.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateExamQuestionsCacheKey\n                        \n                    \n                \n            \n            \n                \ngenerateExamQuestionsCacheKey(studentId: string, examId: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                studentId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                examId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateMcqQuestionCacheKey\n                        \n                    \n                \n            \n            \n                \ngenerateMcqQuestionCacheKey(questionId)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                questionId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/utils/generate-html-template.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateHTMLTemplate\n                        \n                    \n                \n            \n            \n                \ngenerateHTMLTemplate(studentData: StudentResponseData, courseInfo: any)\n                \n            \n\n\n\n\n            \n                \n                        Generate HTML template for student response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                studentData\n                                            \n                                                            StudentResponseData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStudent response data\n\n\n                                            \n                                        \n                                        \n                                                courseInfo\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCourse information\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                string - HTML content\n\n                            \n                \n            \n        \n    \n    src/utils/template-parser.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseTemplate\n                        \n                    \n                \n            \n            \n                \nparseTemplate(template, expectedKeys)\n                \n            \n\n\n\n\n            \n                \n                        Parses an uploaded Excel file and maps it into a strongly-typed array of objects.\nThis function ensures that the uploaded file contains the expected columns.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                template\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe uploaded file received through a multipart/form-data request.\n\n\n                                            \n                                        \n                                        \n                                                expectedKeys\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of keys (column headers) that must be present in the file.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     [] | null\n\n                        \n                            \n                                An array of objects parsed from the Excel file, typed as T[].\n\n                            \n                \n            \n        \n    \n    src/utils/response-writer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        successResponse\n                        \n                    \n                \n            \n            \n                \nsuccessResponse(__namedParameters: {message: string, data: any})\n                \n            \n\n\n\n\n            \n                \n                        Utility function to generate a standardized success response.\nThis is used across the application to ensure all successful API responses\nfollow a consistent structure defined by the IResponse interface.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IResponse\n\n                        \n                            \n                                A standardized success response object.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2025 Oluwafemi Ojuri\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CacheModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenaiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StudentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CacheModule\n\n\n\ncluster_CacheModule_exports\n\n\n\ncluster_CacheModule_providers\n\n\n\ncluster_ExamModule\n\n\n\ncluster_ExamModule_exports\n\n\n\ncluster_ExamModule_providers\n\n\n\ncluster_OpenaiModule\n\n\n\ncluster_OpenaiModule_exports\n\n\n\ncluster_OpenaiModule_providers\n\n\n\ncluster_StudentModule\n\n\n\ncluster_StudentModule_exports\n\n\n\ncluster_StudentModule_providers\n\n\n\n\nAdminService\n\nAdminService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAdminModule -->\n\nAuthService->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nCacheModule\n\nCacheModule\n\nAppModule -->\n\nCacheModule->AppModule\n\n\n\n\n\nCacheService \n\nCacheService \n\nCacheService  -->\n\nCacheModule->CacheService \n\n\n\n\n\nExamModule\n\nExamModule\n\nAppModule -->\n\nExamModule->AppModule\n\n\n\n\n\nExamService \n\nExamService \n\nExamService  -->\n\nExamModule->ExamService \n\n\n\n\n\nFetchExamAssignmentsProvider \n\nFetchExamAssignmentsProvider \n\nFetchExamAssignmentsProvider  -->\n\nExamModule->FetchExamAssignmentsProvider \n\n\n\n\n\nGradeOeExamProvider \n\nGradeOeExamProvider \n\nGradeOeExamProvider  -->\n\nExamModule->GradeOeExamProvider \n\n\n\n\n\nOpenaiModule\n\nOpenaiModule\n\nExamModule -->\n\nOpenaiModule->ExamModule\n\n\n\nAppModule -->\n\nOpenaiModule->AppModule\n\n\n\n\n\nOpenaiService \n\nOpenaiService \n\nOpenaiService  -->\n\nOpenaiModule->OpenaiService \n\n\n\n\n\nStudentModule\n\nStudentModule\n\nAppModule -->\n\nStudentModule->AppModule\n\n\n\n\n\nStudentService \n\nStudentService \n\nStudentService  -->\n\nStudentModule->StudentService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nCacheService\n\nCacheService\n\nCacheModule -->\n\nCacheService->CacheModule\n\n\n\n\n\nCreateExamProvider\n\nCreateExamProvider\n\nExamModule -->\n\nCreateExamProvider->ExamModule\n\n\n\n\n\nExamReportProvider\n\nExamReportProvider\n\nExamModule -->\n\nExamReportProvider->ExamModule\n\n\n\n\n\nExamService\n\nExamService\n\nExamModule -->\n\nExamService->ExamModule\n\n\n\n\n\nFetchExamAssignmentsProvider\n\nFetchExamAssignmentsProvider\n\nExamModule -->\n\nFetchExamAssignmentsProvider->ExamModule\n\n\n\n\n\nGradeOeExamProvider\n\nGradeOeExamProvider\n\nExamModule -->\n\nGradeOeExamProvider->ExamModule\n\n\n\n\n\nUpdateMcqExamProvider\n\nUpdateMcqExamProvider\n\nExamModule -->\n\nUpdateMcqExamProvider->ExamModule\n\n\n\n\n\nUpdateOeExamProvider\n\nUpdateOeExamProvider\n\nExamModule -->\n\nUpdateOeExamProvider->ExamModule\n\n\n\n\n\nOpenaiService\n\nOpenaiService\n\nOpenaiModule -->\n\nOpenaiService->OpenaiModule\n\n\n\n\n\nInsertStudentProvider\n\nInsertStudentProvider\n\nStudentModule -->\n\nInsertStudentProvider->StudentModule\n\n\n\n\n\nStudentService\n\nStudentService\n\nStudentModule -->\n\nStudentService->StudentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AdminDocument   (src/.../admin.schema.ts)\n                        \n                        \n                            CachedQuestion   (src/.../question-cache-type.interface.ts)\n                        \n                        \n                            ExamAssignmentDocument   (src/.../exam-assigment.schema.ts)\n                        \n                        \n                            ExamDocument   (src/.../exam.schema.ts)\n                        \n                        \n                            McqQuestionDocument   (src/.../mcq-question.schema.ts)\n                        \n                        \n                            OeExamGradingDocument   (src/.../oe-exam-grading.schema.ts)\n                        \n                        \n                            OeQuestionDocument   (src/.../oe-question.schema.ts)\n                        \n                        \n                            StudentDocument   (src/.../student.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/admin/schemas/admin.schema.ts\n    \n    \n        \n            \n                \n                    \n                    AdminDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/exam/interfaces/question-cache-type.interface.ts\n    \n    \n        \n            \n                \n                    \n                    CachedQuestion\n                \n            \n            \n                \n                        McqQuestionCache | OeQuestionCache\n\n                \n            \n        \n    \n    src/exam/schemas/exam-assigment.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ExamAssignmentDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/exam/schemas/exam.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ExamDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/exam/schemas/mcq/mcq-question.schema.ts\n    \n    \n        \n            \n                \n                    \n                    McqQuestionDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/exam/schemas/oe-exam-grading.schema.ts\n    \n    \n        \n            \n                \n                    \n                    OeExamGradingDocument\n                \n            \n            \n                \n                        HydratedDocument\n\n                \n            \n        \n    \n    src/exam/schemas/oe/oe-question.schema.ts\n    \n    \n        \n            \n                \n                    \n                    OeQuestionDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/student/schemas/student.schema.ts\n    \n    \n        \n            \n                \n                    \n                    StudentDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveAdmin   (src/.../active-admin.decorator.ts)\n                        \n                        \n                            AdminSchema   (src/.../admin.schema.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            CACHE_TTL   (src/.../fetch-exam-assignments.provider.ts)\n                        \n                        \n                            ExamAssignmentSchema   (src/.../exam-assigment.schema.ts)\n                        \n                        \n                            ExamSchema   (src/.../exam.schema.ts)\n                        \n                        \n                            iMcqQuestionExpectedKeys   (src/.../mcq-question.interface.ts)\n                        \n                        \n                            iOeExpectedKeys   (src/.../oe-question.interface.ts)\n                        \n                        \n                            iStudentExpectedKeys   (src/.../student.interface.ts)\n                        \n                        \n                            McqQuestionSchema   (src/.../mcq-question.schema.ts)\n                        \n                        \n                            OeExamGradingSchema   (src/.../oe-exam-grading.schema.ts)\n                        \n                        \n                            OeQuestionSchema   (src/.../oe-question.schema.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            StudentSchema   (src/.../student.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/admin/auth/decorators/active-admin.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveAdmin\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveAdminData, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveAdminData = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/admin/schemas/admin.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AdminSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Admin)\n                    \n                \n\n\n        \n    \n\n    src/admin/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/admin/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/exam/providers/fetch-exam-assignments.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_TTL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 1000 * 60 * 60 * 24\n                    \n                \n\n            \n                \n                    Cache for just 1 day\n\n                \n            \n\n        \n    \n\n    src/exam/schemas/exam-assigment.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ExamAssignmentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ExamAssignment)\n                    \n                \n\n\n        \n    \n\n    src/exam/schemas/exam.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ExamSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Exam)\n                    \n                \n\n\n        \n    \n\n    src/utils/interfaces/mcq-question.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        iMcqQuestionExpectedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'Question',\n  'A',\n  'B',\n  'C',\n  'D',\n  'Correct Answer',\n]\n                    \n                \n\n            \n                \n                    An array of the expected keys for a valid MCQ question object.\nThis can be used for validation or checking the shape of imported data.\n\n                \n            \n\n        \n    \n\n    src/utils/interfaces/oe-question.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        iOeExpectedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['Question']\n                    \n                \n\n            \n                \n                    An array of the expected keys for a valid open-ended question object.\nUseful for validating imported data or ensuring consistency.\n\n                \n            \n\n        \n    \n\n    src/utils/interfaces/student.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        iStudentExpectedKeys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'FullName',\n  'Matric No',\n]\n                    \n                \n\n            \n                \n                    List of expected keys in a valid student object.\nThis is useful for validating structured data such as CSV or Excel file imports.\n\n                \n            \n\n        \n    \n\n    src/exam/schemas/mcq/mcq-question.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        McqQuestionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(McqQuestion)\n                    \n                \n\n\n        \n    \n\n    src/exam/schemas/oe-exam-grading.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OeExamGradingSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(OeExamGrading)\n                    \n                \n\n\n        \n    \n\n    src/exam/schemas/oe/oe-question.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OeQuestionSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(OeQuestion)\n                    \n                \n\n\n        \n    \n\n    src/student/schemas/student.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StudentSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Student)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
